
Mnist.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6d4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035f8  0800f978  0800f978  0001f978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f70  08012f70  0003093c  2**0
                  CONTENTS
  4 .ARM          00000008  08012f70  08012f70  00022f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f78  08012f78  0003093c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012f78  08012f78  00022f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012f7c  08012f7c  00022f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000087c  24000000  08012f80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400087c  080137fc  0003087c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240008dc  0801385c  000308dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001584  2400093c  080138bc  0003093c  2**2
                  ALLOC
 12 ._user_heap_stack 00000a00  24001ec0  080138bc  00031ec0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0003093c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000269e1  00000000  00000000  0003096a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00004040  00000000  00000000  0005734b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001280  00000000  00000000  0005b390  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000010f8  00000000  00000000  0005c610  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003ae5a  00000000  00000000  0005d708  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   000124c9  00000000  00000000  00098562  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0016b2af  00000000  00000000  000aaa2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00215cda  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005a10  00000000  00000000  00215d58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400093c 	.word	0x2400093c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f95c 	.word	0x0800f95c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000940 	.word	0x24000940
 80002dc:	0800f95c 	.word	0x0800f95c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000696:	2003      	movs	r0, #3
 8000698:	f000 f998 	bl	80009cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800069c:	f001 ffb2 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 80006a0:	4601      	mov	r1, r0
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <HAL_Init+0x68>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	0a1b      	lsrs	r3, r3, #8
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	4a13      	ldr	r2, [pc, #76]	; (80006fc <HAL_Init+0x6c>)
 80006ae:	5cd3      	ldrb	r3, [r2, r3]
 80006b0:	f003 031f 	and.w	r3, r3, #31
 80006b4:	fa21 f303 	lsr.w	r3, r1, r3
 80006b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_Init+0x68>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f003 030f 	and.w	r3, r3, #15
 80006c2:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <HAL_Init+0x6c>)
 80006c4:	5cd3      	ldrb	r3, [r2, r3]
 80006c6:	f003 031f 	and.w	r3, r3, #31
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	fa22 f303 	lsr.w	r3, r2, r3
 80006d0:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <HAL_Init+0x70>)
 80006d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80006d4:	4a0b      	ldr	r2, [pc, #44]	; (8000704 <HAL_Init+0x74>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 f814 	bl	8000708 <HAL_InitTick>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e002      	b.n	80006f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80006ea:	f008 ffcb 	bl	8009684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	58024400 	.word	0x58024400
 80006fc:	08012b48 	.word	0x08012b48
 8000700:	240006a8 	.word	0x240006a8
 8000704:	240006a4 	.word	0x240006a4

08000708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <HAL_InitTick+0x60>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d101      	bne.n	800071c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	e021      	b.n	8000760 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <HAL_InitTick+0x64>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <HAL_InitTick+0x60>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	fbb3 f3f1 	udiv	r3, r3, r1
 800072e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f96f 	bl	8000a16 <HAL_SYSTICK_Config>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	e00e      	b.n	8000760 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b0f      	cmp	r3, #15
 8000746:	d80a      	bhi.n	800075e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000748:	2200      	movs	r2, #0
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000750:	f000 f947 	bl	80009e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <HAL_InitTick+0x68>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800075a:	2300      	movs	r3, #0
 800075c:	e000      	b.n	8000760 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
}
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	24000004 	.word	0x24000004
 800076c:	240006a4 	.word	0x240006a4
 8000770:	24000000 	.word	0x24000000

08000774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_IncTick+0x20>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_IncTick+0x24>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <HAL_IncTick+0x24>)
 8000786:	6013      	str	r3, [r2, #0]
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	24000004 	.word	0x24000004
 8000798:	2400195c 	.word	0x2400195c

0800079c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return uwTick;
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <HAL_GetTick+0x14>)
 80007a2:	681b      	ldr	r3, [r3, #0]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	2400195c 	.word	0x2400195c

080007b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007bc:	f7ff ffee 	bl	800079c <HAL_GetTick>
 80007c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007cc:	d005      	beq.n	80007da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <HAL_Delay+0x40>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	4413      	add	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007da:	bf00      	nop
 80007dc:	f7ff ffde 	bl	800079c <HAL_GetTick>
 80007e0:	4602      	mov	r2, r0
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d8f7      	bhi.n	80007dc <HAL_Delay+0x28>
  {
  }
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	24000004 	.word	0x24000004

080007f8 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
 return __STM32H7xx_HAL_VERSION;
 80007fc:	f04f 7384 	mov.w	r3, #17301504	; 0x1080000
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <HAL_GetREVID+0x14>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	0c1b      	lsrs	r3, r3, #16
}
 8000816:	4618      	mov	r0, r3
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	5c001000 	.word	0x5c001000

08000824 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <HAL_GetDEVID+0x18>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	5c001000 	.word	0x5c001000

08000840 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000850:	4904      	ldr	r1, [pc, #16]	; (8000864 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4313      	orrs	r3, r2
 8000856:	604b      	str	r3, [r1, #4]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	58000400 	.word	0x58000400

08000868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <__NVIC_SetPriorityGrouping+0x40>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000884:	4013      	ands	r3, r2
 8000886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <__NVIC_SetPriorityGrouping+0x44>)
 8000892:	4313      	orrs	r3, r2
 8000894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000896:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <__NVIC_SetPriorityGrouping+0x40>)
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	60d3      	str	r3, [r2, #12]
}
 800089c:	bf00      	nop
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000ed00 	.word	0xe000ed00
 80008ac:	05fa0000 	.word	0x05fa0000

080008b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__NVIC_GetPriorityGrouping+0x18>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	f003 0307 	and.w	r3, r3, #7
}
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	6039      	str	r1, [r7, #0]
 80008d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80008d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	db0a      	blt.n	80008f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	490c      	ldr	r1, [pc, #48]	; (8000918 <__NVIC_SetPriority+0x4c>)
 80008e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008ea:	0112      	lsls	r2, r2, #4
 80008ec:	b2d2      	uxtb	r2, r2
 80008ee:	440b      	add	r3, r1
 80008f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f4:	e00a      	b.n	800090c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4908      	ldr	r1, [pc, #32]	; (800091c <__NVIC_SetPriority+0x50>)
 80008fc:	88fb      	ldrh	r3, [r7, #6]
 80008fe:	f003 030f 	and.w	r3, r3, #15
 8000902:	3b04      	subs	r3, #4
 8000904:	0112      	lsls	r2, r2, #4
 8000906:	b2d2      	uxtb	r2, r2
 8000908:	440b      	add	r3, r1
 800090a:	761a      	strb	r2, [r3, #24]
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	e000e100 	.word	0xe000e100
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000920:	b480      	push	{r7}
 8000922:	b089      	sub	sp, #36	; 0x24
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	f1c3 0307 	rsb	r3, r3, #7
 800093a:	2b04      	cmp	r3, #4
 800093c:	bf28      	it	cs
 800093e:	2304      	movcs	r3, #4
 8000940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3304      	adds	r3, #4
 8000946:	2b06      	cmp	r3, #6
 8000948:	d902      	bls.n	8000950 <NVIC_EncodePriority+0x30>
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	3b03      	subs	r3, #3
 800094e:	e000      	b.n	8000952 <NVIC_EncodePriority+0x32>
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43da      	mvns	r2, r3
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	401a      	ands	r2, r3
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000968:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	fa01 f303 	lsl.w	r3, r1, r3
 8000972:	43d9      	mvns	r1, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000978:	4313      	orrs	r3, r2
         );
}
 800097a:	4618      	mov	r0, r3
 800097c:	3724      	adds	r7, #36	; 0x24
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
	...

08000988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000998:	d301      	bcc.n	800099e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800099a:	2301      	movs	r3, #1
 800099c:	e00f      	b.n	80009be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <SysTick_Config+0x40>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009a6:	210f      	movs	r1, #15
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ac:	f7ff ff8e 	bl	80008cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <SysTick_Config+0x40>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <SysTick_Config+0x40>)
 80009b8:	2207      	movs	r2, #7
 80009ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	e000e010 	.word	0xe000e010

080009cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ff47 	bl	8000868 <__NVIC_SetPriorityGrouping>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
 80009ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009f0:	f7ff ff5e 	bl	80008b0 <__NVIC_GetPriorityGrouping>
 80009f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	68b9      	ldr	r1, [r7, #8]
 80009fa:	6978      	ldr	r0, [r7, #20]
 80009fc:	f7ff ff90 	bl	8000920 <NVIC_EncodePriority>
 8000a00:	4602      	mov	r2, r0
 8000a02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a06:	4611      	mov	r1, r2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff5f 	bl	80008cc <__NVIC_SetPriority>
}
 8000a0e:	bf00      	nop
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff ffb2 	bl	8000988 <SysTick_Config>
 8000a24:	4603      	mov	r3, r0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d101      	bne.n	8000a42 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e054      	b.n	8000aec <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	7f5b      	ldrb	r3, [r3, #29]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d105      	bne.n	8000a58 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f008 fe30 	bl	80096b8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	791b      	ldrb	r3, [r3, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d10c      	bne.n	8000a80 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a22      	ldr	r2, [pc, #136]	; (8000af4 <HAL_CRC_Init+0xc4>)
 8000a6c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f022 0218 	bic.w	r2, r2, #24
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	e00c      	b.n	8000a9a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6899      	ldr	r1, [r3, #8]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 f834 	bl	8000af8 <HAL_CRCEx_Polynomial_Set>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e028      	b.n	8000aec <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	795b      	ldrb	r3, [r3, #5]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d105      	bne.n	8000aae <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aaa:	611a      	str	r2, [r3, #16]
 8000aac:	e004      	b.n	8000ab8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	6912      	ldr	r2, [r2, #16]
 8000ab6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	695a      	ldr	r2, [r3, #20]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	430a      	orrs	r2, r1
 8000acc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	699a      	ldr	r2, [r3, #24]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	04c11db7 	.word	0x04c11db7

08000af8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b087      	sub	sp, #28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b04:	2300      	movs	r3, #0
 8000b06:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000b08:	231f      	movs	r3, #31
 8000b0a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000b0c:	bf00      	nop
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	1e5a      	subs	r2, r3, #1
 8000b12:	613a      	str	r2, [r7, #16]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d009      	beq.n	8000b2c <HAL_CRCEx_Polynomial_Set+0x34>
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	f003 031f 	and.w	r3, r3, #31
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	fa22 f303 	lsr.w	r3, r2, r3
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d0f0      	beq.n	8000b0e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b18      	cmp	r3, #24
 8000b30:	d846      	bhi.n	8000bc0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8000b32:	a201      	add	r2, pc, #4	; (adr r2, 8000b38 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b38:	08000bc7 	.word	0x08000bc7
 8000b3c:	08000bc1 	.word	0x08000bc1
 8000b40:	08000bc1 	.word	0x08000bc1
 8000b44:	08000bc1 	.word	0x08000bc1
 8000b48:	08000bc1 	.word	0x08000bc1
 8000b4c:	08000bc1 	.word	0x08000bc1
 8000b50:	08000bc1 	.word	0x08000bc1
 8000b54:	08000bc1 	.word	0x08000bc1
 8000b58:	08000bb5 	.word	0x08000bb5
 8000b5c:	08000bc1 	.word	0x08000bc1
 8000b60:	08000bc1 	.word	0x08000bc1
 8000b64:	08000bc1 	.word	0x08000bc1
 8000b68:	08000bc1 	.word	0x08000bc1
 8000b6c:	08000bc1 	.word	0x08000bc1
 8000b70:	08000bc1 	.word	0x08000bc1
 8000b74:	08000bc1 	.word	0x08000bc1
 8000b78:	08000ba9 	.word	0x08000ba9
 8000b7c:	08000bc1 	.word	0x08000bc1
 8000b80:	08000bc1 	.word	0x08000bc1
 8000b84:	08000bc1 	.word	0x08000bc1
 8000b88:	08000bc1 	.word	0x08000bc1
 8000b8c:	08000bc1 	.word	0x08000bc1
 8000b90:	08000bc1 	.word	0x08000bc1
 8000b94:	08000bc1 	.word	0x08000bc1
 8000b98:	08000b9d 	.word	0x08000b9d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d913      	bls.n	8000bca <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000ba6:	e010      	b.n	8000bca <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	d90f      	bls.n	8000bce <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000bb2:	e00c      	b.n	8000bce <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	2b0f      	cmp	r3, #15
 8000bb8:	d90b      	bls.n	8000bd2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000bbe:	e008      	b.n	8000bd2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8000bc4:	e006      	b.n	8000bd4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000bc6:	bf00      	nop
 8000bc8:	e004      	b.n	8000bd4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000bca:	bf00      	nop
 8000bcc:	e002      	b.n	8000bd4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000bce:	bf00      	nop
 8000bd0:	e000      	b.n	8000bd4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000bd2:	bf00      	nop
  }
  if (status == HAL_OK)
 8000bd4:	7dfb      	ldrb	r3, [r7, #23]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d10d      	bne.n	8000bf6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	f023 0118 	bic.w	r1, r3, #24
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	371c      	adds	r7, #28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d101      	bne.n	8000c16 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e0c6      	b.n	8000da4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d102      	bne.n	8000c24 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f008 fd6c 	bl	80096fc <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2223      	movs	r2, #35	; 0x23
 8000c28:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	4b60      	ldr	r3, [pc, #384]	; (8000dac <HAL_ETH_Init+0x1a8>)
 8000c2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c30:	4a5e      	ldr	r2, [pc, #376]	; (8000dac <HAL_ETH_Init+0x1a8>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c3a:	4b5c      	ldr	r3, [pc, #368]	; (8000dac <HAL_ETH_Init+0x1a8>)
 8000c3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7a1b      	ldrb	r3, [r3, #8]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d103      	bne.n	8000c58 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff fdf5 	bl	8000840 <HAL_SYSCFG_ETHInterfaceSelect>
 8000c56:	e003      	b.n	8000c60 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8000c58:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000c5c:	f7ff fdf0 	bl	8000840 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f042 0201 	orr.w	r2, r2, #1
 8000c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c78:	f7ff fd90 	bl	800079c <HAL_GetTick>
 8000c7c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000c7e:	e00f      	b.n	8000ca0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8000c80:	f7ff fd8c 	bl	800079c <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c8e:	d907      	bls.n	8000ca0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2204      	movs	r2, #4
 8000c94:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	22e0      	movs	r2, #224	; 0xe0
 8000c9a:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e081      	b.n	8000da4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1e6      	bne.n	8000c80 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f000 fac0 	bl	8001238 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000cb8:	f001 fe16 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	4b3c      	ldr	r3, [pc, #240]	; (8000db0 <HAL_ETH_Init+0x1ac>)
 8000cc0:	fba3 2302 	umull	r2, r3, r3, r2
 8000cc4:	0c9a      	lsrs	r2, r3, #18
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3a01      	subs	r2, #1
 8000ccc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f000 fa13 	bl	80010fc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000cec:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000cf0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d007      	beq.n	8000d0e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2201      	movs	r2, #1
 8000d02:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	22e0      	movs	r2, #224	; 0xe0
 8000d08:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e04a      	b.n	8000da4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	f241 1308 	movw	r3, #4360	; 0x1108
 8000d16:	4413      	add	r3, r2
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <HAL_ETH_Init+0x1b0>)
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	6952      	ldr	r2, [r2, #20]
 8000d22:	0052      	lsls	r2, r2, #1
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	6809      	ldr	r1, [r1, #0]
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	f241 1308 	movw	r3, #4360	; 0x1108
 8000d2e:	440b      	add	r3, r1
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f000 fad8 	bl	80012e8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f000 fb1c 	bl	8001376 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	3305      	adds	r3, #5
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	021a      	lsls	r2, r3, #8
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	430a      	orrs	r2, r1
 8000d58:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	3303      	adds	r3, #3
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	061a      	lsls	r2, r3, #24
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	041b      	lsls	r3, r3, #16
 8000d70:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	3301      	adds	r3, #1
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000d7c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000d8a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000d8c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2210      	movs	r2, #16
 8000d9a:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2210      	movs	r2, #16
 8000da0:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	58024400 	.word	0x58024400
 8000db0:	431bde83 	.word	0x431bde83
 8000db4:	ffff8001 	.word	0xffff8001

08000db8 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8000dca:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	791b      	ldrb	r3, [r3, #4]
 8000dd0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8000dd2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	7b1b      	ldrb	r3, [r3, #12]
 8000dd8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8000dda:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	7b5b      	ldrb	r3, [r3, #13]
 8000de0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8000de2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	7b9b      	ldrb	r3, [r3, #14]
 8000de8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8000dea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	7bdb      	ldrb	r3, [r3, #15]
 8000df0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8000df2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	7c12      	ldrb	r2, [r2, #16]
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	d102      	bne.n	8000e02 <ETH_SetMACConfig+0x4a>
 8000dfc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e00:	e000      	b.n	8000e04 <ETH_SetMACConfig+0x4c>
 8000e02:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8000e04:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	7c52      	ldrb	r2, [r2, #17]
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	d102      	bne.n	8000e14 <ETH_SetMACConfig+0x5c>
 8000e0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e12:	e000      	b.n	8000e16 <ETH_SetMACConfig+0x5e>
 8000e14:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8000e16:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	7c9b      	ldrb	r3, [r3, #18]
 8000e1c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000e1e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8000e24:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8000e2a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	7f1b      	ldrb	r3, [r3, #28]
 8000e30:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8000e32:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	7f5b      	ldrb	r3, [r3, #29]
 8000e38:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8000e3a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	7f92      	ldrb	r2, [r2, #30]
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d102      	bne.n	8000e4a <ETH_SetMACConfig+0x92>
 8000e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e48:	e000      	b.n	8000e4c <ETH_SetMACConfig+0x94>
 8000e4a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8000e4c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	7fdb      	ldrb	r3, [r3, #31]
 8000e52:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8000e54:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	f892 2020 	ldrb.w	r2, [r2, #32]
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d102      	bne.n	8000e66 <ETH_SetMACConfig+0xae>
 8000e60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e64:	e000      	b.n	8000e68 <ETH_SetMACConfig+0xb0>
 8000e66:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8000e68:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8000e6e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000e76:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8000e78:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b56      	ldr	r3, [pc, #344]	; (8000fe4 <ETH_SetMACConfig+0x22c>)
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	6812      	ldr	r2, [r2, #0]
 8000e90:	68f9      	ldr	r1, [r7, #12]
 8000e92:	430b      	orrs	r3, r1
 8000e94:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e9a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ea2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8000ea4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000eac:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8000eae:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000eb6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8000eb8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8000ec0:	2a00      	cmp	r2, #0
 8000ec2:	d102      	bne.n	8000eca <ETH_SetMACConfig+0x112>
 8000ec4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ec8:	e000      	b.n	8000ecc <ETH_SetMACConfig+0x114>
 8000eca:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8000ecc:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	4b42      	ldr	r3, [pc, #264]	; (8000fe8 <ETH_SetMACConfig+0x230>)
 8000ede:	4013      	ands	r3, r2
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	6812      	ldr	r2, [r2, #0]
 8000ee4:	68f9      	ldr	r1, [r7, #12]
 8000ee6:	430b      	orrs	r3, r1
 8000ee8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ef0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	4b3a      	ldr	r3, [pc, #232]	; (8000fec <ETH_SetMACConfig+0x234>)
 8000f02:	4013      	ands	r3, r2
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	6812      	ldr	r2, [r2, #0]
 8000f08:	68f9      	ldr	r1, [r7, #12]
 8000f0a:	430b      	orrs	r3, r1
 8000f0c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000f14:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8000f1a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8000f1c:	683a      	ldr	r2, [r7, #0]
 8000f1e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d101      	bne.n	8000f2a <ETH_SetMACConfig+0x172>
 8000f26:	2280      	movs	r2, #128	; 0x80
 8000f28:	e000      	b.n	8000f2c <ETH_SetMACConfig+0x174>
 8000f2a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8000f2c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f32:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8000f34:	4313      	orrs	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f3e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8000f42:	4013      	ands	r3, r2
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	6812      	ldr	r2, [r2, #0]
 8000f48:	68f9      	ldr	r1, [r7, #12]
 8000f4a:	430b      	orrs	r3, r1
 8000f4c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8000f54:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000f5c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f6a:	f023 0103 	bic.w	r1, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	430a      	orrs	r2, r1
 8000f76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8000f82:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8000f9e:	2a00      	cmp	r2, #0
 8000fa0:	d101      	bne.n	8000fa6 <ETH_SetMACConfig+0x1ee>
 8000fa2:	2240      	movs	r2, #64	; 0x40
 8000fa4:	e000      	b.n	8000fa8 <ETH_SetMACConfig+0x1f0>
 8000fa6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8000fa8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8000fb0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8000fb2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8000fba:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8000fc8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	00048083 	.word	0x00048083
 8000fe8:	c0f88000 	.word	0xc0f88000
 8000fec:	fffffef0 	.word	0xfffffef0

08000ff0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <ETH_SetDMAConfig+0xf8>)
 8001006:	4013      	ands	r3, r2
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	6809      	ldr	r1, [r1, #0]
 8001010:	431a      	orrs	r2, r3
 8001012:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001016:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	791b      	ldrb	r3, [r3, #4]
 800101c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001022:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	7b1b      	ldrb	r3, [r3, #12]
 8001028:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800102a:	4313      	orrs	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	f241 0304 	movw	r3, #4100	; 0x1004
 8001036:	4413      	add	r3, r2
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <ETH_SetDMAConfig+0xfc>)
 800103c:	4013      	ands	r3, r2
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	6811      	ldr	r1, [r2, #0]
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	431a      	orrs	r2, r3
 8001046:	f241 0304 	movw	r3, #4100	; 0x1004
 800104a:	440b      	add	r3, r1
 800104c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	7b5b      	ldrb	r3, [r3, #13]
 8001052:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001058:	4313      	orrs	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <ETH_SetDMAConfig+0x100>)
 8001068:	4013      	ands	r3, r2
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	6811      	ldr	r1, [r2, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	431a      	orrs	r2, r3
 8001072:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001076:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	7d1b      	ldrb	r3, [r3, #20]
 8001080:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001082:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	7f5b      	ldrb	r3, [r3, #29]
 8001088:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800108a:	4313      	orrs	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	f241 1304 	movw	r3, #4356	; 0x1104
 8001096:	4413      	add	r3, r2
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <ETH_SetDMAConfig+0x104>)
 800109c:	4013      	ands	r3, r2
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	6811      	ldr	r1, [r2, #0]
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	431a      	orrs	r2, r3
 80010a6:	f241 1304 	movw	r3, #4356	; 0x1104
 80010aa:	440b      	add	r3, r1
 80010ac:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	7f1b      	ldrb	r3, [r3, #28]
 80010b2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80010b8:	4313      	orrs	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	f241 1308 	movw	r3, #4360	; 0x1108
 80010c4:	4413      	add	r3, r2
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <ETH_SetDMAConfig+0x108>)
 80010ca:	4013      	ands	r3, r2
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	6811      	ldr	r1, [r2, #0]
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	431a      	orrs	r2, r3
 80010d4:	f241 1308 	movw	r3, #4360	; 0x1108
 80010d8:	440b      	add	r3, r1
 80010da:	601a      	str	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	ffff87fd 	.word	0xffff87fd
 80010ec:	ffff2ffe 	.word	0xffff2ffe
 80010f0:	fffec000 	.word	0xfffec000
 80010f4:	ffc0efef 	.word	0xffc0efef
 80010f8:	7fc0ffff 	.word	0x7fc0ffff

080010fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0a4      	sub	sp, #144	; 0x90
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001104:	2301      	movs	r3, #1
 8001106:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800110a:	2300      	movs	r3, #0
 800110c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800111a:	2301      	movs	r3, #1
 800111c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001120:	2301      	movs	r3, #1
 8001122:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001126:	2301      	movs	r3, #1
 8001128:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001132:	2301      	movs	r3, #1
 8001134:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001138:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800113c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001144:	2300      	movs	r3, #0
 8001146:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001154:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001158:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001160:	2300      	movs	r3, #0
 8001162:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001164:	2301      	movs	r3, #1
 8001166:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001176:	2300      	movs	r3, #0
 8001178:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800117a:	2300      	movs	r3, #0
 800117c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800117e:	2300      	movs	r3, #0
 8001180:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800118e:	2301      	movs	r3, #1
 8001190:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001194:	2320      	movs	r3, #32
 8001196:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800119a:	2301      	movs	r3, #1
 800119c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80011a6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80011ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011b0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80011b8:	2302      	movs	r3, #2
 80011ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80011d0:	2301      	movs	r3, #1
 80011d2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80011d6:	2300      	movs	r3, #0
 80011d8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80011da:	2301      	movs	r3, #1
 80011dc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80011e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e4:	4619      	mov	r1, r3
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fde6 	bl	8000db8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80011ec:	2301      	movs	r3, #1
 80011ee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80011f0:	2301      	movs	r3, #1
 80011f2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001206:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800120a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001210:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001214:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800121c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	4619      	mov	r1, r3
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff fee1 	bl	8000ff0 <ETH_SetDMAConfig>
}
 800122e:	bf00      	nop
 8001230:	3790      	adds	r7, #144	; 0x90
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001248:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001250:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001252:	f001 fb49 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8001256:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4a1e      	ldr	r2, [pc, #120]	; (80012d4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d908      	bls.n	8001272 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4a1d      	ldr	r2, [pc, #116]	; (80012d8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d804      	bhi.n	8001272 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	e027      	b.n	80012c2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d908      	bls.n	800128c <ETH_MAC_MDIO_ClkConfig+0x54>
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	4a17      	ldr	r2, [pc, #92]	; (80012dc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d804      	bhi.n	800128c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	e01a      	b.n	80012c2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4a13      	ldr	r2, [pc, #76]	; (80012dc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d903      	bls.n	800129c <ETH_MAC_MDIO_ClkConfig+0x64>
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d911      	bls.n	80012c0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d908      	bls.n	80012b6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d804      	bhi.n	80012b6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	e005      	b.n	80012c2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	e000      	b.n	80012c2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80012c0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	01312cff 	.word	0x01312cff
 80012d8:	02160ebf 	.word	0x02160ebf
 80012dc:	039386ff 	.word	0x039386ff
 80012e0:	05f5e0ff 	.word	0x05f5e0ff
 80012e4:	08f0d17f 	.word	0x08f0d17f

080012e8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	e01d      	b.n	8001332 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68d9      	ldr	r1, [r3, #12]
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4613      	mov	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	440b      	add	r3, r1
 8001306:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	2200      	movs	r2, #0
 8001312:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	3206      	adds	r2, #6
 8001328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3301      	adds	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b03      	cmp	r3, #3
 8001336:	d9de      	bls.n	80012f6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	f241 132c 	movw	r3, #4396	; 0x112c
 8001346:	4413      	add	r3, r2
 8001348:	2203      	movs	r2, #3
 800134a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68d9      	ldr	r1, [r3, #12]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	f241 1314 	movw	r3, #4372	; 0x1114
 8001358:	4413      	add	r3, r2
 800135a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001368:	601a      	str	r2, [r3, #0]
}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001376:	b480      	push	{r7}
 8001378:	b085      	sub	sp, #20
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	e024      	b.n	80013ce <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6919      	ldr	r1, [r3, #16]
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	4613      	mov	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	440b      	add	r3, r1
 8001394:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	2200      	movs	r2, #0
 80013a0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	330a      	adds	r3, #10
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3301      	adds	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d9d7      	bls.n	8001384 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	f241 1330 	movw	r3, #4400	; 0x1130
 80013fa:	4413      	add	r3, r2
 80013fc:	2203      	movs	r2, #3
 80013fe:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6919      	ldr	r1, [r3, #16]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	f241 131c 	movw	r3, #4380	; 0x111c
 800140c:	4413      	add	r3, r2
 800140e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	f241 1328 	movw	r3, #4392	; 0x1128
 8001420:	4413      	add	r3, r2
 8001422:	6019      	str	r1, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800143e:	4b89      	ldr	r3, [pc, #548]	; (8001664 <HAL_GPIO_Init+0x234>)
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001442:	e194      	b.n	800176e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8186 	beq.w	8001768 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x4c>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xee>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	69b9      	ldr	r1, [r7, #24]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80e0 	beq.w	8001768 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_GPIO_Init+0x238>)
 80015aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015ae:	4a2e      	ldr	r2, [pc, #184]	; (8001668 <HAL_GPIO_Init+0x238>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015b8:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <HAL_GPIO_Init+0x238>)
 80015ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c6:	4a29      	ldr	r2, [pc, #164]	; (800166c <HAL_GPIO_Init+0x23c>)
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	089b      	lsrs	r3, r3, #2
 80015cc:	3302      	adds	r3, #2
 80015ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	220f      	movs	r2, #15
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a20      	ldr	r2, [pc, #128]	; (8001670 <HAL_GPIO_Init+0x240>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d052      	beq.n	8001698 <HAL_GPIO_Init+0x268>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a1f      	ldr	r2, [pc, #124]	; (8001674 <HAL_GPIO_Init+0x244>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d031      	beq.n	800165e <HAL_GPIO_Init+0x22e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <HAL_GPIO_Init+0x248>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d02b      	beq.n	800165a <HAL_GPIO_Init+0x22a>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a1d      	ldr	r2, [pc, #116]	; (800167c <HAL_GPIO_Init+0x24c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d025      	beq.n	8001656 <HAL_GPIO_Init+0x226>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <HAL_GPIO_Init+0x250>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d01f      	beq.n	8001652 <HAL_GPIO_Init+0x222>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <HAL_GPIO_Init+0x254>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d019      	beq.n	800164e <HAL_GPIO_Init+0x21e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a1a      	ldr	r2, [pc, #104]	; (8001688 <HAL_GPIO_Init+0x258>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d013      	beq.n	800164a <HAL_GPIO_Init+0x21a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a19      	ldr	r2, [pc, #100]	; (800168c <HAL_GPIO_Init+0x25c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d00d      	beq.n	8001646 <HAL_GPIO_Init+0x216>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a18      	ldr	r2, [pc, #96]	; (8001690 <HAL_GPIO_Init+0x260>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d007      	beq.n	8001642 <HAL_GPIO_Init+0x212>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a17      	ldr	r2, [pc, #92]	; (8001694 <HAL_GPIO_Init+0x264>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d101      	bne.n	800163e <HAL_GPIO_Init+0x20e>
 800163a:	2309      	movs	r3, #9
 800163c:	e02d      	b.n	800169a <HAL_GPIO_Init+0x26a>
 800163e:	230a      	movs	r3, #10
 8001640:	e02b      	b.n	800169a <HAL_GPIO_Init+0x26a>
 8001642:	2308      	movs	r3, #8
 8001644:	e029      	b.n	800169a <HAL_GPIO_Init+0x26a>
 8001646:	2307      	movs	r3, #7
 8001648:	e027      	b.n	800169a <HAL_GPIO_Init+0x26a>
 800164a:	2306      	movs	r3, #6
 800164c:	e025      	b.n	800169a <HAL_GPIO_Init+0x26a>
 800164e:	2305      	movs	r3, #5
 8001650:	e023      	b.n	800169a <HAL_GPIO_Init+0x26a>
 8001652:	2304      	movs	r3, #4
 8001654:	e021      	b.n	800169a <HAL_GPIO_Init+0x26a>
 8001656:	2303      	movs	r3, #3
 8001658:	e01f      	b.n	800169a <HAL_GPIO_Init+0x26a>
 800165a:	2302      	movs	r3, #2
 800165c:	e01d      	b.n	800169a <HAL_GPIO_Init+0x26a>
 800165e:	2301      	movs	r3, #1
 8001660:	e01b      	b.n	800169a <HAL_GPIO_Init+0x26a>
 8001662:	bf00      	nop
 8001664:	58000080 	.word	0x58000080
 8001668:	58024400 	.word	0x58024400
 800166c:	58000400 	.word	0x58000400
 8001670:	58020000 	.word	0x58020000
 8001674:	58020400 	.word	0x58020400
 8001678:	58020800 	.word	0x58020800
 800167c:	58020c00 	.word	0x58020c00
 8001680:	58021000 	.word	0x58021000
 8001684:	58021400 	.word	0x58021400
 8001688:	58021800 	.word	0x58021800
 800168c:	58021c00 	.word	0x58021c00
 8001690:	58022000 	.word	0x58022000
 8001694:	58022400 	.word	0x58022400
 8001698:	2300      	movs	r3, #0
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	f002 0203 	and.w	r2, r2, #3
 80016a0:	0092      	lsls	r2, r2, #2
 80016a2:	4093      	lsls	r3, r2
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016aa:	4938      	ldr	r1, [pc, #224]	; (800178c <HAL_GPIO_Init+0x35c>)
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3302      	adds	r3, #2
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800170c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800173a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	3301      	adds	r3, #1
 800176c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	fa22 f303 	lsr.w	r3, r2, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	f47f ae63 	bne.w	8001444 <HAL_GPIO_Init+0x14>
  }
}
 800177e:	bf00      	nop
 8001780:	3724      	adds	r7, #36	; 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	58000400 	.word	0x58000400

08001790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]
 800179c:	4613      	mov	r3, r2
 800179e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a0:	787b      	ldrb	r3, [r7, #1]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80017ac:	e003      	b.n	80017b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017ae:	887b      	ldrh	r3, [r7, #2]
 80017b0:	041a      	lsls	r2, r3, #16
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	619a      	str	r2, [r3, #24]
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c4:	b08f      	sub	sp, #60	; 0x3c
 80017c6:	af0a      	add	r7, sp, #40	; 0x28
 80017c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e116      	b.n	8001a02 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d106      	bne.n	80017f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f008 f89c 	bl	800992c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2203      	movs	r2, #3
 80017f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f005 f904 	bl	8006a20 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	687e      	ldr	r6, [r7, #4]
 8001820:	466d      	mov	r5, sp
 8001822:	f106 0410 	add.w	r4, r6, #16
 8001826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800182a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800182c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800182e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001832:	e885 0003 	stmia.w	r5, {r0, r1}
 8001836:	1d33      	adds	r3, r6, #4
 8001838:	cb0e      	ldmia	r3, {r1, r2, r3}
 800183a:	6838      	ldr	r0, [r7, #0]
 800183c:	f005 f88e 	bl	800695c <USB_CoreInit>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d005      	beq.n	8001852 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2202      	movs	r2, #2
 800184a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0d7      	b.n	8001a02 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f005 f8f2 	bl	8006a42 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800185e:	2300      	movs	r3, #0
 8001860:	73fb      	strb	r3, [r7, #15]
 8001862:	e04a      	b.n	80018fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	1a9b      	subs	r3, r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	333d      	adds	r3, #61	; 0x3d
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001878:	7bfa      	ldrb	r2, [r7, #15]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	1a9b      	subs	r3, r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	333c      	adds	r3, #60	; 0x3c
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800188c:	7bfa      	ldrb	r2, [r7, #15]
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	b298      	uxth	r0, r3
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	3342      	adds	r3, #66	; 0x42
 80018a0:	4602      	mov	r2, r0
 80018a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	333f      	adds	r3, #63	; 0x3f
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	1a9b      	subs	r3, r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	3344      	adds	r3, #68	; 0x44
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	3348      	adds	r3, #72	; 0x48
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	1a9b      	subs	r3, r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	3350      	adds	r3, #80	; 0x50
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	3301      	adds	r3, #1
 80018f8:	73fb      	strb	r3, [r7, #15]
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	d3af      	bcc.n	8001864 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]
 8001908:	e044      	b.n	8001994 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001920:	7bfa      	ldrb	r2, [r7, #15]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800194c:	7bfa      	ldrb	r2, [r7, #15]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	1a9b      	subs	r3, r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	1a9b      	subs	r3, r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	3301      	adds	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	7bfa      	ldrb	r2, [r7, #15]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	d3b5      	bcc.n	800190a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	687e      	ldr	r6, [r7, #4]
 80019a6:	466d      	mov	r5, sp
 80019a8:	f106 0410 	add.w	r4, r6, #16
 80019ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80019bc:	1d33      	adds	r3, r6, #4
 80019be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019c0:	6838      	ldr	r0, [r7, #0]
 80019c2:	f005 f869 	bl	8006a98 <USB_DevInit>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2202      	movs	r2, #2
 80019d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e014      	b.n	8001a02 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d102      	bne.n	80019f6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f80b 	bl	8001a0c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f005 fa0b 	bl	8006e16 <USB_DevDisconnect>

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001a0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_PCDEx_ActivateLPM+0x44>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	10000003 	.word	0x10000003

08001a54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_PWREx_ConfigSupply+0x70>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d00a      	beq.n	8001a7e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <HAL_PWREx_ConfigSupply+0x70>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d001      	beq.n	8001a7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e01f      	b.n	8001aba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e01d      	b.n	8001aba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_PWREx_ConfigSupply+0x70>)
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f023 0207 	bic.w	r2, r3, #7
 8001a86:	490f      	ldr	r1, [pc, #60]	; (8001ac4 <HAL_PWREx_ConfigSupply+0x70>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a8e:	f7fe fe85 	bl	800079c <HAL_GetTick>
 8001a92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a94:	e009      	b.n	8001aaa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a96:	f7fe fe81 	bl	800079c <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aa4:	d901      	bls.n	8001aaa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e007      	b.n	8001aba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_PWREx_ConfigSupply+0x70>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ab6:	d1ee      	bne.n	8001a96 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	58024800 	.word	0x58024800

08001ac8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ad6:	60d3      	str	r3, [r2, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	58024800 	.word	0x58024800

08001ae8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08c      	sub	sp, #48	; 0x30
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e3c4      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 8087 	beq.w	8001c16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b08:	4ba2      	ldr	r3, [pc, #648]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b12:	4ba0      	ldr	r3, [pc, #640]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1a:	2b10      	cmp	r3, #16
 8001b1c:	d007      	beq.n	8001b2e <HAL_RCC_OscConfig+0x46>
 8001b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b20:	2b18      	cmp	r3, #24
 8001b22:	d110      	bne.n	8001b46 <HAL_RCC_OscConfig+0x5e>
 8001b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d10b      	bne.n	8001b46 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2e:	4b99      	ldr	r3, [pc, #612]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d06c      	beq.n	8001c14 <HAL_RCC_OscConfig+0x12c>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d168      	bne.n	8001c14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e39e      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4e:	d106      	bne.n	8001b5e <HAL_RCC_OscConfig+0x76>
 8001b50:	4b90      	ldr	r3, [pc, #576]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a8f      	ldr	r2, [pc, #572]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	e02e      	b.n	8001bbc <HAL_RCC_OscConfig+0xd4>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x98>
 8001b66:	4b8b      	ldr	r3, [pc, #556]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a8a      	ldr	r2, [pc, #552]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b88      	ldr	r3, [pc, #544]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a87      	ldr	r2, [pc, #540]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e01d      	b.n	8001bbc <HAL_RCC_OscConfig+0xd4>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0xbc>
 8001b8a:	4b82      	ldr	r3, [pc, #520]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a81      	ldr	r2, [pc, #516]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	4b7f      	ldr	r3, [pc, #508]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a7e      	ldr	r2, [pc, #504]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e00b      	b.n	8001bbc <HAL_RCC_OscConfig+0xd4>
 8001ba4:	4b7b      	ldr	r3, [pc, #492]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a7a      	ldr	r2, [pc, #488]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b78      	ldr	r3, [pc, #480]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a77      	ldr	r2, [pc, #476]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d013      	beq.n	8001bec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7fe fdea 	bl	800079c <HAL_GetTick>
 8001bc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7fe fde6 	bl	800079c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e352      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bde:	4b6d      	ldr	r3, [pc, #436]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0xe4>
 8001bea:	e014      	b.n	8001c16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7fe fdd6 	bl	800079c <HAL_GetTick>
 8001bf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf4:	f7fe fdd2 	bl	800079c <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	; 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e33e      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c06:	4b63      	ldr	r3, [pc, #396]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x10c>
 8001c12:	e000      	b.n	8001c16 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8092 	beq.w	8001d48 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c24:	4b5b      	ldr	r3, [pc, #364]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c2c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c2e:	4b59      	ldr	r3, [pc, #356]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c32:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d007      	beq.n	8001c4a <HAL_RCC_OscConfig+0x162>
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	2b18      	cmp	r3, #24
 8001c3e:	d12d      	bne.n	8001c9c <HAL_RCC_OscConfig+0x1b4>
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d128      	bne.n	8001c9c <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c4a:	4b52      	ldr	r3, [pc, #328]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_RCC_OscConfig+0x17a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e310      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c62:	f7fe fdd3 	bl	800080c <HAL_GetREVID>
 8001c66:	4602      	mov	r2, r0
 8001c68:	f241 0303 	movw	r3, #4099	; 0x1003
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d80a      	bhi.n	8001c86 <HAL_RCC_OscConfig+0x19e>
 8001c70:	4b48      	ldr	r3, [pc, #288]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	031b      	lsls	r3, r3, #12
 8001c7e:	4945      	ldr	r1, [pc, #276]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c84:	e060      	b.n	8001d48 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c86:	4b43      	ldr	r3, [pc, #268]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	061b      	lsls	r3, r3, #24
 8001c94:	493f      	ldr	r1, [pc, #252]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c9a:	e055      	b.n	8001d48 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d038      	beq.n	8001d16 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ca4:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f023 0219 	bic.w	r2, r3, #25
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4938      	ldr	r1, [pc, #224]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb6:	f7fe fd71 	bl	800079c <HAL_GetTick>
 8001cba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cbe:	f7fe fd6d 	bl	800079c <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e2d9      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cd0:	4b30      	ldr	r3, [pc, #192]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cdc:	f7fe fd96 	bl	800080c <HAL_GetREVID>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	f241 0303 	movw	r3, #4099	; 0x1003
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d80a      	bhi.n	8001d00 <HAL_RCC_OscConfig+0x218>
 8001cea:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	031b      	lsls	r3, r3, #12
 8001cf8:	4926      	ldr	r1, [pc, #152]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	604b      	str	r3, [r1, #4]
 8001cfe:	e023      	b.n	8001d48 <HAL_RCC_OscConfig+0x260>
 8001d00:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	061b      	lsls	r3, r3, #24
 8001d0e:	4921      	ldr	r1, [pc, #132]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
 8001d14:	e018      	b.n	8001d48 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d16:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a1e      	ldr	r2, [pc, #120]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	f023 0301 	bic.w	r3, r3, #1
 8001d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d22:	f7fe fd3b 	bl	800079c <HAL_GetTick>
 8001d26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d2a:	f7fe fd37 	bl	800079c <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e2a3      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d3c:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f0      	bne.n	8001d2a <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 8091 	beq.w	8001e78 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d56:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d5e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d007      	beq.n	8001d7c <HAL_RCC_OscConfig+0x294>
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2b18      	cmp	r3, #24
 8001d70:	d12f      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x2ea>
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d12a      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_RCC_OscConfig+0x2ac>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d007      	beq.n	8001d98 <HAL_RCC_OscConfig+0x2b0>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	2b80      	cmp	r3, #128	; 0x80
 8001d8e:	d003      	beq.n	8001d98 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e277      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
 8001d94:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d98:	f7fe fd38 	bl	800080c <HAL_GetREVID>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d80a      	bhi.n	8001dbc <HAL_RCC_OscConfig+0x2d4>
 8001da6:	4ba2      	ldr	r3, [pc, #648]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	069b      	lsls	r3, r3, #26
 8001db4:	499e      	ldr	r1, [pc, #632]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dba:	e05d      	b.n	8001e78 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dbc:	4b9c      	ldr	r3, [pc, #624]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	061b      	lsls	r3, r3, #24
 8001dca:	4999      	ldr	r1, [pc, #612]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dd0:	e052      	b.n	8001e78 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d035      	beq.n	8001e46 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001dda:	4b95      	ldr	r3, [pc, #596]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a94      	ldr	r2, [pc, #592]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de6:	f7fe fcd9 	bl	800079c <HAL_GetTick>
 8001dea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001dee:	f7fe fcd5 	bl	800079c <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e241      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e00:	4b8b      	ldr	r3, [pc, #556]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e0c:	f7fe fcfe 	bl	800080c <HAL_GetREVID>
 8001e10:	4602      	mov	r2, r0
 8001e12:	f241 0303 	movw	r3, #4099	; 0x1003
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d80a      	bhi.n	8001e30 <HAL_RCC_OscConfig+0x348>
 8001e1a:	4b85      	ldr	r3, [pc, #532]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	069b      	lsls	r3, r3, #26
 8001e28:	4981      	ldr	r1, [pc, #516]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]
 8001e2e:	e023      	b.n	8001e78 <HAL_RCC_OscConfig+0x390>
 8001e30:	4b7f      	ldr	r3, [pc, #508]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	497c      	ldr	r1, [pc, #496]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	60cb      	str	r3, [r1, #12]
 8001e44:	e018      	b.n	8001e78 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e46:	4b7a      	ldr	r3, [pc, #488]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a79      	ldr	r2, [pc, #484]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001e4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e52:	f7fe fca3 	bl	800079c <HAL_GetTick>
 8001e56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001e5a:	f7fe fc9f 	bl	800079c <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e20b      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e6c:	4b70      	ldr	r3, [pc, #448]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f0      	bne.n	8001e5a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d036      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d019      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8c:	4b68      	ldr	r3, [pc, #416]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e90:	4a67      	ldr	r2, [pc, #412]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e98:	f7fe fc80 	bl	800079c <HAL_GetTick>
 8001e9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7fe fc7c 	bl	800079c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e1e8      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001eb2:	4b5f      	ldr	r3, [pc, #380]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x3b8>
 8001ebe:	e018      	b.n	8001ef2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec0:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec4:	4a5a      	ldr	r2, [pc, #360]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001ec6:	f023 0301 	bic.w	r3, r3, #1
 8001eca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ecc:	f7fe fc66 	bl	800079c <HAL_GetTick>
 8001ed0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed4:	f7fe fc62 	bl	800079c <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e1ce      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ee6:	4b52      	ldr	r3, [pc, #328]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d036      	beq.n	8001f6c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d019      	beq.n	8001f3a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f06:	4b4a      	ldr	r3, [pc, #296]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a49      	ldr	r2, [pc, #292]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001f0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f12:	f7fe fc43 	bl	800079c <HAL_GetTick>
 8001f16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f1a:	f7fe fc3f 	bl	800079c <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e1ab      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f2c:	4b40      	ldr	r3, [pc, #256]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x432>
 8001f38:	e018      	b.n	8001f6c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f3a:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a3c      	ldr	r2, [pc, #240]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001f40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f46:	f7fe fc29 	bl	800079c <HAL_GetTick>
 8001f4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f4e:	f7fe fc25 	bl	800079c <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e191      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f60:	4b33      	ldr	r3, [pc, #204]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f0      	bne.n	8001f4e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 8086 	beq.w	8002086 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f7a:	4b2e      	ldr	r3, [pc, #184]	; (8002034 <HAL_RCC_OscConfig+0x54c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a2d      	ldr	r2, [pc, #180]	; (8002034 <HAL_RCC_OscConfig+0x54c>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f86:	f7fe fc09 	bl	800079c <HAL_GetTick>
 8001f8a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7fe fc05 	bl	800079c <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b64      	cmp	r3, #100	; 0x64
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e171      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fa0:	4b24      	ldr	r3, [pc, #144]	; (8002034 <HAL_RCC_OscConfig+0x54c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x4da>
 8001fb4:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb8:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc0:	e02d      	b.n	800201e <HAL_RCC_OscConfig+0x536>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4fc>
 8001fca:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fce:	4a18      	ldr	r2, [pc, #96]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd6:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fda:	4a15      	ldr	r2, [pc, #84]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001fdc:	f023 0304 	bic.w	r3, r3, #4
 8001fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe2:	e01c      	b.n	800201e <HAL_RCC_OscConfig+0x536>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b05      	cmp	r3, #5
 8001fea:	d10c      	bne.n	8002006 <HAL_RCC_OscConfig+0x51e>
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff0:	4a0f      	ldr	r2, [pc, #60]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffc:	4a0c      	ldr	r2, [pc, #48]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6713      	str	r3, [r2, #112]	; 0x70
 8002004:	e00b      	b.n	800201e <HAL_RCC_OscConfig+0x536>
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200a:	4a09      	ldr	r2, [pc, #36]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	6713      	str	r3, [r2, #112]	; 0x70
 8002012:	4b07      	ldr	r3, [pc, #28]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002016:	4a06      	ldr	r2, [pc, #24]	; (8002030 <HAL_RCC_OscConfig+0x548>)
 8002018:	f023 0304 	bic.w	r3, r3, #4
 800201c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d01a      	beq.n	800205c <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002026:	f7fe fbb9 	bl	800079c <HAL_GetTick>
 800202a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800202c:	e00f      	b.n	800204e <HAL_RCC_OscConfig+0x566>
 800202e:	bf00      	nop
 8002030:	58024400 	.word	0x58024400
 8002034:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002038:	f7fe fbb0 	bl	800079c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	; 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e11a      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800204e:	4b8f      	ldr	r3, [pc, #572]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0ee      	beq.n	8002038 <HAL_RCC_OscConfig+0x550>
 800205a:	e014      	b.n	8002086 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7fe fb9e 	bl	800079c <HAL_GetTick>
 8002060:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002062:	e00a      	b.n	800207a <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002064:	f7fe fb9a 	bl	800079c <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e104      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800207a:	4b84      	ldr	r3, [pc, #528]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 800207c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1ee      	bne.n	8002064 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80f9 	beq.w	8002282 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002090:	4b7e      	ldr	r3, [pc, #504]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002098:	2b18      	cmp	r3, #24
 800209a:	f000 80b4 	beq.w	8002206 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	f040 8095 	bne.w	80021d2 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a8:	4b78      	ldr	r3, [pc, #480]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a77      	ldr	r2, [pc, #476]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 80020ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7fe fb72 	bl	800079c <HAL_GetTick>
 80020b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020bc:	f7fe fb6e 	bl	800079c <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e0da      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020ce:	4b6f      	ldr	r3, [pc, #444]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020da:	4b6c      	ldr	r3, [pc, #432]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 80020dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020de:	4b6c      	ldr	r3, [pc, #432]	; (8002290 <HAL_RCC_OscConfig+0x7a8>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020ea:	0112      	lsls	r2, r2, #4
 80020ec:	430a      	orrs	r2, r1
 80020ee:	4967      	ldr	r1, [pc, #412]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	628b      	str	r3, [r1, #40]	; 0x28
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	3b01      	subs	r3, #1
 80020fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002102:	3b01      	subs	r3, #1
 8002104:	025b      	lsls	r3, r3, #9
 8002106:	b29b      	uxth	r3, r3
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210e:	3b01      	subs	r3, #1
 8002110:	041b      	lsls	r3, r3, #16
 8002112:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211c:	3b01      	subs	r3, #1
 800211e:	061b      	lsls	r3, r3, #24
 8002120:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002124:	4959      	ldr	r1, [pc, #356]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 8002126:	4313      	orrs	r3, r2
 8002128:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800212a:	4b58      	ldr	r3, [pc, #352]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	4a57      	ldr	r2, [pc, #348]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002136:	4b55      	ldr	r3, [pc, #340]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 8002138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800213a:	4b56      	ldr	r3, [pc, #344]	; (8002294 <HAL_RCC_OscConfig+0x7ac>)
 800213c:	4013      	ands	r3, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002142:	00d2      	lsls	r2, r2, #3
 8002144:	4951      	ldr	r1, [pc, #324]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 8002146:	4313      	orrs	r3, r2
 8002148:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800214a:	4b50      	ldr	r3, [pc, #320]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 800214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214e:	f023 020c 	bic.w	r2, r3, #12
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	494d      	ldr	r1, [pc, #308]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 8002158:	4313      	orrs	r3, r2
 800215a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800215c:	4b4b      	ldr	r3, [pc, #300]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	f023 0202 	bic.w	r2, r3, #2
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002168:	4948      	ldr	r1, [pc, #288]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 800216a:	4313      	orrs	r3, r2
 800216c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800216e:	4b47      	ldr	r3, [pc, #284]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	4a46      	ldr	r2, [pc, #280]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800217a:	4b44      	ldr	r3, [pc, #272]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	4a43      	ldr	r2, [pc, #268]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 8002180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002184:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002186:	4b41      	ldr	r3, [pc, #260]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 8002188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218a:	4a40      	ldr	r2, [pc, #256]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 800218c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002190:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002192:	4b3e      	ldr	r3, [pc, #248]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 8002194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002196:	4a3d      	ldr	r2, [pc, #244]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800219e:	4b3b      	ldr	r3, [pc, #236]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a3a      	ldr	r2, [pc, #232]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 80021a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021aa:	f7fe faf7 	bl	800079c <HAL_GetTick>
 80021ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b2:	f7fe faf3 	bl	800079c <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e05f      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021c4:	4b31      	ldr	r3, [pc, #196]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x6ca>
 80021d0:	e057      	b.n	8002282 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b2e      	ldr	r3, [pc, #184]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a2d      	ldr	r2, [pc, #180]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 80021d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021de:	f7fe fadd 	bl	800079c <HAL_GetTick>
 80021e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e6:	f7fe fad9 	bl	800079c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e045      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021f8:	4b24      	ldr	r3, [pc, #144]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f0      	bne.n	80021e6 <HAL_RCC_OscConfig+0x6fe>
 8002204:	e03d      	b.n	8002282 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002206:	4b21      	ldr	r3, [pc, #132]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800220c:	4b1f      	ldr	r3, [pc, #124]	; (800228c <HAL_RCC_OscConfig+0x7a4>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	2b01      	cmp	r3, #1
 8002218:	d031      	beq.n	800227e <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f003 0203 	and.w	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002224:	429a      	cmp	r2, r3
 8002226:	d12a      	bne.n	800227e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	091b      	lsrs	r3, r3, #4
 800222c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002234:	429a      	cmp	r2, r3
 8002236:	d122      	bne.n	800227e <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002244:	429a      	cmp	r2, r3
 8002246:	d11a      	bne.n	800227e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	0a5b      	lsrs	r3, r3, #9
 800224c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002254:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002256:	429a      	cmp	r2, r3
 8002258:	d111      	bne.n	800227e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	0c1b      	lsrs	r3, r3, #16
 800225e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002266:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002268:	429a      	cmp	r2, r3
 800226a:	d108      	bne.n	800227e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	0e1b      	lsrs	r3, r3, #24
 8002270:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002278:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d001      	beq.n	8002282 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3730      	adds	r7, #48	; 0x30
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	58024400 	.word	0x58024400
 8002290:	fffffc0c 	.word	0xfffffc0c
 8002294:	ffff0007 	.word	0xffff0007

08002298 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e19c      	b.n	80025e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022ac:	4b8a      	ldr	r3, [pc, #552]	; (80024d8 <HAL_RCC_ClockConfig+0x240>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d910      	bls.n	80022dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b87      	ldr	r3, [pc, #540]	; (80024d8 <HAL_RCC_ClockConfig+0x240>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 020f 	bic.w	r2, r3, #15
 80022c2:	4985      	ldr	r1, [pc, #532]	; (80024d8 <HAL_RCC_ClockConfig+0x240>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b83      	ldr	r3, [pc, #524]	; (80024d8 <HAL_RCC_ClockConfig+0x240>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e184      	b.n	80025e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d010      	beq.n	800230a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	4b7b      	ldr	r3, [pc, #492]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d908      	bls.n	800230a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022f8:	4b78      	ldr	r3, [pc, #480]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	4975      	ldr	r1, [pc, #468]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 8002306:	4313      	orrs	r3, r2
 8002308:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d010      	beq.n	8002338 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	4b70      	ldr	r3, [pc, #448]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002322:	429a      	cmp	r2, r3
 8002324:	d908      	bls.n	8002338 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002326:	4b6d      	ldr	r3, [pc, #436]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	496a      	ldr	r1, [pc, #424]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 8002334:	4313      	orrs	r3, r2
 8002336:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b00      	cmp	r3, #0
 8002342:	d010      	beq.n	8002366 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699a      	ldr	r2, [r3, #24]
 8002348:	4b64      	ldr	r3, [pc, #400]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002350:	429a      	cmp	r2, r3
 8002352:	d908      	bls.n	8002366 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002354:	4b61      	ldr	r3, [pc, #388]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	495e      	ldr	r1, [pc, #376]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 8002362:	4313      	orrs	r3, r2
 8002364:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	2b00      	cmp	r3, #0
 8002370:	d010      	beq.n	8002394 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69da      	ldr	r2, [r3, #28]
 8002376:	4b59      	ldr	r3, [pc, #356]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800237e:	429a      	cmp	r2, r3
 8002380:	d908      	bls.n	8002394 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002382:	4b56      	ldr	r3, [pc, #344]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	4953      	ldr	r1, [pc, #332]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 8002390:	4313      	orrs	r3, r2
 8002392:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d010      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	4b4d      	ldr	r3, [pc, #308]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d908      	bls.n	80023c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b0:	4b4a      	ldr	r3, [pc, #296]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f023 020f 	bic.w	r2, r3, #15
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4947      	ldr	r1, [pc, #284]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d055      	beq.n	800247a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023ce:	4b43      	ldr	r3, [pc, #268]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	4940      	ldr	r1, [pc, #256]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d107      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023e8:	4b3c      	ldr	r3, [pc, #240]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d121      	bne.n	8002438 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0f6      	b.n	80025e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d107      	bne.n	8002410 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002400:	4b36      	ldr	r3, [pc, #216]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d115      	bne.n	8002438 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0ea      	b.n	80025e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d107      	bne.n	8002428 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002418:	4b30      	ldr	r3, [pc, #192]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d109      	bne.n	8002438 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0de      	b.n	80025e6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002428:	4b2c      	ldr	r3, [pc, #176]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0d6      	b.n	80025e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002438:	4b28      	ldr	r3, [pc, #160]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	f023 0207 	bic.w	r2, r3, #7
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4925      	ldr	r1, [pc, #148]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 8002446:	4313      	orrs	r3, r2
 8002448:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244a:	f7fe f9a7 	bl	800079c <HAL_GetTick>
 800244e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002450:	e00a      	b.n	8002468 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002452:	f7fe f9a3 	bl	800079c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e0be      	b.n	80025e6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002468:	4b1c      	ldr	r3, [pc, #112]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	429a      	cmp	r2, r3
 8002478:	d1eb      	bne.n	8002452 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d010      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	4b14      	ldr	r3, [pc, #80]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	429a      	cmp	r2, r3
 8002494:	d208      	bcs.n	80024a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f023 020f 	bic.w	r2, r3, #15
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	490e      	ldr	r1, [pc, #56]	; (80024dc <HAL_RCC_ClockConfig+0x244>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_RCC_ClockConfig+0x240>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d214      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_RCC_ClockConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 020f 	bic.w	r2, r3, #15
 80024be:	4906      	ldr	r1, [pc, #24]	; (80024d8 <HAL_RCC_ClockConfig+0x240>)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <HAL_RCC_ClockConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e086      	b.n	80025e6 <HAL_RCC_ClockConfig+0x34e>
 80024d8:	52002000 	.word	0x52002000
 80024dc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d010      	beq.n	800250e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	4b3f      	ldr	r3, [pc, #252]	; (80025f0 <HAL_RCC_ClockConfig+0x358>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d208      	bcs.n	800250e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024fc:	4b3c      	ldr	r3, [pc, #240]	; (80025f0 <HAL_RCC_ClockConfig+0x358>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	4939      	ldr	r1, [pc, #228]	; (80025f0 <HAL_RCC_ClockConfig+0x358>)
 800250a:	4313      	orrs	r3, r2
 800250c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d010      	beq.n	800253c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695a      	ldr	r2, [r3, #20]
 800251e:	4b34      	ldr	r3, [pc, #208]	; (80025f0 <HAL_RCC_ClockConfig+0x358>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002526:	429a      	cmp	r2, r3
 8002528:	d208      	bcs.n	800253c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800252a:	4b31      	ldr	r3, [pc, #196]	; (80025f0 <HAL_RCC_ClockConfig+0x358>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	492e      	ldr	r1, [pc, #184]	; (80025f0 <HAL_RCC_ClockConfig+0x358>)
 8002538:	4313      	orrs	r3, r2
 800253a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b00      	cmp	r3, #0
 8002546:	d010      	beq.n	800256a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699a      	ldr	r2, [r3, #24]
 800254c:	4b28      	ldr	r3, [pc, #160]	; (80025f0 <HAL_RCC_ClockConfig+0x358>)
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002554:	429a      	cmp	r2, r3
 8002556:	d208      	bcs.n	800256a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002558:	4b25      	ldr	r3, [pc, #148]	; (80025f0 <HAL_RCC_ClockConfig+0x358>)
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	4922      	ldr	r1, [pc, #136]	; (80025f0 <HAL_RCC_ClockConfig+0x358>)
 8002566:	4313      	orrs	r3, r2
 8002568:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	2b00      	cmp	r3, #0
 8002574:	d010      	beq.n	8002598 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69da      	ldr	r2, [r3, #28]
 800257a:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <HAL_RCC_ClockConfig+0x358>)
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002582:	429a      	cmp	r2, r3
 8002584:	d208      	bcs.n	8002598 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002586:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <HAL_RCC_ClockConfig+0x358>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	4917      	ldr	r1, [pc, #92]	; (80025f0 <HAL_RCC_ClockConfig+0x358>)
 8002594:	4313      	orrs	r3, r2
 8002596:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002598:	f000 f834 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 800259c:	4601      	mov	r1, r0
 800259e:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <HAL_RCC_ClockConfig+0x358>)
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	0a1b      	lsrs	r3, r3, #8
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <HAL_RCC_ClockConfig+0x35c>)
 80025aa:	5cd3      	ldrb	r3, [r2, r3]
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	fa21 f303 	lsr.w	r3, r1, r3
 80025b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025b6:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <HAL_RCC_ClockConfig+0x358>)
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	4a0d      	ldr	r2, [pc, #52]	; (80025f4 <HAL_RCC_ClockConfig+0x35c>)
 80025c0:	5cd3      	ldrb	r3, [r2, r3]
 80025c2:	f003 031f 	and.w	r3, r3, #31
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
 80025cc:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <HAL_RCC_ClockConfig+0x360>)
 80025ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025d0:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <HAL_RCC_ClockConfig+0x364>)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <HAL_RCC_ClockConfig+0x368>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe f894 	bl	8000708 <HAL_InitTick>
 80025e0:	4603      	mov	r3, r0
 80025e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	58024400 	.word	0x58024400
 80025f4:	08012b48 	.word	0x08012b48
 80025f8:	240006a8 	.word	0x240006a8
 80025fc:	240006a4 	.word	0x240006a4
 8002600:	24000000 	.word	0x24000000

08002604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	; 0x24
 8002608:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800260a:	4baf      	ldr	r3, [pc, #700]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002612:	2b18      	cmp	r3, #24
 8002614:	f200 814e 	bhi.w	80028b4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8002618:	a201      	add	r2, pc, #4	; (adr r2, 8002620 <HAL_RCC_GetSysClockFreq+0x1c>)
 800261a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261e:	bf00      	nop
 8002620:	08002685 	.word	0x08002685
 8002624:	080028b5 	.word	0x080028b5
 8002628:	080028b5 	.word	0x080028b5
 800262c:	080028b5 	.word	0x080028b5
 8002630:	080028b5 	.word	0x080028b5
 8002634:	080028b5 	.word	0x080028b5
 8002638:	080028b5 	.word	0x080028b5
 800263c:	080028b5 	.word	0x080028b5
 8002640:	080026ab 	.word	0x080026ab
 8002644:	080028b5 	.word	0x080028b5
 8002648:	080028b5 	.word	0x080028b5
 800264c:	080028b5 	.word	0x080028b5
 8002650:	080028b5 	.word	0x080028b5
 8002654:	080028b5 	.word	0x080028b5
 8002658:	080028b5 	.word	0x080028b5
 800265c:	080028b5 	.word	0x080028b5
 8002660:	080026b1 	.word	0x080026b1
 8002664:	080028b5 	.word	0x080028b5
 8002668:	080028b5 	.word	0x080028b5
 800266c:	080028b5 	.word	0x080028b5
 8002670:	080028b5 	.word	0x080028b5
 8002674:	080028b5 	.word	0x080028b5
 8002678:	080028b5 	.word	0x080028b5
 800267c:	080028b5 	.word	0x080028b5
 8002680:	080026b7 	.word	0x080026b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002684:	4b90      	ldr	r3, [pc, #576]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0320 	and.w	r3, r3, #32
 800268c:	2b00      	cmp	r3, #0
 800268e:	d009      	beq.n	80026a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002690:	4b8d      	ldr	r3, [pc, #564]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	08db      	lsrs	r3, r3, #3
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	4a8c      	ldr	r2, [pc, #560]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2c8>)
 800269c:	fa22 f303 	lsr.w	r3, r2, r3
 80026a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80026a2:	e10a      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80026a4:	4b89      	ldr	r3, [pc, #548]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2c8>)
 80026a6:	61bb      	str	r3, [r7, #24]
    break;
 80026a8:	e107      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80026aa:	4b89      	ldr	r3, [pc, #548]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80026ac:	61bb      	str	r3, [r7, #24]
    break;
 80026ae:	e104      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80026b0:	4b88      	ldr	r3, [pc, #544]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80026b2:	61bb      	str	r3, [r7, #24]
    break;
 80026b4:	e101      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026b6:	4b84      	ldr	r3, [pc, #528]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80026b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80026c0:	4b81      	ldr	r3, [pc, #516]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026cc:	4b7e      	ldr	r3, [pc, #504]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80026d6:	4b7c      	ldr	r3, [pc, #496]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80026d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026da:	08db      	lsrs	r3, r3, #3
 80026dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	fb02 f303 	mul.w	r3, r2, r3
 80026e6:	ee07 3a90 	vmov	s15, r3
 80026ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80da 	beq.w	80028ae <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d05a      	beq.n	80027b6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8002700:	2b01      	cmp	r3, #1
 8002702:	d302      	bcc.n	800270a <HAL_RCC_GetSysClockFreq+0x106>
 8002704:	2b02      	cmp	r3, #2
 8002706:	d078      	beq.n	80027fa <HAL_RCC_GetSysClockFreq+0x1f6>
 8002708:	e099      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800270a:	4b6f      	ldr	r3, [pc, #444]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	2b00      	cmp	r3, #0
 8002714:	d02d      	beq.n	8002772 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002716:	4b6c      	ldr	r3, [pc, #432]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	08db      	lsrs	r3, r3, #3
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	4a6a      	ldr	r2, [pc, #424]	; (80028cc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002722:	fa22 f303 	lsr.w	r3, r2, r3
 8002726:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	ee07 3a90 	vmov	s15, r3
 800272e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	ee07 3a90 	vmov	s15, r3
 8002738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800273c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002740:	4b61      	ldr	r3, [pc, #388]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002748:	ee07 3a90 	vmov	s15, r3
 800274c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002750:	ed97 6a02 	vldr	s12, [r7, #8]
 8002754:	eddf 5a60 	vldr	s11, [pc, #384]	; 80028d8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002758:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800275c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002760:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002764:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002770:	e087      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	ee07 3a90 	vmov	s15, r3
 8002778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800277c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80028dc <HAL_RCC_GetSysClockFreq+0x2d8>
 8002780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002784:	4b50      	ldr	r3, [pc, #320]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800278c:	ee07 3a90 	vmov	s15, r3
 8002790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002794:	ed97 6a02 	vldr	s12, [r7, #8]
 8002798:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80028d8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800279c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027b4:	e065      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	ee07 3a90 	vmov	s15, r3
 80027bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80028e0 <HAL_RCC_GetSysClockFreq+0x2dc>
 80027c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027c8:	4b3f      	ldr	r3, [pc, #252]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d0:	ee07 3a90 	vmov	s15, r3
 80027d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80027dc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80028d8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80027e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027f8:	e043      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	ee07 3a90 	vmov	s15, r3
 8002800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002804:	eddf 6a37 	vldr	s13, [pc, #220]	; 80028e4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8002808:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800280c:	4b2e      	ldr	r3, [pc, #184]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002814:	ee07 3a90 	vmov	s15, r3
 8002818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800281c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002820:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80028d8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002824:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002828:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800282c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002830:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002838:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800283c:	e021      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002848:	eddf 6a25 	vldr	s13, [pc, #148]	; 80028e0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800284c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002850:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002858:	ee07 3a90 	vmov	s15, r3
 800285c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002860:	ed97 6a02 	vldr	s12, [r7, #8]
 8002864:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80028d8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002868:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800286c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002870:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002874:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002880:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002882:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	0a5b      	lsrs	r3, r3, #9
 8002888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800288c:	3301      	adds	r3, #1
 800288e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	ee07 3a90 	vmov	s15, r3
 8002896:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800289a:	edd7 6a07 	vldr	s13, [r7, #28]
 800289e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a6:	ee17 3a90 	vmov	r3, s15
 80028aa:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80028ac:	e005      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
    break;
 80028b2:	e002      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80028b6:	61bb      	str	r3, [r7, #24]
    break;
 80028b8:	bf00      	nop
  }

  return sysclockfreq;
 80028ba:	69bb      	ldr	r3, [r7, #24]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3724      	adds	r7, #36	; 0x24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	58024400 	.word	0x58024400
 80028cc:	03d09000 	.word	0x03d09000
 80028d0:	003d0900 	.word	0x003d0900
 80028d4:	007a1200 	.word	0x007a1200
 80028d8:	46000000 	.word	0x46000000
 80028dc:	4c742400 	.word	0x4c742400
 80028e0:	4a742400 	.word	0x4a742400
 80028e4:	4af42400 	.word	0x4af42400

080028e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80028ee:	f7ff fe89 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 80028f2:	4601      	mov	r1, r0
 80028f4:	4b10      	ldr	r3, [pc, #64]	; (8002938 <HAL_RCC_GetHCLKFreq+0x50>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	4a0f      	ldr	r2, [pc, #60]	; (800293c <HAL_RCC_GetHCLKFreq+0x54>)
 8002900:	5cd3      	ldrb	r3, [r2, r3]
 8002902:	f003 031f 	and.w	r3, r3, #31
 8002906:	fa21 f303 	lsr.w	r3, r1, r3
 800290a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <HAL_RCC_GetHCLKFreq+0x50>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	4a09      	ldr	r2, [pc, #36]	; (800293c <HAL_RCC_GetHCLKFreq+0x54>)
 8002916:	5cd3      	ldrb	r3, [r2, r3]
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	fa22 f303 	lsr.w	r3, r2, r3
 8002922:	4a07      	ldr	r2, [pc, #28]	; (8002940 <HAL_RCC_GetHCLKFreq+0x58>)
 8002924:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002926:	4a07      	ldr	r2, [pc, #28]	; (8002944 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800292c:	4b04      	ldr	r3, [pc, #16]	; (8002940 <HAL_RCC_GetHCLKFreq+0x58>)
 800292e:	681b      	ldr	r3, [r3, #0]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	58024400 	.word	0x58024400
 800293c:	08012b48 	.word	0x08012b48
 8002940:	240006a8 	.word	0x240006a8
 8002944:	240006a4 	.word	0x240006a4

08002948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800294c:	f7ff ffcc 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002950:	4601      	mov	r1, r0
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	4a04      	ldr	r2, [pc, #16]	; (8002970 <HAL_RCC_GetPCLK1Freq+0x28>)
 800295e:	5cd3      	ldrb	r3, [r2, r3]
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002968:	4618      	mov	r0, r3
 800296a:	bd80      	pop	{r7, pc}
 800296c:	58024400 	.word	0x58024400
 8002970:	08012b48 	.word	0x08012b48

08002974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002978:	f7ff ffb6 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 800297c:	4601      	mov	r1, r0
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	0a1b      	lsrs	r3, r3, #8
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	4a04      	ldr	r2, [pc, #16]	; (800299c <HAL_RCC_GetPCLK2Freq+0x28>)
 800298a:	5cd3      	ldrb	r3, [r2, r3]
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}
 8002998:	58024400 	.word	0x58024400
 800299c:	08012b48 	.word	0x08012b48

080029a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029a8:	2300      	movs	r3, #0
 80029aa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029ac:	2300      	movs	r3, #0
 80029ae:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d03d      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029c4:	d013      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80029c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029ca:	d802      	bhi.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d007      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80029d0:	e01f      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80029d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029d6:	d013      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80029d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029dc:	d01c      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80029de:	e018      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e0:	4baf      	ldr	r3, [pc, #700]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	4aae      	ldr	r2, [pc, #696]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80029ec:	e015      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2102      	movs	r1, #2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f001 f95f 	bl	8003cb8 <RCCEx_PLL2_Config>
 80029fa:	4603      	mov	r3, r0
 80029fc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80029fe:	e00c      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3324      	adds	r3, #36	; 0x24
 8002a04:	2102      	movs	r1, #2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f001 fa08 	bl	8003e1c <RCCEx_PLL3_Config>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a10:	e003      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	75fb      	strb	r3, [r7, #23]
      break;
 8002a16:	e000      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002a18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d109      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a20:	4b9f      	ldr	r3, [pc, #636]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a2c:	499c      	ldr	r1, [pc, #624]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	650b      	str	r3, [r1, #80]	; 0x50
 8002a32:	e001      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a34:	7dfb      	ldrb	r3, [r7, #23]
 8002a36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d03d      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d826      	bhi.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002a4c:	a201      	add	r2, pc, #4	; (adr r2, 8002a54 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8002a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a52:	bf00      	nop
 8002a54:	08002a69 	.word	0x08002a69
 8002a58:	08002a77 	.word	0x08002a77
 8002a5c:	08002a89 	.word	0x08002a89
 8002a60:	08002aa1 	.word	0x08002aa1
 8002a64:	08002aa1 	.word	0x08002aa1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a68:	4b8d      	ldr	r3, [pc, #564]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	4a8c      	ldr	r2, [pc, #560]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a74:	e015      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f001 f91b 	bl	8003cb8 <RCCEx_PLL2_Config>
 8002a82:	4603      	mov	r3, r0
 8002a84:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a86:	e00c      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3324      	adds	r3, #36	; 0x24
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f001 f9c4 	bl	8003e1c <RCCEx_PLL3_Config>
 8002a94:	4603      	mov	r3, r0
 8002a96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a98:	e003      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a9e:	e000      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002aa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aa2:	7dfb      	ldrb	r3, [r7, #23]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aa8:	4b7d      	ldr	r3, [pc, #500]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aac:	f023 0207 	bic.w	r2, r3, #7
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab4:	497a      	ldr	r1, [pc, #488]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	650b      	str	r3, [r1, #80]	; 0x50
 8002aba:	e001      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002abc:	7dfb      	ldrb	r3, [r7, #23]
 8002abe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d03e      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	2b80      	cmp	r3, #128	; 0x80
 8002ad2:	d01c      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002ad4:	2b80      	cmp	r3, #128	; 0x80
 8002ad6:	d804      	bhi.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002adc:	2b40      	cmp	r3, #64	; 0x40
 8002ade:	d00d      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002ae0:	e01e      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002ae2:	2bc0      	cmp	r3, #192	; 0xc0
 8002ae4:	d01f      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aea:	d01e      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002aec:	e018      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aee:	4b6c      	ldr	r3, [pc, #432]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	4a6b      	ldr	r2, [pc, #428]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002afa:	e017      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3304      	adds	r3, #4
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f001 f8d8 	bl	8003cb8 <RCCEx_PLL2_Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b0c:	e00e      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3324      	adds	r3, #36	; 0x24
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f001 f981 	bl	8003e1c <RCCEx_PLL3_Config>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b1e:	e005      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	75fb      	strb	r3, [r7, #23]
      break;
 8002b24:	e002      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002b26:	bf00      	nop
 8002b28:	e000      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002b32:	4b5b      	ldr	r3, [pc, #364]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b36:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3e:	4958      	ldr	r1, [pc, #352]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	650b      	str	r3, [r1, #80]	; 0x50
 8002b44:	e001      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b46:	7dfb      	ldrb	r3, [r7, #23]
 8002b48:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d044      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b60:	d01f      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b66:	d805      	bhi.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00a      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b70:	d00e      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8002b72:	e01f      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002b74:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b78:	d01f      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002b7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b7e:	d01e      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002b80:	e018      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b82:	4b47      	ldr	r3, [pc, #284]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	4a46      	ldr	r2, [pc, #280]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b8e:	e017      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3304      	adds	r3, #4
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f001 f88e 	bl	8003cb8 <RCCEx_PLL2_Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002ba0:	e00e      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3324      	adds	r3, #36	; 0x24
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f001 f937 	bl	8003e1c <RCCEx_PLL3_Config>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bb2:	e005      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8002bb8:	e002      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002bba:	bf00      	nop
 8002bbc:	e000      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002bbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10a      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002bc6:	4b36      	ldr	r3, [pc, #216]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bca:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002bd4:	4932      	ldr	r1, [pc, #200]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	658b      	str	r3, [r1, #88]	; 0x58
 8002bda:	e001      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bdc:	7dfb      	ldrb	r3, [r7, #23]
 8002bde:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d044      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002bf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bf6:	d01f      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002bf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bfc:	d805      	bhi.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8002c02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c06:	d00e      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002c08:	e01f      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002c0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c0e:	d01f      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002c10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c14:	d01e      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002c16:	e018      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c18:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	4a20      	ldr	r2, [pc, #128]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c24:	e017      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f001 f843 	bl	8003cb8 <RCCEx_PLL2_Config>
 8002c32:	4603      	mov	r3, r0
 8002c34:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002c36:	e00e      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3324      	adds	r3, #36	; 0x24
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f001 f8ec 	bl	8003e1c <RCCEx_PLL3_Config>
 8002c44:	4603      	mov	r3, r0
 8002c46:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c48:	e005      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8002c4e:	e002      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002c50:	bf00      	nop
 8002c52:	e000      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002c54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10a      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002c5c:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c6a:	490d      	ldr	r1, [pc, #52]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	658b      	str	r3, [r1, #88]	; 0x58
 8002c70:	e001      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c72:	7dfb      	ldrb	r3, [r7, #23]
 8002c74:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d035      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c86:	2b10      	cmp	r3, #16
 8002c88:	d00c      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d802      	bhi.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01b      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8002c92:	e017      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002c94:	2b20      	cmp	r3, #32
 8002c96:	d00c      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002c98:	2b30      	cmp	r3, #48	; 0x30
 8002c9a:	d018      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002c9c:	e012      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002c9e:	bf00      	nop
 8002ca0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ca4:	4baf      	ldr	r3, [pc, #700]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	4aae      	ldr	r2, [pc, #696]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002cb0:	e00e      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	2102      	movs	r1, #2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fffd 	bl	8003cb8 <RCCEx_PLL2_Config>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002cc2:	e005      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc8:	e002      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002cca:	bf00      	nop
 8002ccc:	e000      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002cce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002cd6:	4ba3      	ldr	r3, [pc, #652]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cda:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce2:	49a0      	ldr	r1, [pc, #640]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002ce8:	e001      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
 8002cec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d042      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d02:	d01f      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d08:	d805      	bhi.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d12:	d00e      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002d14:	e01f      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002d16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d1a:	d01f      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d20:	d01e      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002d22:	e018      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d24:	4b8f      	ldr	r3, [pc, #572]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	4a8e      	ldr	r2, [pc, #568]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d30:	e017      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3304      	adds	r3, #4
 8002d36:	2100      	movs	r1, #0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 ffbd 	bl	8003cb8 <RCCEx_PLL2_Config>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d42:	e00e      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3324      	adds	r3, #36	; 0x24
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f001 f866 	bl	8003e1c <RCCEx_PLL3_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d54:	e005      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	75fb      	strb	r3, [r7, #23]
      break;
 8002d5a:	e002      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002d5c:	bf00      	nop
 8002d5e:	e000      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d62:	7dfb      	ldrb	r3, [r7, #23]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d68:	4b7e      	ldr	r3, [pc, #504]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d74:	497b      	ldr	r1, [pc, #492]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	650b      	str	r3, [r1, #80]	; 0x50
 8002d7a:	e001      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d042      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d94:	d01b      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002d96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d9a:	d805      	bhi.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d022      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da4:	d00a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002da6:	e01b      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002da8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dac:	d01d      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002dae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db2:	d01c      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002db4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002db8:	d01b      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002dba:	e011      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 ff78 	bl	8003cb8 <RCCEx_PLL2_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002dcc:	e012      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3324      	adds	r3, #36	; 0x24
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f001 f821 	bl	8003e1c <RCCEx_PLL3_Config>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002dde:	e009      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	75fb      	strb	r3, [r7, #23]
      break;
 8002de4:	e006      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002de6:	bf00      	nop
 8002de8:	e004      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002dea:	bf00      	nop
 8002dec:	e002      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002dee:	bf00      	nop
 8002df0:	e000      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002df2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002df4:	7dfb      	ldrb	r3, [r7, #23]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d109      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002dfa:	4b5a      	ldr	r3, [pc, #360]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dfe:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e06:	4957      	ldr	r1, [pc, #348]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	650b      	str	r3, [r1, #80]	; 0x50
 8002e0c:	e001      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
 8002e10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d044      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e28:	d01b      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e2e:	d805      	bhi.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d022      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002e34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e38:	d00a      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002e3a:	e01b      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e40:	d01d      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e46:	d01c      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002e48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e4c:	d01b      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002e4e:	e011      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3304      	adds	r3, #4
 8002e54:	2101      	movs	r1, #1
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 ff2e 	bl	8003cb8 <RCCEx_PLL2_Config>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e60:	e012      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3324      	adds	r3, #36	; 0x24
 8002e66:	2101      	movs	r1, #1
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 ffd7 	bl	8003e1c <RCCEx_PLL3_Config>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e72:	e009      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	75fb      	strb	r3, [r7, #23]
      break;
 8002e78:	e006      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002e7a:	bf00      	nop
 8002e7c:	e004      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002e7e:	bf00      	nop
 8002e80:	e002      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002e82:	bf00      	nop
 8002e84:	e000      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002e86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10a      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e8e:	4b35      	ldr	r3, [pc, #212]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e92:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e9c:	4931      	ldr	r1, [pc, #196]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	658b      	str	r3, [r1, #88]	; 0x58
 8002ea2:	e001      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea4:	7dfb      	ldrb	r3, [r7, #23]
 8002ea6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d02d      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ebc:	d005      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ec2:	d009      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d013      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002ec8:	e00f      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eca:	4b26      	ldr	r3, [pc, #152]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	4a25      	ldr	r2, [pc, #148]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ed6:	e00c      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3304      	adds	r3, #4
 8002edc:	2101      	movs	r1, #1
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 feea 	bl	8003cb8 <RCCEx_PLL2_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ee8:	e003      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	75fb      	strb	r3, [r7, #23]
      break;
 8002eee:	e000      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d109      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ef8:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f04:	4917      	ldr	r1, [pc, #92]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	650b      	str	r3, [r1, #80]	; 0x50
 8002f0a:	e001      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d035      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d81b      	bhi.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002f24:	a201      	add	r2, pc, #4	; (adr r2, 8002f2c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2a:	bf00      	nop
 8002f2c:	08002f69 	.word	0x08002f69
 8002f30:	08002f3d 	.word	0x08002f3d
 8002f34:	08002f4b 	.word	0x08002f4b
 8002f38:	08002f69 	.word	0x08002f69
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f48:	e00f      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	2102      	movs	r1, #2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 feb1 	bl	8003cb8 <RCCEx_PLL2_Config>
 8002f56:	4603      	mov	r3, r0
 8002f58:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f5a:	e006      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f60:	e003      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002f62:	bf00      	nop
 8002f64:	58024400 	.word	0x58024400
      break;
 8002f68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d109      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f70:	4bba      	ldr	r3, [pc, #744]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f74:	f023 0203 	bic.w	r2, r3, #3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7c:	49b7      	ldr	r1, [pc, #732]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f82:	e001      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f84:	7dfb      	ldrb	r3, [r7, #23]
 8002f86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 8086 	beq.w	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f96:	4bb2      	ldr	r3, [pc, #712]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4ab1      	ldr	r2, [pc, #708]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fa2:	f7fd fbfb 	bl	800079c <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fa8:	e009      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002faa:	f7fd fbf7 	bl	800079c <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b64      	cmp	r3, #100	; 0x64
 8002fb6:	d902      	bls.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	75fb      	strb	r3, [r7, #23]
        break;
 8002fbc:	e005      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fbe:	4ba8      	ldr	r3, [pc, #672]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0ef      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d166      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002fd0:	4ba2      	ldr	r3, [pc, #648]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002fd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fda:	4053      	eors	r3, r2
 8002fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d013      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fe4:	4b9d      	ldr	r3, [pc, #628]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fec:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fee:	4b9b      	ldr	r3, [pc, #620]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	4a9a      	ldr	r2, [pc, #616]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ffa:	4b98      	ldr	r3, [pc, #608]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	4a97      	ldr	r2, [pc, #604]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003004:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003006:	4a95      	ldr	r2, [pc, #596]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003016:	d115      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7fd fbc0 	bl	800079c <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800301e:	e00b      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003020:	f7fd fbbc 	bl	800079c <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d902      	bls.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	75fb      	strb	r3, [r7, #23]
            break;
 8003036:	e005      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003038:	4b88      	ldr	r3, [pc, #544]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0ed      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003044:	7dfb      	ldrb	r3, [r7, #23]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d126      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003054:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003058:	d10d      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800305a:	4b80      	ldr	r3, [pc, #512]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003068:	0919      	lsrs	r1, r3, #4
 800306a:	4b7e      	ldr	r3, [pc, #504]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800306c:	400b      	ands	r3, r1
 800306e:	497b      	ldr	r1, [pc, #492]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003070:	4313      	orrs	r3, r2
 8003072:	610b      	str	r3, [r1, #16]
 8003074:	e005      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003076:	4b79      	ldr	r3, [pc, #484]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	4a78      	ldr	r2, [pc, #480]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800307c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003080:	6113      	str	r3, [r2, #16]
 8003082:	4b76      	ldr	r3, [pc, #472]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003084:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800308c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003090:	4972      	ldr	r1, [pc, #456]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003092:	4313      	orrs	r3, r2
 8003094:	670b      	str	r3, [r1, #112]	; 0x70
 8003096:	e004      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003098:	7dfb      	ldrb	r3, [r7, #23]
 800309a:	75bb      	strb	r3, [r7, #22]
 800309c:	e001      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800309e:	7dfb      	ldrb	r3, [r7, #23]
 80030a0:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d07d      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030b2:	2b28      	cmp	r3, #40	; 0x28
 80030b4:	d866      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80030b6:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80030b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030bc:	0800318b 	.word	0x0800318b
 80030c0:	08003185 	.word	0x08003185
 80030c4:	08003185 	.word	0x08003185
 80030c8:	08003185 	.word	0x08003185
 80030cc:	08003185 	.word	0x08003185
 80030d0:	08003185 	.word	0x08003185
 80030d4:	08003185 	.word	0x08003185
 80030d8:	08003185 	.word	0x08003185
 80030dc:	08003161 	.word	0x08003161
 80030e0:	08003185 	.word	0x08003185
 80030e4:	08003185 	.word	0x08003185
 80030e8:	08003185 	.word	0x08003185
 80030ec:	08003185 	.word	0x08003185
 80030f0:	08003185 	.word	0x08003185
 80030f4:	08003185 	.word	0x08003185
 80030f8:	08003185 	.word	0x08003185
 80030fc:	08003173 	.word	0x08003173
 8003100:	08003185 	.word	0x08003185
 8003104:	08003185 	.word	0x08003185
 8003108:	08003185 	.word	0x08003185
 800310c:	08003185 	.word	0x08003185
 8003110:	08003185 	.word	0x08003185
 8003114:	08003185 	.word	0x08003185
 8003118:	08003185 	.word	0x08003185
 800311c:	0800318b 	.word	0x0800318b
 8003120:	08003185 	.word	0x08003185
 8003124:	08003185 	.word	0x08003185
 8003128:	08003185 	.word	0x08003185
 800312c:	08003185 	.word	0x08003185
 8003130:	08003185 	.word	0x08003185
 8003134:	08003185 	.word	0x08003185
 8003138:	08003185 	.word	0x08003185
 800313c:	0800318b 	.word	0x0800318b
 8003140:	08003185 	.word	0x08003185
 8003144:	08003185 	.word	0x08003185
 8003148:	08003185 	.word	0x08003185
 800314c:	08003185 	.word	0x08003185
 8003150:	08003185 	.word	0x08003185
 8003154:	08003185 	.word	0x08003185
 8003158:	08003185 	.word	0x08003185
 800315c:	0800318b 	.word	0x0800318b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3304      	adds	r3, #4
 8003164:	2101      	movs	r1, #1
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fda6 	bl	8003cb8 <RCCEx_PLL2_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003170:	e00c      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3324      	adds	r3, #36	; 0x24
 8003176:	2101      	movs	r1, #1
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fe4f 	bl	8003e1c <RCCEx_PLL3_Config>
 800317e:	4603      	mov	r3, r0
 8003180:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003182:	e003      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	75fb      	strb	r3, [r7, #23]
      break;
 8003188:	e000      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800318a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800318c:	7dfb      	ldrb	r3, [r7, #23]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003192:	4b32      	ldr	r3, [pc, #200]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800319e:	492f      	ldr	r1, [pc, #188]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	654b      	str	r3, [r1, #84]	; 0x54
 80031a4:	e001      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
 80031a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d037      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ba:	2b05      	cmp	r3, #5
 80031bc:	d820      	bhi.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80031be:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80031c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c4:	08003207 	.word	0x08003207
 80031c8:	080031dd 	.word	0x080031dd
 80031cc:	080031ef 	.word	0x080031ef
 80031d0:	08003207 	.word	0x08003207
 80031d4:	08003207 	.word	0x08003207
 80031d8:	08003207 	.word	0x08003207
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3304      	adds	r3, #4
 80031e0:	2101      	movs	r1, #1
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fd68 	bl	8003cb8 <RCCEx_PLL2_Config>
 80031e8:	4603      	mov	r3, r0
 80031ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80031ec:	e00c      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3324      	adds	r3, #36	; 0x24
 80031f2:	2101      	movs	r1, #1
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fe11 	bl	8003e1c <RCCEx_PLL3_Config>
 80031fa:	4603      	mov	r3, r0
 80031fc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80031fe:	e003      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	75fb      	strb	r3, [r7, #23]
      break;
 8003204:	e000      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003206:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d109      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800320e:	4b13      	ldr	r3, [pc, #76]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003212:	f023 0207 	bic.w	r2, r3, #7
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800321a:	4910      	ldr	r1, [pc, #64]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800321c:	4313      	orrs	r3, r2
 800321e:	654b      	str	r3, [r1, #84]	; 0x54
 8003220:	e001      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003222:	7dfb      	ldrb	r3, [r7, #23]
 8003224:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	d040      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003238:	2b05      	cmp	r3, #5
 800323a:	d827      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800323c:	a201      	add	r2, pc, #4	; (adr r2, 8003244 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800323e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003242:	bf00      	nop
 8003244:	08003293 	.word	0x08003293
 8003248:	08003269 	.word	0x08003269
 800324c:	0800327b 	.word	0x0800327b
 8003250:	08003293 	.word	0x08003293
 8003254:	08003293 	.word	0x08003293
 8003258:	08003293 	.word	0x08003293
 800325c:	58024400 	.word	0x58024400
 8003260:	58024800 	.word	0x58024800
 8003264:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3304      	adds	r3, #4
 800326c:	2101      	movs	r1, #1
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fd22 	bl	8003cb8 <RCCEx_PLL2_Config>
 8003274:	4603      	mov	r3, r0
 8003276:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003278:	e00c      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3324      	adds	r3, #36	; 0x24
 800327e:	2101      	movs	r1, #1
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fdcb 	bl	8003e1c <RCCEx_PLL3_Config>
 8003286:	4603      	mov	r3, r0
 8003288:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800328a:	e003      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	75fb      	strb	r3, [r7, #23]
      break;
 8003290:	e000      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8003292:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003294:	7dfb      	ldrb	r3, [r7, #23]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10a      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800329a:	4bb2      	ldr	r3, [pc, #712]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329e:	f023 0207 	bic.w	r2, r3, #7
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	49ae      	ldr	r1, [pc, #696]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	658b      	str	r3, [r1, #88]	; 0x58
 80032ae:	e001      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
 80032b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d044      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ca:	d01b      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80032cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032d0:	d805      	bhi.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d022      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80032d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032da:	d00a      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80032dc:	e01b      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80032de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e2:	d01d      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80032e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032e8:	d01c      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80032ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032ee:	d01b      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80032f0:	e011      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3304      	adds	r3, #4
 80032f6:	2100      	movs	r1, #0
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 fcdd 	bl	8003cb8 <RCCEx_PLL2_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003302:	e012      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3324      	adds	r3, #36	; 0x24
 8003308:	2102      	movs	r1, #2
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fd86 	bl	8003e1c <RCCEx_PLL3_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003314:	e009      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	75fb      	strb	r3, [r7, #23]
      break;
 800331a:	e006      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800331c:	bf00      	nop
 800331e:	e004      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003320:	bf00      	nop
 8003322:	e002      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003324:	bf00      	nop
 8003326:	e000      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003328:	bf00      	nop
    }

    if(ret == HAL_OK)
 800332a:	7dfb      	ldrb	r3, [r7, #23]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10a      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003330:	4b8c      	ldr	r3, [pc, #560]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003334:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800333e:	4989      	ldr	r1, [pc, #548]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003340:	4313      	orrs	r3, r2
 8003342:	654b      	str	r3, [r1, #84]	; 0x54
 8003344:	e001      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003346:	7dfb      	ldrb	r3, [r7, #23]
 8003348:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d044      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800335c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003360:	d01b      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8003362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003366:	d805      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003368:	2b00      	cmp	r3, #0
 800336a:	d022      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800336c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003370:	d00a      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003372:	e01b      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8003374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003378:	d01d      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800337a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800337e:	d01c      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003380:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003384:	d01b      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8003386:	e011      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fc92 	bl	8003cb8 <RCCEx_PLL2_Config>
 8003394:	4603      	mov	r3, r0
 8003396:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003398:	e012      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3324      	adds	r3, #36	; 0x24
 800339e:	2102      	movs	r1, #2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fd3b 	bl	8003e1c <RCCEx_PLL3_Config>
 80033a6:	4603      	mov	r3, r0
 80033a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80033aa:	e009      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	75fb      	strb	r3, [r7, #23]
      break;
 80033b0:	e006      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80033b2:	bf00      	nop
 80033b4:	e004      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80033b6:	bf00      	nop
 80033b8:	e002      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80033ba:	bf00      	nop
 80033bc:	e000      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80033be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10a      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033c6:	4b67      	ldr	r3, [pc, #412]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80033c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033d4:	4963      	ldr	r1, [pc, #396]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	658b      	str	r3, [r1, #88]	; 0x58
 80033da:	e001      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
 80033de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d044      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033f6:	d01b      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80033f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033fc:	d805      	bhi.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d022      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003408:	e01b      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800340a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800340e:	d01d      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003410:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003414:	d01c      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8003416:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800341a:	d01b      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800341c:	e011      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3304      	adds	r3, #4
 8003422:	2100      	movs	r1, #0
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fc47 	bl	8003cb8 <RCCEx_PLL2_Config>
 800342a:	4603      	mov	r3, r0
 800342c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800342e:	e012      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3324      	adds	r3, #36	; 0x24
 8003434:	2102      	movs	r1, #2
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fcf0 	bl	8003e1c <RCCEx_PLL3_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003440:	e009      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	75fb      	strb	r3, [r7, #23]
      break;
 8003446:	e006      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003448:	bf00      	nop
 800344a:	e004      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800344c:	bf00      	nop
 800344e:	e002      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003450:	bf00      	nop
 8003452:	e000      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003456:	7dfb      	ldrb	r3, [r7, #23]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10a      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800345c:	4b41      	ldr	r3, [pc, #260]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800346a:	493e      	ldr	r1, [pc, #248]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800346c:	4313      	orrs	r3, r2
 800346e:	658b      	str	r3, [r1, #88]	; 0x58
 8003470:	e001      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003472:	7dfb      	ldrb	r3, [r7, #23]
 8003474:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d01a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348c:	d10a      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3324      	adds	r3, #36	; 0x24
 8003492:	2102      	movs	r1, #2
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fcc1 	bl	8003e1c <RCCEx_PLL3_Config>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80034a4:	4b2f      	ldr	r3, [pc, #188]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80034a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034b2:	492c      	ldr	r1, [pc, #176]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01a      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ce:	d10a      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3324      	adds	r3, #36	; 0x24
 80034d4:	2102      	movs	r1, #2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fca0 	bl	8003e1c <RCCEx_PLL3_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034e6:	4b1f      	ldr	r3, [pc, #124]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80034e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f4:	491b      	ldr	r1, [pc, #108]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d032      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800350c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003510:	d00d      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8003512:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003516:	d016      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8003518:	2b00      	cmp	r3, #0
 800351a:	d111      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3304      	adds	r3, #4
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fbc8 	bl	8003cb8 <RCCEx_PLL2_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800352c:	e00c      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3324      	adds	r3, #36	; 0x24
 8003532:	2102      	movs	r1, #2
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fc71 	bl	8003e1c <RCCEx_PLL3_Config>
 800353a:	4603      	mov	r3, r0
 800353c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800353e:	e003      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	75fb      	strb	r3, [r7, #23]
      break;
 8003544:	e000      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8003546:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10c      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003552:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800355c:	4901      	ldr	r1, [pc, #4]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800355e:	4313      	orrs	r3, r2
 8003560:	658b      	str	r3, [r1, #88]	; 0x58
 8003562:	e003      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8003564:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003568:	7dfb      	ldrb	r3, [r7, #23]
 800356a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d02f      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800357e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003582:	d00c      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003584:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003588:	d015      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800358a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800358e:	d10f      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003590:	4b71      	ldr	r3, [pc, #452]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	4a70      	ldr	r2, [pc, #448]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800359a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800359c:	e00c      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3324      	adds	r3, #36	; 0x24
 80035a2:	2101      	movs	r1, #1
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fc39 	bl	8003e1c <RCCEx_PLL3_Config>
 80035aa:	4603      	mov	r3, r0
 80035ac:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80035ae:	e003      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	75fb      	strb	r3, [r7, #23]
      break;
 80035b4:	e000      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80035b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10a      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035be:	4b66      	ldr	r3, [pc, #408]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80035c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035cc:	4962      	ldr	r1, [pc, #392]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	654b      	str	r3, [r1, #84]	; 0x54
 80035d2:	e001      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
 80035d6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d029      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80035ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f0:	d007      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80035f2:	e00f      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f4:	4b58      	ldr	r3, [pc, #352]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	4a57      	ldr	r2, [pc, #348]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80035fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003600:	e00b      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3304      	adds	r3, #4
 8003606:	2102      	movs	r1, #2
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fb55 	bl	8003cb8 <RCCEx_PLL2_Config>
 800360e:	4603      	mov	r3, r0
 8003610:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003612:	e002      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	75fb      	strb	r3, [r7, #23]
      break;
 8003618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800361a:	7dfb      	ldrb	r3, [r7, #23]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d109      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003620:	4b4d      	ldr	r3, [pc, #308]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003624:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362c:	494a      	ldr	r1, [pc, #296]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003632:	e001      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003634:	7dfb      	ldrb	r3, [r7, #23]
 8003636:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3324      	adds	r3, #36	; 0x24
 8003648:	2102      	movs	r1, #2
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fbe6 	bl	8003e1c <RCCEx_PLL3_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d02f      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800366a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800366e:	d00c      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003674:	d802      	bhi.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8003676:	2b00      	cmp	r3, #0
 8003678:	d011      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800367a:	e00d      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800367c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003680:	d00f      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8003682:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003686:	d00e      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8003688:	e006      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800368a:	4b33      	ldr	r3, [pc, #204]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	4a32      	ldr	r2, [pc, #200]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003694:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003696:	e007      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	75fb      	strb	r3, [r7, #23]
      break;
 800369c:	e004      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800369e:	bf00      	nop
 80036a0:	e002      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80036a2:	bf00      	nop
 80036a4:	e000      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80036a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036ae:	4b2a      	ldr	r3, [pc, #168]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80036b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ba:	4927      	ldr	r1, [pc, #156]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	654b      	str	r3, [r1, #84]	; 0x54
 80036c0:	e001      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c2:	7dfb      	ldrb	r3, [r7, #23]
 80036c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036d2:	4b21      	ldr	r3, [pc, #132]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80036d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	491e      	ldr	r1, [pc, #120]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036f0:	4b19      	ldr	r3, [pc, #100]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80036f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036fc:	4916      	ldr	r1, [pc, #88]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00d      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800370e:	4b12      	ldr	r3, [pc, #72]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	4a11      	ldr	r2, [pc, #68]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003714:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003718:	6113      	str	r3, [r2, #16]
 800371a:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003724:	490c      	ldr	r1, [pc, #48]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003726:	4313      	orrs	r3, r2
 8003728:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	da08      	bge.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003732:	4b09      	ldr	r3, [pc, #36]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003736:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373e:	4906      	ldr	r1, [pc, #24]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003740:	4313      	orrs	r3, r2
 8003742:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003744:	7dbb      	ldrb	r3, [r7, #22]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	e000      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	58024400 	.word	0x58024400

0800375c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003760:	f7ff f8c2 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8003764:	4601      	mov	r1, r0
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	091b      	lsrs	r3, r3, #4
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	4a04      	ldr	r2, [pc, #16]	; (8003784 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003772:	5cd3      	ldrb	r3, [r2, r3]
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800377c:	4618      	mov	r0, r3
 800377e:	bd80      	pop	{r7, pc}
 8003780:	58024400 	.word	0x58024400
 8003784:	08012b48 	.word	0x08012b48

08003788 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003788:	b480      	push	{r7}
 800378a:	b089      	sub	sp, #36	; 0x24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003790:	4b9d      	ldr	r3, [pc, #628]	; (8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800379a:	4b9b      	ldr	r3, [pc, #620]	; (8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	0b1b      	lsrs	r3, r3, #12
 80037a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80037a6:	4b98      	ldr	r3, [pc, #608]	; (8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	091b      	lsrs	r3, r3, #4
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80037b2:	4b95      	ldr	r3, [pc, #596]	; (8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80037b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b6:	08db      	lsrs	r3, r3, #3
 80037b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	fb02 f303 	mul.w	r3, r2, r3
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 810a 	beq.w	80039ea <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d05a      	beq.n	8003892 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d302      	bcc.n	80037e6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d078      	beq.n	80038d6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80037e4:	e099      	b.n	800391a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037e6:	4b88      	ldr	r3, [pc, #544]	; (8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d02d      	beq.n	800384e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037f2:	4b85      	ldr	r3, [pc, #532]	; (8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	08db      	lsrs	r3, r3, #3
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	4a83      	ldr	r2, [pc, #524]	; (8003a0c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80037fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003802:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	ee07 3a90 	vmov	s15, r3
 8003814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003818:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800381c:	4b7a      	ldr	r3, [pc, #488]	; (8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003824:	ee07 3a90 	vmov	s15, r3
 8003828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800382c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003830:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003a10 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003834:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003838:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800383c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003840:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003848:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800384c:	e087      	b.n	800395e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	ee07 3a90 	vmov	s15, r3
 8003854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003858:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003a14 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800385c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003860:	4b69      	ldr	r3, [pc, #420]	; (8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003868:	ee07 3a90 	vmov	s15, r3
 800386c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003870:	ed97 6a03 	vldr	s12, [r7, #12]
 8003874:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003a10 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003878:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800387c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003880:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003884:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003890:	e065      	b.n	800395e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	ee07 3a90 	vmov	s15, r3
 8003898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80038a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038a4:	4b58      	ldr	r3, [pc, #352]	; (8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ac:	ee07 3a90 	vmov	s15, r3
 80038b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80038b8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003a10 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80038bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038d4:	e043      	b.n	800395e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	ee07 3a90 	vmov	s15, r3
 80038dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003a1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80038e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038e8:	4b47      	ldr	r3, [pc, #284]	; (8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f0:	ee07 3a90 	vmov	s15, r3
 80038f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80038fc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003a10 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003900:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003904:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003908:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800390c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003914:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003918:	e021      	b.n	800395e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003924:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003928:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800392c:	4b36      	ldr	r3, [pc, #216]	; (8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003934:	ee07 3a90 	vmov	s15, r3
 8003938:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800393c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003940:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003a10 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003944:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003948:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800394c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003950:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003958:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800395c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800395e:	4b2a      	ldr	r3, [pc, #168]	; (8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003962:	0a5b      	lsrs	r3, r3, #9
 8003964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003968:	ee07 3a90 	vmov	s15, r3
 800396c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003970:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003974:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003978:	edd7 6a07 	vldr	s13, [r7, #28]
 800397c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003984:	ee17 2a90 	vmov	r2, s15
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800398c:	4b1e      	ldr	r3, [pc, #120]	; (8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003990:	0c1b      	lsrs	r3, r3, #16
 8003992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800399e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80039aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039b2:	ee17 2a90 	vmov	r2, s15
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80039ba:	4b13      	ldr	r3, [pc, #76]	; (8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	0e1b      	lsrs	r3, r3, #24
 80039c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039c4:	ee07 3a90 	vmov	s15, r3
 80039c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80039d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039e0:	ee17 2a90 	vmov	r2, s15
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80039e8:	e008      	b.n	80039fc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	609a      	str	r2, [r3, #8]
}
 80039fc:	bf00      	nop
 80039fe:	3724      	adds	r7, #36	; 0x24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	58024400 	.word	0x58024400
 8003a0c:	03d09000 	.word	0x03d09000
 8003a10:	46000000 	.word	0x46000000
 8003a14:	4c742400 	.word	0x4c742400
 8003a18:	4a742400 	.word	0x4a742400
 8003a1c:	4af42400 	.word	0x4af42400

08003a20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b089      	sub	sp, #36	; 0x24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a28:	4b9d      	ldr	r3, [pc, #628]	; (8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003a32:	4b9b      	ldr	r3, [pc, #620]	; (8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	0d1b      	lsrs	r3, r3, #20
 8003a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003a3e:	4b98      	ldr	r3, [pc, #608]	; (8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	0a1b      	lsrs	r3, r3, #8
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003a4a:	4b95      	ldr	r3, [pc, #596]	; (8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	08db      	lsrs	r3, r3, #3
 8003a50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 810a 	beq.w	8003c82 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d05a      	beq.n	8003b2a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d302      	bcc.n	8003a7e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d078      	beq.n	8003b6e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8003a7c:	e099      	b.n	8003bb2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a7e:	4b88      	ldr	r3, [pc, #544]	; (8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d02d      	beq.n	8003ae6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a8a:	4b85      	ldr	r3, [pc, #532]	; (8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	08db      	lsrs	r3, r3, #3
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	4a83      	ldr	r2, [pc, #524]	; (8003ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8003a96:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	ee07 3a90 	vmov	s15, r3
 8003aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ab4:	4b7a      	ldr	r3, [pc, #488]	; (8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003abc:	ee07 3a90 	vmov	s15, r3
 8003ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac4:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ac8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003acc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ad4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ad8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003ae4:	e087      	b.n	8003bf6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	ee07 3a90 	vmov	s15, r3
 8003aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003cac <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003af4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af8:	4b69      	ldr	r3, [pc, #420]	; (8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b00:	ee07 3a90 	vmov	s15, r3
 8003b04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b08:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b0c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003b10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b28:	e065      	b.n	8003bf6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	ee07 3a90 	vmov	s15, r3
 8003b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b34:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003b38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b3c:	4b58      	ldr	r3, [pc, #352]	; (8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b44:	ee07 3a90 	vmov	s15, r3
 8003b48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b50:	eddf 5a55 	vldr	s11, [pc, #340]	; 8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003b54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b6c:	e043      	b.n	8003bf6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	ee07 3a90 	vmov	s15, r3
 8003b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b78:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8003b7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b80:	4b47      	ldr	r3, [pc, #284]	; (8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b88:	ee07 3a90 	vmov	s15, r3
 8003b8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b90:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b94:	eddf 5a44 	vldr	s11, [pc, #272]	; 8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003b98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ba4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bb0:	e021      	b.n	8003bf6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	ee07 3a90 	vmov	s15, r3
 8003bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bbc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003bc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bc4:	4b36      	ldr	r3, [pc, #216]	; (8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bcc:	ee07 3a90 	vmov	s15, r3
 8003bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd4:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bd8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003bdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003be4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003be8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bf4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003bf6:	4b2a      	ldr	r3, [pc, #168]	; (8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	0a5b      	lsrs	r3, r3, #9
 8003bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c00:	ee07 3a90 	vmov	s15, r3
 8003c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c10:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c1c:	ee17 2a90 	vmov	r2, s15
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003c24:	4b1e      	ldr	r3, [pc, #120]	; (8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	0c1b      	lsrs	r3, r3, #16
 8003c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c2e:	ee07 3a90 	vmov	s15, r3
 8003c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c4a:	ee17 2a90 	vmov	r2, s15
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003c52:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	0e1b      	lsrs	r3, r3, #24
 8003c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c5c:	ee07 3a90 	vmov	s15, r3
 8003c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c78:	ee17 2a90 	vmov	r2, s15
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003c80:	e008      	b.n	8003c94 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	609a      	str	r2, [r3, #8]
}
 8003c94:	bf00      	nop
 8003c96:	3724      	adds	r7, #36	; 0x24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	58024400 	.word	0x58024400
 8003ca4:	03d09000 	.word	0x03d09000
 8003ca8:	46000000 	.word	0x46000000
 8003cac:	4c742400 	.word	0x4c742400
 8003cb0:	4a742400 	.word	0x4a742400
 8003cb4:	4af42400 	.word	0x4af42400

08003cb8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cc6:	4b53      	ldr	r3, [pc, #332]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d101      	bne.n	8003cd6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e099      	b.n	8003e0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003cd6:	4b4f      	ldr	r3, [pc, #316]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a4e      	ldr	r2, [pc, #312]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003cdc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce2:	f7fc fd5b 	bl	800079c <HAL_GetTick>
 8003ce6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ce8:	e008      	b.n	8003cfc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003cea:	f7fc fd57 	bl	800079c <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e086      	b.n	8003e0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cfc:	4b45      	ldr	r3, [pc, #276]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1f0      	bne.n	8003cea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d08:	4b42      	ldr	r3, [pc, #264]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	031b      	lsls	r3, r3, #12
 8003d16:	493f      	ldr	r1, [pc, #252]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	628b      	str	r3, [r1, #40]	; 0x28
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	025b      	lsls	r3, r3, #9
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	041b      	lsls	r3, r3, #16
 8003d3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	3b01      	subs	r3, #1
 8003d46:	061b      	lsls	r3, r3, #24
 8003d48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d4c:	4931      	ldr	r1, [pc, #196]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d52:	4b30      	ldr	r3, [pc, #192]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	492d      	ldr	r1, [pc, #180]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d64:	4b2b      	ldr	r3, [pc, #172]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	f023 0220 	bic.w	r2, r3, #32
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	4928      	ldr	r1, [pc, #160]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d76:	4b27      	ldr	r3, [pc, #156]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	4a26      	ldr	r2, [pc, #152]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003d7c:	f023 0310 	bic.w	r3, r3, #16
 8003d80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d82:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003d84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d86:	4b24      	ldr	r3, [pc, #144]	; (8003e18 <RCCEx_PLL2_Config+0x160>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	69d2      	ldr	r2, [r2, #28]
 8003d8e:	00d2      	lsls	r2, r2, #3
 8003d90:	4920      	ldr	r1, [pc, #128]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d96:	4b1f      	ldr	r3, [pc, #124]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	4a1e      	ldr	r2, [pc, #120]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003d9c:	f043 0310 	orr.w	r3, r3, #16
 8003da0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d106      	bne.n	8003db6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003da8:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	4a19      	ldr	r2, [pc, #100]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003dae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003db2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003db4:	e00f      	b.n	8003dd6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d106      	bne.n	8003dca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003dbc:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003dc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003dc8:	e005      	b.n	8003dd6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	4a11      	ldr	r2, [pc, #68]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003dd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a0e      	ldr	r2, [pc, #56]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003ddc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003de0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de2:	f7fc fcdb 	bl	800079c <HAL_GetTick>
 8003de6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003de8:	e008      	b.n	8003dfc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003dea:	f7fc fcd7 	bl	800079c <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e006      	b.n	8003e0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003dfc:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <RCCEx_PLL2_Config+0x15c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	58024400 	.word	0x58024400
 8003e18:	ffff0007 	.word	0xffff0007

08003e1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e2a:	4b53      	ldr	r3, [pc, #332]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d101      	bne.n	8003e3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e099      	b.n	8003f6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e3a:	4b4f      	ldr	r3, [pc, #316]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a4e      	ldr	r2, [pc, #312]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e46:	f7fc fca9 	bl	800079c <HAL_GetTick>
 8003e4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e4c:	e008      	b.n	8003e60 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e4e:	f7fc fca5 	bl	800079c <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e086      	b.n	8003f6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e60:	4b45      	ldr	r3, [pc, #276]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f0      	bne.n	8003e4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e6c:	4b42      	ldr	r3, [pc, #264]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	051b      	lsls	r3, r3, #20
 8003e7a:	493f      	ldr	r1, [pc, #252]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	628b      	str	r3, [r1, #40]	; 0x28
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	025b      	lsls	r3, r3, #9
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	041b      	lsls	r3, r3, #16
 8003e9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	061b      	lsls	r3, r3, #24
 8003eac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003eb0:	4931      	ldr	r1, [pc, #196]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003eb6:	4b30      	ldr	r3, [pc, #192]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	492d      	ldr	r1, [pc, #180]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ec8:	4b2b      	ldr	r3, [pc, #172]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ecc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	4928      	ldr	r1, [pc, #160]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003eda:	4b27      	ldr	r3, [pc, #156]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	4a26      	ldr	r2, [pc, #152]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003ee6:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eea:	4b24      	ldr	r3, [pc, #144]	; (8003f7c <RCCEx_PLL3_Config+0x160>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	69d2      	ldr	r2, [r2, #28]
 8003ef2:	00d2      	lsls	r2, r2, #3
 8003ef4:	4920      	ldr	r1, [pc, #128]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003efa:	4b1f      	ldr	r3, [pc, #124]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	4a1e      	ldr	r2, [pc, #120]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d106      	bne.n	8003f1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f0c:	4b1a      	ldr	r3, [pc, #104]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	4a19      	ldr	r2, [pc, #100]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003f12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f18:	e00f      	b.n	8003f3a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d106      	bne.n	8003f2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f20:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	4a14      	ldr	r2, [pc, #80]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003f26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f2c:	e005      	b.n	8003f3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f2e:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	4a11      	ldr	r2, [pc, #68]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003f34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f3a:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a0e      	ldr	r2, [pc, #56]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f46:	f7fc fc29 	bl	800079c <HAL_GetTick>
 8003f4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f4c:	e008      	b.n	8003f60 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003f4e:	f7fc fc25 	bl	800079c <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e006      	b.n	8003f6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <RCCEx_PLL3_Config+0x15c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	58024400 	.word	0x58024400
 8003f7c:	ffff0007 	.word	0xffff0007

08003f80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e042      	b.n	8004018 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d106      	bne.n	8003faa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f005 fc77 	bl	8009898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2224      	movs	r2, #36	; 0x24
 8003fae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f8c4 	bl	8004150 <UART_SetConfig>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e022      	b.n	8004018 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f002 fa36 	bl	800644c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ffe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f002 fabd 	bl	8006590 <UART_CheckIdleState>
 8004016:	4603      	mov	r3, r0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08a      	sub	sp, #40	; 0x28
 8004024:	af02      	add	r7, sp, #8
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	4613      	mov	r3, r2
 800402e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004036:	2b20      	cmp	r3, #32
 8004038:	f040 8083 	bne.w	8004142 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_UART_Transmit+0x28>
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e07b      	b.n	8004144 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_UART_Transmit+0x3a>
 8004056:	2302      	movs	r3, #2
 8004058:	e074      	b.n	8004144 <HAL_UART_Transmit+0x124>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2221      	movs	r2, #33	; 0x21
 800406e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004072:	f7fc fb93 	bl	800079c <HAL_GetTick>
 8004076:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	88fa      	ldrh	r2, [r7, #6]
 800407c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	88fa      	ldrh	r2, [r7, #6]
 8004084:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004090:	d108      	bne.n	80040a4 <HAL_UART_Transmit+0x84>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d104      	bne.n	80040a4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	e003      	b.n	80040ac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040ac:	e02c      	b.n	8004108 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2200      	movs	r2, #0
 80040b6:	2180      	movs	r1, #128	; 0x80
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f002 fab1 	bl	8006620 <UART_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e03d      	b.n	8004144 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10b      	bne.n	80040e6 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	3302      	adds	r3, #2
 80040e2:	61bb      	str	r3, [r7, #24]
 80040e4:	e007      	b.n	80040f6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	781a      	ldrb	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	3301      	adds	r3, #1
 80040f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1cc      	bne.n	80040ae <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2200      	movs	r2, #0
 800411c:	2140      	movs	r1, #64	; 0x40
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f002 fa7e 	bl	8006620 <UART_WaitOnFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e00a      	b.n	8004144 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2220      	movs	r2, #32
 8004132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	e000      	b.n	8004144 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004142:	2302      	movs	r3, #2
  }
}
 8004144:	4618      	mov	r0, r3
 8004146:	3720      	adds	r7, #32
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	0000      	movs	r0, r0
	...

08004150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004150:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004154:	b090      	sub	sp, #64	; 0x40
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800415a:	2300      	movs	r3, #0
 800415c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004164:	2300      	movs	r3, #0
 8004166:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	4313      	orrs	r3, r2
 800417e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004184:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004186:	4313      	orrs	r3, r2
 8004188:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	4bc1      	ldr	r3, [pc, #772]	; (8004498 <UART_SetConfig+0x348>)
 8004192:	4013      	ands	r3, r2
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800419a:	430b      	orrs	r3, r1
 800419c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4ab7      	ldr	r2, [pc, #732]	; (800449c <UART_SetConfig+0x34c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d004      	beq.n	80041ce <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041ca:	4313      	orrs	r3, r2
 80041cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	4bb2      	ldr	r3, [pc, #712]	; (80044a0 <UART_SetConfig+0x350>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6812      	ldr	r2, [r2, #0]
 80041dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041de:	430b      	orrs	r3, r1
 80041e0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	f023 010f 	bic.w	r1, r3, #15
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4aa9      	ldr	r2, [pc, #676]	; (80044a4 <UART_SetConfig+0x354>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d177      	bne.n	80042f2 <UART_SetConfig+0x1a2>
 8004202:	4ba9      	ldr	r3, [pc, #676]	; (80044a8 <UART_SetConfig+0x358>)
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800420a:	2b28      	cmp	r3, #40	; 0x28
 800420c:	d86c      	bhi.n	80042e8 <UART_SetConfig+0x198>
 800420e:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <UART_SetConfig+0xc4>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	080042b9 	.word	0x080042b9
 8004218:	080042e9 	.word	0x080042e9
 800421c:	080042e9 	.word	0x080042e9
 8004220:	080042e9 	.word	0x080042e9
 8004224:	080042e9 	.word	0x080042e9
 8004228:	080042e9 	.word	0x080042e9
 800422c:	080042e9 	.word	0x080042e9
 8004230:	080042e9 	.word	0x080042e9
 8004234:	080042c1 	.word	0x080042c1
 8004238:	080042e9 	.word	0x080042e9
 800423c:	080042e9 	.word	0x080042e9
 8004240:	080042e9 	.word	0x080042e9
 8004244:	080042e9 	.word	0x080042e9
 8004248:	080042e9 	.word	0x080042e9
 800424c:	080042e9 	.word	0x080042e9
 8004250:	080042e9 	.word	0x080042e9
 8004254:	080042c9 	.word	0x080042c9
 8004258:	080042e9 	.word	0x080042e9
 800425c:	080042e9 	.word	0x080042e9
 8004260:	080042e9 	.word	0x080042e9
 8004264:	080042e9 	.word	0x080042e9
 8004268:	080042e9 	.word	0x080042e9
 800426c:	080042e9 	.word	0x080042e9
 8004270:	080042e9 	.word	0x080042e9
 8004274:	080042d1 	.word	0x080042d1
 8004278:	080042e9 	.word	0x080042e9
 800427c:	080042e9 	.word	0x080042e9
 8004280:	080042e9 	.word	0x080042e9
 8004284:	080042e9 	.word	0x080042e9
 8004288:	080042e9 	.word	0x080042e9
 800428c:	080042e9 	.word	0x080042e9
 8004290:	080042e9 	.word	0x080042e9
 8004294:	080042d9 	.word	0x080042d9
 8004298:	080042e9 	.word	0x080042e9
 800429c:	080042e9 	.word	0x080042e9
 80042a0:	080042e9 	.word	0x080042e9
 80042a4:	080042e9 	.word	0x080042e9
 80042a8:	080042e9 	.word	0x080042e9
 80042ac:	080042e9 	.word	0x080042e9
 80042b0:	080042e9 	.word	0x080042e9
 80042b4:	080042e1 	.word	0x080042e1
 80042b8:	2301      	movs	r3, #1
 80042ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80042be:	e233      	b.n	8004728 <UART_SetConfig+0x5d8>
 80042c0:	2304      	movs	r3, #4
 80042c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80042c6:	e22f      	b.n	8004728 <UART_SetConfig+0x5d8>
 80042c8:	2308      	movs	r3, #8
 80042ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80042ce:	e22b      	b.n	8004728 <UART_SetConfig+0x5d8>
 80042d0:	2310      	movs	r3, #16
 80042d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80042d6:	e227      	b.n	8004728 <UART_SetConfig+0x5d8>
 80042d8:	2320      	movs	r3, #32
 80042da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80042de:	e223      	b.n	8004728 <UART_SetConfig+0x5d8>
 80042e0:	2340      	movs	r3, #64	; 0x40
 80042e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80042e6:	e21f      	b.n	8004728 <UART_SetConfig+0x5d8>
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80042ee:	bf00      	nop
 80042f0:	e21a      	b.n	8004728 <UART_SetConfig+0x5d8>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a6d      	ldr	r2, [pc, #436]	; (80044ac <UART_SetConfig+0x35c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d132      	bne.n	8004362 <UART_SetConfig+0x212>
 80042fc:	4b6a      	ldr	r3, [pc, #424]	; (80044a8 <UART_SetConfig+0x358>)
 80042fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	2b05      	cmp	r3, #5
 8004306:	d827      	bhi.n	8004358 <UART_SetConfig+0x208>
 8004308:	a201      	add	r2, pc, #4	; (adr r2, 8004310 <UART_SetConfig+0x1c0>)
 800430a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430e:	bf00      	nop
 8004310:	08004329 	.word	0x08004329
 8004314:	08004331 	.word	0x08004331
 8004318:	08004339 	.word	0x08004339
 800431c:	08004341 	.word	0x08004341
 8004320:	08004349 	.word	0x08004349
 8004324:	08004351 	.word	0x08004351
 8004328:	2300      	movs	r3, #0
 800432a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800432e:	e1fb      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004330:	2304      	movs	r3, #4
 8004332:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004336:	e1f7      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004338:	2308      	movs	r3, #8
 800433a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800433e:	e1f3      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004340:	2310      	movs	r3, #16
 8004342:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004346:	e1ef      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004348:	2320      	movs	r3, #32
 800434a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800434e:	e1eb      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004350:	2340      	movs	r3, #64	; 0x40
 8004352:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004356:	e1e7      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800435e:	bf00      	nop
 8004360:	e1e2      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a52      	ldr	r2, [pc, #328]	; (80044b0 <UART_SetConfig+0x360>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d132      	bne.n	80043d2 <UART_SetConfig+0x282>
 800436c:	4b4e      	ldr	r3, [pc, #312]	; (80044a8 <UART_SetConfig+0x358>)
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	2b05      	cmp	r3, #5
 8004376:	d827      	bhi.n	80043c8 <UART_SetConfig+0x278>
 8004378:	a201      	add	r2, pc, #4	; (adr r2, 8004380 <UART_SetConfig+0x230>)
 800437a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437e:	bf00      	nop
 8004380:	08004399 	.word	0x08004399
 8004384:	080043a1 	.word	0x080043a1
 8004388:	080043a9 	.word	0x080043a9
 800438c:	080043b1 	.word	0x080043b1
 8004390:	080043b9 	.word	0x080043b9
 8004394:	080043c1 	.word	0x080043c1
 8004398:	2300      	movs	r3, #0
 800439a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800439e:	e1c3      	b.n	8004728 <UART_SetConfig+0x5d8>
 80043a0:	2304      	movs	r3, #4
 80043a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043a6:	e1bf      	b.n	8004728 <UART_SetConfig+0x5d8>
 80043a8:	2308      	movs	r3, #8
 80043aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043ae:	e1bb      	b.n	8004728 <UART_SetConfig+0x5d8>
 80043b0:	2310      	movs	r3, #16
 80043b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043b6:	e1b7      	b.n	8004728 <UART_SetConfig+0x5d8>
 80043b8:	2320      	movs	r3, #32
 80043ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043be:	e1b3      	b.n	8004728 <UART_SetConfig+0x5d8>
 80043c0:	2340      	movs	r3, #64	; 0x40
 80043c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043c6:	e1af      	b.n	8004728 <UART_SetConfig+0x5d8>
 80043c8:	2380      	movs	r3, #128	; 0x80
 80043ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80043ce:	bf00      	nop
 80043d0:	e1aa      	b.n	8004728 <UART_SetConfig+0x5d8>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a37      	ldr	r2, [pc, #220]	; (80044b4 <UART_SetConfig+0x364>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d132      	bne.n	8004442 <UART_SetConfig+0x2f2>
 80043dc:	4b32      	ldr	r3, [pc, #200]	; (80044a8 <UART_SetConfig+0x358>)
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	2b05      	cmp	r3, #5
 80043e6:	d827      	bhi.n	8004438 <UART_SetConfig+0x2e8>
 80043e8:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <UART_SetConfig+0x2a0>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	08004409 	.word	0x08004409
 80043f4:	08004411 	.word	0x08004411
 80043f8:	08004419 	.word	0x08004419
 80043fc:	08004421 	.word	0x08004421
 8004400:	08004429 	.word	0x08004429
 8004404:	08004431 	.word	0x08004431
 8004408:	2300      	movs	r3, #0
 800440a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800440e:	e18b      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004410:	2304      	movs	r3, #4
 8004412:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004416:	e187      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004418:	2308      	movs	r3, #8
 800441a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800441e:	e183      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004420:	2310      	movs	r3, #16
 8004422:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004426:	e17f      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004428:	2320      	movs	r3, #32
 800442a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800442e:	e17b      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004430:	2340      	movs	r3, #64	; 0x40
 8004432:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004436:	e177      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004438:	2380      	movs	r3, #128	; 0x80
 800443a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800443e:	bf00      	nop
 8004440:	e172      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1c      	ldr	r2, [pc, #112]	; (80044b8 <UART_SetConfig+0x368>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d144      	bne.n	80044d6 <UART_SetConfig+0x386>
 800444c:	4b16      	ldr	r3, [pc, #88]	; (80044a8 <UART_SetConfig+0x358>)
 800444e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	2b05      	cmp	r3, #5
 8004456:	d839      	bhi.n	80044cc <UART_SetConfig+0x37c>
 8004458:	a201      	add	r2, pc, #4	; (adr r2, 8004460 <UART_SetConfig+0x310>)
 800445a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445e:	bf00      	nop
 8004460:	08004479 	.word	0x08004479
 8004464:	08004481 	.word	0x08004481
 8004468:	08004489 	.word	0x08004489
 800446c:	08004491 	.word	0x08004491
 8004470:	080044bd 	.word	0x080044bd
 8004474:	080044c5 	.word	0x080044c5
 8004478:	2300      	movs	r3, #0
 800447a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800447e:	e153      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004480:	2304      	movs	r3, #4
 8004482:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004486:	e14f      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004488:	2308      	movs	r3, #8
 800448a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800448e:	e14b      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004490:	2310      	movs	r3, #16
 8004492:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004496:	e147      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004498:	cfff69f3 	.word	0xcfff69f3
 800449c:	58000c00 	.word	0x58000c00
 80044a0:	11fff4ff 	.word	0x11fff4ff
 80044a4:	40011000 	.word	0x40011000
 80044a8:	58024400 	.word	0x58024400
 80044ac:	40004400 	.word	0x40004400
 80044b0:	40004800 	.word	0x40004800
 80044b4:	40004c00 	.word	0x40004c00
 80044b8:	40005000 	.word	0x40005000
 80044bc:	2320      	movs	r3, #32
 80044be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044c2:	e131      	b.n	8004728 <UART_SetConfig+0x5d8>
 80044c4:	2340      	movs	r3, #64	; 0x40
 80044c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044ca:	e12d      	b.n	8004728 <UART_SetConfig+0x5d8>
 80044cc:	2380      	movs	r3, #128	; 0x80
 80044ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80044d2:	bf00      	nop
 80044d4:	e128      	b.n	8004728 <UART_SetConfig+0x5d8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4ac3      	ldr	r2, [pc, #780]	; (80047e8 <UART_SetConfig+0x698>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d178      	bne.n	80045d2 <UART_SetConfig+0x482>
 80044e0:	4bc2      	ldr	r3, [pc, #776]	; (80047ec <UART_SetConfig+0x69c>)
 80044e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044e8:	2b28      	cmp	r3, #40	; 0x28
 80044ea:	d86d      	bhi.n	80045c8 <UART_SetConfig+0x478>
 80044ec:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <UART_SetConfig+0x3a4>)
 80044ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f2:	bf00      	nop
 80044f4:	08004599 	.word	0x08004599
 80044f8:	080045c9 	.word	0x080045c9
 80044fc:	080045c9 	.word	0x080045c9
 8004500:	080045c9 	.word	0x080045c9
 8004504:	080045c9 	.word	0x080045c9
 8004508:	080045c9 	.word	0x080045c9
 800450c:	080045c9 	.word	0x080045c9
 8004510:	080045c9 	.word	0x080045c9
 8004514:	080045a1 	.word	0x080045a1
 8004518:	080045c9 	.word	0x080045c9
 800451c:	080045c9 	.word	0x080045c9
 8004520:	080045c9 	.word	0x080045c9
 8004524:	080045c9 	.word	0x080045c9
 8004528:	080045c9 	.word	0x080045c9
 800452c:	080045c9 	.word	0x080045c9
 8004530:	080045c9 	.word	0x080045c9
 8004534:	080045a9 	.word	0x080045a9
 8004538:	080045c9 	.word	0x080045c9
 800453c:	080045c9 	.word	0x080045c9
 8004540:	080045c9 	.word	0x080045c9
 8004544:	080045c9 	.word	0x080045c9
 8004548:	080045c9 	.word	0x080045c9
 800454c:	080045c9 	.word	0x080045c9
 8004550:	080045c9 	.word	0x080045c9
 8004554:	080045b1 	.word	0x080045b1
 8004558:	080045c9 	.word	0x080045c9
 800455c:	080045c9 	.word	0x080045c9
 8004560:	080045c9 	.word	0x080045c9
 8004564:	080045c9 	.word	0x080045c9
 8004568:	080045c9 	.word	0x080045c9
 800456c:	080045c9 	.word	0x080045c9
 8004570:	080045c9 	.word	0x080045c9
 8004574:	080045b9 	.word	0x080045b9
 8004578:	080045c9 	.word	0x080045c9
 800457c:	080045c9 	.word	0x080045c9
 8004580:	080045c9 	.word	0x080045c9
 8004584:	080045c9 	.word	0x080045c9
 8004588:	080045c9 	.word	0x080045c9
 800458c:	080045c9 	.word	0x080045c9
 8004590:	080045c9 	.word	0x080045c9
 8004594:	080045c1 	.word	0x080045c1
 8004598:	2301      	movs	r3, #1
 800459a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800459e:	e0c3      	b.n	8004728 <UART_SetConfig+0x5d8>
 80045a0:	2304      	movs	r3, #4
 80045a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045a6:	e0bf      	b.n	8004728 <UART_SetConfig+0x5d8>
 80045a8:	2308      	movs	r3, #8
 80045aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045ae:	e0bb      	b.n	8004728 <UART_SetConfig+0x5d8>
 80045b0:	2310      	movs	r3, #16
 80045b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045b6:	e0b7      	b.n	8004728 <UART_SetConfig+0x5d8>
 80045b8:	2320      	movs	r3, #32
 80045ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045be:	e0b3      	b.n	8004728 <UART_SetConfig+0x5d8>
 80045c0:	2340      	movs	r3, #64	; 0x40
 80045c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045c6:	e0af      	b.n	8004728 <UART_SetConfig+0x5d8>
 80045c8:	2380      	movs	r3, #128	; 0x80
 80045ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80045ce:	bf00      	nop
 80045d0:	e0aa      	b.n	8004728 <UART_SetConfig+0x5d8>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a86      	ldr	r2, [pc, #536]	; (80047f0 <UART_SetConfig+0x6a0>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d132      	bne.n	8004642 <UART_SetConfig+0x4f2>
 80045dc:	4b83      	ldr	r3, [pc, #524]	; (80047ec <UART_SetConfig+0x69c>)
 80045de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	2b05      	cmp	r3, #5
 80045e6:	d827      	bhi.n	8004638 <UART_SetConfig+0x4e8>
 80045e8:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <UART_SetConfig+0x4a0>)
 80045ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ee:	bf00      	nop
 80045f0:	08004609 	.word	0x08004609
 80045f4:	08004611 	.word	0x08004611
 80045f8:	08004619 	.word	0x08004619
 80045fc:	08004621 	.word	0x08004621
 8004600:	08004629 	.word	0x08004629
 8004604:	08004631 	.word	0x08004631
 8004608:	2300      	movs	r3, #0
 800460a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800460e:	e08b      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004610:	2304      	movs	r3, #4
 8004612:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004616:	e087      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004618:	2308      	movs	r3, #8
 800461a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800461e:	e083      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004620:	2310      	movs	r3, #16
 8004622:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004626:	e07f      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004628:	2320      	movs	r3, #32
 800462a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800462e:	e07b      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004630:	2340      	movs	r3, #64	; 0x40
 8004632:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004636:	e077      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004638:	2380      	movs	r3, #128	; 0x80
 800463a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800463e:	bf00      	nop
 8004640:	e072      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a6b      	ldr	r2, [pc, #428]	; (80047f4 <UART_SetConfig+0x6a4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d132      	bne.n	80046b2 <UART_SetConfig+0x562>
 800464c:	4b67      	ldr	r3, [pc, #412]	; (80047ec <UART_SetConfig+0x69c>)
 800464e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	2b05      	cmp	r3, #5
 8004656:	d827      	bhi.n	80046a8 <UART_SetConfig+0x558>
 8004658:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <UART_SetConfig+0x510>)
 800465a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465e:	bf00      	nop
 8004660:	08004679 	.word	0x08004679
 8004664:	08004681 	.word	0x08004681
 8004668:	08004689 	.word	0x08004689
 800466c:	08004691 	.word	0x08004691
 8004670:	08004699 	.word	0x08004699
 8004674:	080046a1 	.word	0x080046a1
 8004678:	2300      	movs	r3, #0
 800467a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800467e:	e053      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004680:	2304      	movs	r3, #4
 8004682:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004686:	e04f      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004688:	2308      	movs	r3, #8
 800468a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800468e:	e04b      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004690:	2310      	movs	r3, #16
 8004692:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004696:	e047      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004698:	2320      	movs	r3, #32
 800469a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800469e:	e043      	b.n	8004728 <UART_SetConfig+0x5d8>
 80046a0:	2340      	movs	r3, #64	; 0x40
 80046a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80046a6:	e03f      	b.n	8004728 <UART_SetConfig+0x5d8>
 80046a8:	2380      	movs	r3, #128	; 0x80
 80046aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80046ae:	bf00      	nop
 80046b0:	e03a      	b.n	8004728 <UART_SetConfig+0x5d8>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a50      	ldr	r2, [pc, #320]	; (80047f8 <UART_SetConfig+0x6a8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d132      	bne.n	8004722 <UART_SetConfig+0x5d2>
 80046bc:	4b4b      	ldr	r3, [pc, #300]	; (80047ec <UART_SetConfig+0x69c>)
 80046be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	2b05      	cmp	r3, #5
 80046c6:	d827      	bhi.n	8004718 <UART_SetConfig+0x5c8>
 80046c8:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <UART_SetConfig+0x580>)
 80046ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ce:	bf00      	nop
 80046d0:	080046e9 	.word	0x080046e9
 80046d4:	080046f1 	.word	0x080046f1
 80046d8:	080046f9 	.word	0x080046f9
 80046dc:	08004701 	.word	0x08004701
 80046e0:	08004709 	.word	0x08004709
 80046e4:	08004711 	.word	0x08004711
 80046e8:	2302      	movs	r3, #2
 80046ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80046ee:	e01b      	b.n	8004728 <UART_SetConfig+0x5d8>
 80046f0:	2304      	movs	r3, #4
 80046f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80046f6:	e017      	b.n	8004728 <UART_SetConfig+0x5d8>
 80046f8:	2308      	movs	r3, #8
 80046fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80046fe:	e013      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004700:	2310      	movs	r3, #16
 8004702:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004706:	e00f      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004708:	2320      	movs	r3, #32
 800470a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800470e:	e00b      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004710:	2340      	movs	r3, #64	; 0x40
 8004712:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004716:	e007      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004718:	2380      	movs	r3, #128	; 0x80
 800471a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800471e:	bf00      	nop
 8004720:	e002      	b.n	8004728 <UART_SetConfig+0x5d8>
 8004722:	2380      	movs	r3, #128	; 0x80
 8004724:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a32      	ldr	r2, [pc, #200]	; (80047f8 <UART_SetConfig+0x6a8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	f040 86f7 	bne.w	8005522 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004734:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004738:	2b08      	cmp	r3, #8
 800473a:	f000 80c0 	beq.w	80048be <UART_SetConfig+0x76e>
 800473e:	2b08      	cmp	r3, #8
 8004740:	dc04      	bgt.n	800474c <UART_SetConfig+0x5fc>
 8004742:	2b02      	cmp	r3, #2
 8004744:	d00c      	beq.n	8004760 <UART_SetConfig+0x610>
 8004746:	2b04      	cmp	r3, #4
 8004748:	d065      	beq.n	8004816 <UART_SetConfig+0x6c6>
 800474a:	e27a      	b.n	8004c42 <UART_SetConfig+0xaf2>
 800474c:	2b20      	cmp	r3, #32
 800474e:	f000 81b0 	beq.w	8004ab2 <UART_SetConfig+0x962>
 8004752:	2b40      	cmp	r3, #64	; 0x40
 8004754:	f000 821e 	beq.w	8004b94 <UART_SetConfig+0xa44>
 8004758:	2b10      	cmp	r3, #16
 800475a:	f000 8104 	beq.w	8004966 <UART_SetConfig+0x816>
 800475e:	e270      	b.n	8004c42 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004760:	f7fe fffc 	bl	800375c <HAL_RCCEx_GetD3PCLK1Freq>
 8004764:	4602      	mov	r2, r0
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	2b00      	cmp	r3, #0
 800476c:	d04e      	beq.n	800480c <UART_SetConfig+0x6bc>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	2b01      	cmp	r3, #1
 8004774:	d048      	beq.n	8004808 <UART_SetConfig+0x6b8>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	2b02      	cmp	r3, #2
 800477c:	d042      	beq.n	8004804 <UART_SetConfig+0x6b4>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	2b03      	cmp	r3, #3
 8004784:	d03c      	beq.n	8004800 <UART_SetConfig+0x6b0>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	2b04      	cmp	r3, #4
 800478c:	d036      	beq.n	80047fc <UART_SetConfig+0x6ac>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	2b05      	cmp	r3, #5
 8004794:	d026      	beq.n	80047e4 <UART_SetConfig+0x694>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	2b06      	cmp	r3, #6
 800479c:	d020      	beq.n	80047e0 <UART_SetConfig+0x690>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	2b07      	cmp	r3, #7
 80047a4:	d01a      	beq.n	80047dc <UART_SetConfig+0x68c>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d014      	beq.n	80047d8 <UART_SetConfig+0x688>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	2b09      	cmp	r3, #9
 80047b4:	d00e      	beq.n	80047d4 <UART_SetConfig+0x684>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	2b0a      	cmp	r3, #10
 80047bc:	d008      	beq.n	80047d0 <UART_SetConfig+0x680>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	2b0b      	cmp	r3, #11
 80047c4:	d102      	bne.n	80047cc <UART_SetConfig+0x67c>
 80047c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047ca:	e020      	b.n	800480e <UART_SetConfig+0x6be>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e01e      	b.n	800480e <UART_SetConfig+0x6be>
 80047d0:	2380      	movs	r3, #128	; 0x80
 80047d2:	e01c      	b.n	800480e <UART_SetConfig+0x6be>
 80047d4:	2340      	movs	r3, #64	; 0x40
 80047d6:	e01a      	b.n	800480e <UART_SetConfig+0x6be>
 80047d8:	2320      	movs	r3, #32
 80047da:	e018      	b.n	800480e <UART_SetConfig+0x6be>
 80047dc:	2310      	movs	r3, #16
 80047de:	e016      	b.n	800480e <UART_SetConfig+0x6be>
 80047e0:	230c      	movs	r3, #12
 80047e2:	e014      	b.n	800480e <UART_SetConfig+0x6be>
 80047e4:	230a      	movs	r3, #10
 80047e6:	e012      	b.n	800480e <UART_SetConfig+0x6be>
 80047e8:	40011400 	.word	0x40011400
 80047ec:	58024400 	.word	0x58024400
 80047f0:	40007800 	.word	0x40007800
 80047f4:	40007c00 	.word	0x40007c00
 80047f8:	58000c00 	.word	0x58000c00
 80047fc:	2308      	movs	r3, #8
 80047fe:	e006      	b.n	800480e <UART_SetConfig+0x6be>
 8004800:	2306      	movs	r3, #6
 8004802:	e004      	b.n	800480e <UART_SetConfig+0x6be>
 8004804:	2304      	movs	r3, #4
 8004806:	e002      	b.n	800480e <UART_SetConfig+0x6be>
 8004808:	2302      	movs	r3, #2
 800480a:	e000      	b.n	800480e <UART_SetConfig+0x6be>
 800480c:	2301      	movs	r3, #1
 800480e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004812:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004814:	e219      	b.n	8004c4a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004816:	f107 0318 	add.w	r3, r7, #24
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe ffb4 	bl	8003788 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	2b00      	cmp	r3, #0
 8004828:	d044      	beq.n	80048b4 <UART_SetConfig+0x764>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	2b01      	cmp	r3, #1
 8004830:	d03e      	beq.n	80048b0 <UART_SetConfig+0x760>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	2b02      	cmp	r3, #2
 8004838:	d038      	beq.n	80048ac <UART_SetConfig+0x75c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	2b03      	cmp	r3, #3
 8004840:	d032      	beq.n	80048a8 <UART_SetConfig+0x758>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	2b04      	cmp	r3, #4
 8004848:	d02c      	beq.n	80048a4 <UART_SetConfig+0x754>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	2b05      	cmp	r3, #5
 8004850:	d026      	beq.n	80048a0 <UART_SetConfig+0x750>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	2b06      	cmp	r3, #6
 8004858:	d020      	beq.n	800489c <UART_SetConfig+0x74c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	2b07      	cmp	r3, #7
 8004860:	d01a      	beq.n	8004898 <UART_SetConfig+0x748>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	2b08      	cmp	r3, #8
 8004868:	d014      	beq.n	8004894 <UART_SetConfig+0x744>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	2b09      	cmp	r3, #9
 8004870:	d00e      	beq.n	8004890 <UART_SetConfig+0x740>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	2b0a      	cmp	r3, #10
 8004878:	d008      	beq.n	800488c <UART_SetConfig+0x73c>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	2b0b      	cmp	r3, #11
 8004880:	d102      	bne.n	8004888 <UART_SetConfig+0x738>
 8004882:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004886:	e016      	b.n	80048b6 <UART_SetConfig+0x766>
 8004888:	2301      	movs	r3, #1
 800488a:	e014      	b.n	80048b6 <UART_SetConfig+0x766>
 800488c:	2380      	movs	r3, #128	; 0x80
 800488e:	e012      	b.n	80048b6 <UART_SetConfig+0x766>
 8004890:	2340      	movs	r3, #64	; 0x40
 8004892:	e010      	b.n	80048b6 <UART_SetConfig+0x766>
 8004894:	2320      	movs	r3, #32
 8004896:	e00e      	b.n	80048b6 <UART_SetConfig+0x766>
 8004898:	2310      	movs	r3, #16
 800489a:	e00c      	b.n	80048b6 <UART_SetConfig+0x766>
 800489c:	230c      	movs	r3, #12
 800489e:	e00a      	b.n	80048b6 <UART_SetConfig+0x766>
 80048a0:	230a      	movs	r3, #10
 80048a2:	e008      	b.n	80048b6 <UART_SetConfig+0x766>
 80048a4:	2308      	movs	r3, #8
 80048a6:	e006      	b.n	80048b6 <UART_SetConfig+0x766>
 80048a8:	2306      	movs	r3, #6
 80048aa:	e004      	b.n	80048b6 <UART_SetConfig+0x766>
 80048ac:	2304      	movs	r3, #4
 80048ae:	e002      	b.n	80048b6 <UART_SetConfig+0x766>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e000      	b.n	80048b6 <UART_SetConfig+0x766>
 80048b4:	2301      	movs	r3, #1
 80048b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048bc:	e1c5      	b.n	8004c4a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048be:	f107 030c 	add.w	r3, r7, #12
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff f8ac 	bl	8003a20 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d044      	beq.n	800495c <UART_SetConfig+0x80c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d03e      	beq.n	8004958 <UART_SetConfig+0x808>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d038      	beq.n	8004954 <UART_SetConfig+0x804>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d032      	beq.n	8004950 <UART_SetConfig+0x800>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d02c      	beq.n	800494c <UART_SetConfig+0x7fc>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	2b05      	cmp	r3, #5
 80048f8:	d026      	beq.n	8004948 <UART_SetConfig+0x7f8>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	2b06      	cmp	r3, #6
 8004900:	d020      	beq.n	8004944 <UART_SetConfig+0x7f4>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	2b07      	cmp	r3, #7
 8004908:	d01a      	beq.n	8004940 <UART_SetConfig+0x7f0>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	2b08      	cmp	r3, #8
 8004910:	d014      	beq.n	800493c <UART_SetConfig+0x7ec>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	2b09      	cmp	r3, #9
 8004918:	d00e      	beq.n	8004938 <UART_SetConfig+0x7e8>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	2b0a      	cmp	r3, #10
 8004920:	d008      	beq.n	8004934 <UART_SetConfig+0x7e4>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	2b0b      	cmp	r3, #11
 8004928:	d102      	bne.n	8004930 <UART_SetConfig+0x7e0>
 800492a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800492e:	e016      	b.n	800495e <UART_SetConfig+0x80e>
 8004930:	2301      	movs	r3, #1
 8004932:	e014      	b.n	800495e <UART_SetConfig+0x80e>
 8004934:	2380      	movs	r3, #128	; 0x80
 8004936:	e012      	b.n	800495e <UART_SetConfig+0x80e>
 8004938:	2340      	movs	r3, #64	; 0x40
 800493a:	e010      	b.n	800495e <UART_SetConfig+0x80e>
 800493c:	2320      	movs	r3, #32
 800493e:	e00e      	b.n	800495e <UART_SetConfig+0x80e>
 8004940:	2310      	movs	r3, #16
 8004942:	e00c      	b.n	800495e <UART_SetConfig+0x80e>
 8004944:	230c      	movs	r3, #12
 8004946:	e00a      	b.n	800495e <UART_SetConfig+0x80e>
 8004948:	230a      	movs	r3, #10
 800494a:	e008      	b.n	800495e <UART_SetConfig+0x80e>
 800494c:	2308      	movs	r3, #8
 800494e:	e006      	b.n	800495e <UART_SetConfig+0x80e>
 8004950:	2306      	movs	r3, #6
 8004952:	e004      	b.n	800495e <UART_SetConfig+0x80e>
 8004954:	2304      	movs	r3, #4
 8004956:	e002      	b.n	800495e <UART_SetConfig+0x80e>
 8004958:	2302      	movs	r3, #2
 800495a:	e000      	b.n	800495e <UART_SetConfig+0x80e>
 800495c:	2301      	movs	r3, #1
 800495e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004962:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004964:	e171      	b.n	8004c4a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004966:	4b7a      	ldr	r3, [pc, #488]	; (8004b50 <UART_SetConfig+0xa00>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b00      	cmp	r3, #0
 8004970:	d054      	beq.n	8004a1c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004972:	4b77      	ldr	r3, [pc, #476]	; (8004b50 <UART_SetConfig+0xa00>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	08db      	lsrs	r3, r3, #3
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	4a75      	ldr	r2, [pc, #468]	; (8004b54 <UART_SetConfig+0xa04>)
 800497e:	40da      	lsrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	2b00      	cmp	r3, #0
 8004986:	d044      	beq.n	8004a12 <UART_SetConfig+0x8c2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	2b01      	cmp	r3, #1
 800498e:	d03e      	beq.n	8004a0e <UART_SetConfig+0x8be>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	2b02      	cmp	r3, #2
 8004996:	d038      	beq.n	8004a0a <UART_SetConfig+0x8ba>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	2b03      	cmp	r3, #3
 800499e:	d032      	beq.n	8004a06 <UART_SetConfig+0x8b6>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d02c      	beq.n	8004a02 <UART_SetConfig+0x8b2>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	2b05      	cmp	r3, #5
 80049ae:	d026      	beq.n	80049fe <UART_SetConfig+0x8ae>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	2b06      	cmp	r3, #6
 80049b6:	d020      	beq.n	80049fa <UART_SetConfig+0x8aa>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	2b07      	cmp	r3, #7
 80049be:	d01a      	beq.n	80049f6 <UART_SetConfig+0x8a6>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d014      	beq.n	80049f2 <UART_SetConfig+0x8a2>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	2b09      	cmp	r3, #9
 80049ce:	d00e      	beq.n	80049ee <UART_SetConfig+0x89e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	2b0a      	cmp	r3, #10
 80049d6:	d008      	beq.n	80049ea <UART_SetConfig+0x89a>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	2b0b      	cmp	r3, #11
 80049de:	d102      	bne.n	80049e6 <UART_SetConfig+0x896>
 80049e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049e4:	e016      	b.n	8004a14 <UART_SetConfig+0x8c4>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e014      	b.n	8004a14 <UART_SetConfig+0x8c4>
 80049ea:	2380      	movs	r3, #128	; 0x80
 80049ec:	e012      	b.n	8004a14 <UART_SetConfig+0x8c4>
 80049ee:	2340      	movs	r3, #64	; 0x40
 80049f0:	e010      	b.n	8004a14 <UART_SetConfig+0x8c4>
 80049f2:	2320      	movs	r3, #32
 80049f4:	e00e      	b.n	8004a14 <UART_SetConfig+0x8c4>
 80049f6:	2310      	movs	r3, #16
 80049f8:	e00c      	b.n	8004a14 <UART_SetConfig+0x8c4>
 80049fa:	230c      	movs	r3, #12
 80049fc:	e00a      	b.n	8004a14 <UART_SetConfig+0x8c4>
 80049fe:	230a      	movs	r3, #10
 8004a00:	e008      	b.n	8004a14 <UART_SetConfig+0x8c4>
 8004a02:	2308      	movs	r3, #8
 8004a04:	e006      	b.n	8004a14 <UART_SetConfig+0x8c4>
 8004a06:	2306      	movs	r3, #6
 8004a08:	e004      	b.n	8004a14 <UART_SetConfig+0x8c4>
 8004a0a:	2304      	movs	r3, #4
 8004a0c:	e002      	b.n	8004a14 <UART_SetConfig+0x8c4>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e000      	b.n	8004a14 <UART_SetConfig+0x8c4>
 8004a12:	2301      	movs	r3, #1
 8004a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8004a1a:	e116      	b.n	8004c4a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d043      	beq.n	8004aac <UART_SetConfig+0x95c>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d03d      	beq.n	8004aa8 <UART_SetConfig+0x958>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d037      	beq.n	8004aa4 <UART_SetConfig+0x954>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d031      	beq.n	8004aa0 <UART_SetConfig+0x950>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d02b      	beq.n	8004a9c <UART_SetConfig+0x94c>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	2b05      	cmp	r3, #5
 8004a4a:	d025      	beq.n	8004a98 <UART_SetConfig+0x948>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	2b06      	cmp	r3, #6
 8004a52:	d01f      	beq.n	8004a94 <UART_SetConfig+0x944>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	2b07      	cmp	r3, #7
 8004a5a:	d019      	beq.n	8004a90 <UART_SetConfig+0x940>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d013      	beq.n	8004a8c <UART_SetConfig+0x93c>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	2b09      	cmp	r3, #9
 8004a6a:	d00d      	beq.n	8004a88 <UART_SetConfig+0x938>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	2b0a      	cmp	r3, #10
 8004a72:	d007      	beq.n	8004a84 <UART_SetConfig+0x934>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	2b0b      	cmp	r3, #11
 8004a7a:	d101      	bne.n	8004a80 <UART_SetConfig+0x930>
 8004a7c:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <UART_SetConfig+0xa08>)
 8004a7e:	e016      	b.n	8004aae <UART_SetConfig+0x95e>
 8004a80:	4b34      	ldr	r3, [pc, #208]	; (8004b54 <UART_SetConfig+0xa04>)
 8004a82:	e014      	b.n	8004aae <UART_SetConfig+0x95e>
 8004a84:	4b35      	ldr	r3, [pc, #212]	; (8004b5c <UART_SetConfig+0xa0c>)
 8004a86:	e012      	b.n	8004aae <UART_SetConfig+0x95e>
 8004a88:	4b35      	ldr	r3, [pc, #212]	; (8004b60 <UART_SetConfig+0xa10>)
 8004a8a:	e010      	b.n	8004aae <UART_SetConfig+0x95e>
 8004a8c:	4b35      	ldr	r3, [pc, #212]	; (8004b64 <UART_SetConfig+0xa14>)
 8004a8e:	e00e      	b.n	8004aae <UART_SetConfig+0x95e>
 8004a90:	4b35      	ldr	r3, [pc, #212]	; (8004b68 <UART_SetConfig+0xa18>)
 8004a92:	e00c      	b.n	8004aae <UART_SetConfig+0x95e>
 8004a94:	4b35      	ldr	r3, [pc, #212]	; (8004b6c <UART_SetConfig+0xa1c>)
 8004a96:	e00a      	b.n	8004aae <UART_SetConfig+0x95e>
 8004a98:	4b35      	ldr	r3, [pc, #212]	; (8004b70 <UART_SetConfig+0xa20>)
 8004a9a:	e008      	b.n	8004aae <UART_SetConfig+0x95e>
 8004a9c:	4b35      	ldr	r3, [pc, #212]	; (8004b74 <UART_SetConfig+0xa24>)
 8004a9e:	e006      	b.n	8004aae <UART_SetConfig+0x95e>
 8004aa0:	4b35      	ldr	r3, [pc, #212]	; (8004b78 <UART_SetConfig+0xa28>)
 8004aa2:	e004      	b.n	8004aae <UART_SetConfig+0x95e>
 8004aa4:	4b35      	ldr	r3, [pc, #212]	; (8004b7c <UART_SetConfig+0xa2c>)
 8004aa6:	e002      	b.n	8004aae <UART_SetConfig+0x95e>
 8004aa8:	4b35      	ldr	r3, [pc, #212]	; (8004b80 <UART_SetConfig+0xa30>)
 8004aaa:	e000      	b.n	8004aae <UART_SetConfig+0x95e>
 8004aac:	4b29      	ldr	r3, [pc, #164]	; (8004b54 <UART_SetConfig+0xa04>)
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ab0:	e0cb      	b.n	8004c4a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d046      	beq.n	8004b48 <UART_SetConfig+0x9f8>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d040      	beq.n	8004b44 <UART_SetConfig+0x9f4>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d03a      	beq.n	8004b40 <UART_SetConfig+0x9f0>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d034      	beq.n	8004b3c <UART_SetConfig+0x9ec>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d02e      	beq.n	8004b38 <UART_SetConfig+0x9e8>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	2b05      	cmp	r3, #5
 8004ae0:	d028      	beq.n	8004b34 <UART_SetConfig+0x9e4>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	2b06      	cmp	r3, #6
 8004ae8:	d022      	beq.n	8004b30 <UART_SetConfig+0x9e0>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	2b07      	cmp	r3, #7
 8004af0:	d01c      	beq.n	8004b2c <UART_SetConfig+0x9dc>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d016      	beq.n	8004b28 <UART_SetConfig+0x9d8>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	2b09      	cmp	r3, #9
 8004b00:	d00f      	beq.n	8004b22 <UART_SetConfig+0x9d2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	2b0a      	cmp	r3, #10
 8004b08:	d008      	beq.n	8004b1c <UART_SetConfig+0x9cc>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	2b0b      	cmp	r3, #11
 8004b10:	d102      	bne.n	8004b18 <UART_SetConfig+0x9c8>
 8004b12:	f643 5309 	movw	r3, #15625	; 0x3d09
 8004b16:	e018      	b.n	8004b4a <UART_SetConfig+0x9fa>
 8004b18:	4b13      	ldr	r3, [pc, #76]	; (8004b68 <UART_SetConfig+0xa18>)
 8004b1a:	e016      	b.n	8004b4a <UART_SetConfig+0x9fa>
 8004b1c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8004b20:	e013      	b.n	8004b4a <UART_SetConfig+0x9fa>
 8004b22:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004b26:	e010      	b.n	8004b4a <UART_SetConfig+0x9fa>
 8004b28:	4b16      	ldr	r3, [pc, #88]	; (8004b84 <UART_SetConfig+0xa34>)
 8004b2a:	e00e      	b.n	8004b4a <UART_SetConfig+0x9fa>
 8004b2c:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <UART_SetConfig+0xa08>)
 8004b2e:	e00c      	b.n	8004b4a <UART_SetConfig+0x9fa>
 8004b30:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <UART_SetConfig+0xa38>)
 8004b32:	e00a      	b.n	8004b4a <UART_SetConfig+0x9fa>
 8004b34:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <UART_SetConfig+0xa3c>)
 8004b36:	e008      	b.n	8004b4a <UART_SetConfig+0x9fa>
 8004b38:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <UART_SetConfig+0xa0c>)
 8004b3a:	e006      	b.n	8004b4a <UART_SetConfig+0x9fa>
 8004b3c:	4b14      	ldr	r3, [pc, #80]	; (8004b90 <UART_SetConfig+0xa40>)
 8004b3e:	e004      	b.n	8004b4a <UART_SetConfig+0x9fa>
 8004b40:	4b07      	ldr	r3, [pc, #28]	; (8004b60 <UART_SetConfig+0xa10>)
 8004b42:	e002      	b.n	8004b4a <UART_SetConfig+0x9fa>
 8004b44:	4b07      	ldr	r3, [pc, #28]	; (8004b64 <UART_SetConfig+0xa14>)
 8004b46:	e000      	b.n	8004b4a <UART_SetConfig+0x9fa>
 8004b48:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <UART_SetConfig+0xa18>)
 8004b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b4c:	e07d      	b.n	8004c4a <UART_SetConfig+0xafa>
 8004b4e:	bf00      	nop
 8004b50:	58024400 	.word	0x58024400
 8004b54:	03d09000 	.word	0x03d09000
 8004b58:	0003d090 	.word	0x0003d090
 8004b5c:	0007a120 	.word	0x0007a120
 8004b60:	000f4240 	.word	0x000f4240
 8004b64:	001e8480 	.word	0x001e8480
 8004b68:	003d0900 	.word	0x003d0900
 8004b6c:	00516155 	.word	0x00516155
 8004b70:	0061a800 	.word	0x0061a800
 8004b74:	007a1200 	.word	0x007a1200
 8004b78:	00a2c2aa 	.word	0x00a2c2aa
 8004b7c:	00f42400 	.word	0x00f42400
 8004b80:	01e84800 	.word	0x01e84800
 8004b84:	0001e848 	.word	0x0001e848
 8004b88:	00051615 	.word	0x00051615
 8004b8c:	00061a80 	.word	0x00061a80
 8004b90:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d04e      	beq.n	8004c3a <UART_SetConfig+0xaea>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d047      	beq.n	8004c34 <UART_SetConfig+0xae4>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d040      	beq.n	8004c2e <UART_SetConfig+0xade>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d039      	beq.n	8004c28 <UART_SetConfig+0xad8>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d032      	beq.n	8004c22 <UART_SetConfig+0xad2>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	2b05      	cmp	r3, #5
 8004bc2:	d02b      	beq.n	8004c1c <UART_SetConfig+0xacc>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	2b06      	cmp	r3, #6
 8004bca:	d024      	beq.n	8004c16 <UART_SetConfig+0xac6>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	2b07      	cmp	r3, #7
 8004bd2:	d01d      	beq.n	8004c10 <UART_SetConfig+0xac0>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d016      	beq.n	8004c0a <UART_SetConfig+0xaba>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	2b09      	cmp	r3, #9
 8004be2:	d00f      	beq.n	8004c04 <UART_SetConfig+0xab4>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	2b0a      	cmp	r3, #10
 8004bea:	d008      	beq.n	8004bfe <UART_SetConfig+0xaae>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	2b0b      	cmp	r3, #11
 8004bf2:	d101      	bne.n	8004bf8 <UART_SetConfig+0xaa8>
 8004bf4:	2380      	movs	r3, #128	; 0x80
 8004bf6:	e022      	b.n	8004c3e <UART_SetConfig+0xaee>
 8004bf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bfc:	e01f      	b.n	8004c3e <UART_SetConfig+0xaee>
 8004bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c02:	e01c      	b.n	8004c3e <UART_SetConfig+0xaee>
 8004c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c08:	e019      	b.n	8004c3e <UART_SetConfig+0xaee>
 8004c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c0e:	e016      	b.n	8004c3e <UART_SetConfig+0xaee>
 8004c10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c14:	e013      	b.n	8004c3e <UART_SetConfig+0xaee>
 8004c16:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004c1a:	e010      	b.n	8004c3e <UART_SetConfig+0xaee>
 8004c1c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004c20:	e00d      	b.n	8004c3e <UART_SetConfig+0xaee>
 8004c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c26:	e00a      	b.n	8004c3e <UART_SetConfig+0xaee>
 8004c28:	f241 5355 	movw	r3, #5461	; 0x1555
 8004c2c:	e007      	b.n	8004c3e <UART_SetConfig+0xaee>
 8004c2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c32:	e004      	b.n	8004c3e <UART_SetConfig+0xaee>
 8004c34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c38:	e001      	b.n	8004c3e <UART_SetConfig+0xaee>
 8004c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c40:	e003      	b.n	8004c4a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8004c48:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f001 83e8 	beq.w	8006422 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	4413      	add	r3, r2
 8004c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d305      	bcc.n	8004c6e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d904      	bls.n	8004c78 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c74:	f001 bbd5 	b.w	8006422 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8004c78:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	f000 8154 	beq.w	8004f2a <UART_SetConfig+0xdda>
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	dc06      	bgt.n	8004c94 <UART_SetConfig+0xb44>
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d00f      	beq.n	8004caa <UART_SetConfig+0xb5a>
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	f000 80ac 	beq.w	8004de8 <UART_SetConfig+0xc98>
 8004c90:	f000 bc30 	b.w	80054f4 <UART_SetConfig+0x13a4>
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	f000 832d 	beq.w	80052f4 <UART_SetConfig+0x11a4>
 8004c9a:	2b40      	cmp	r3, #64	; 0x40
 8004c9c:	f000 83a5 	beq.w	80053ea <UART_SetConfig+0x129a>
 8004ca0:	2b10      	cmp	r3, #16
 8004ca2:	f000 81e3 	beq.w	800506c <UART_SetConfig+0xf1c>
 8004ca6:	f000 bc25 	b.w	80054f4 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004caa:	f7fe fd57 	bl	800375c <HAL_RCCEx_GetD3PCLK1Freq>
 8004cae:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f04f 0100 	mov.w	r1, #0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d067      	beq.n	8004d90 <UART_SetConfig+0xc40>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d05e      	beq.n	8004d86 <UART_SetConfig+0xc36>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d055      	beq.n	8004d7c <UART_SetConfig+0xc2c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d04c      	beq.n	8004d72 <UART_SetConfig+0xc22>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d043      	beq.n	8004d68 <UART_SetConfig+0xc18>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	2b05      	cmp	r3, #5
 8004ce6:	d03a      	beq.n	8004d5e <UART_SetConfig+0xc0e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	2b06      	cmp	r3, #6
 8004cee:	d031      	beq.n	8004d54 <UART_SetConfig+0xc04>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	2b07      	cmp	r3, #7
 8004cf6:	d028      	beq.n	8004d4a <UART_SetConfig+0xbfa>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d01f      	beq.n	8004d40 <UART_SetConfig+0xbf0>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	2b09      	cmp	r3, #9
 8004d06:	d016      	beq.n	8004d36 <UART_SetConfig+0xbe6>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	2b0a      	cmp	r3, #10
 8004d0e:	d00d      	beq.n	8004d2c <UART_SetConfig+0xbdc>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	2b0b      	cmp	r3, #11
 8004d16:	d104      	bne.n	8004d22 <UART_SetConfig+0xbd2>
 8004d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d1c:	f04f 0400 	mov.w	r4, #0
 8004d20:	e03a      	b.n	8004d98 <UART_SetConfig+0xc48>
 8004d22:	f04f 0301 	mov.w	r3, #1
 8004d26:	f04f 0400 	mov.w	r4, #0
 8004d2a:	e035      	b.n	8004d98 <UART_SetConfig+0xc48>
 8004d2c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004d30:	f04f 0400 	mov.w	r4, #0
 8004d34:	e030      	b.n	8004d98 <UART_SetConfig+0xc48>
 8004d36:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004d3a:	f04f 0400 	mov.w	r4, #0
 8004d3e:	e02b      	b.n	8004d98 <UART_SetConfig+0xc48>
 8004d40:	f04f 0320 	mov.w	r3, #32
 8004d44:	f04f 0400 	mov.w	r4, #0
 8004d48:	e026      	b.n	8004d98 <UART_SetConfig+0xc48>
 8004d4a:	f04f 0310 	mov.w	r3, #16
 8004d4e:	f04f 0400 	mov.w	r4, #0
 8004d52:	e021      	b.n	8004d98 <UART_SetConfig+0xc48>
 8004d54:	f04f 030c 	mov.w	r3, #12
 8004d58:	f04f 0400 	mov.w	r4, #0
 8004d5c:	e01c      	b.n	8004d98 <UART_SetConfig+0xc48>
 8004d5e:	f04f 030a 	mov.w	r3, #10
 8004d62:	f04f 0400 	mov.w	r4, #0
 8004d66:	e017      	b.n	8004d98 <UART_SetConfig+0xc48>
 8004d68:	f04f 0308 	mov.w	r3, #8
 8004d6c:	f04f 0400 	mov.w	r4, #0
 8004d70:	e012      	b.n	8004d98 <UART_SetConfig+0xc48>
 8004d72:	f04f 0306 	mov.w	r3, #6
 8004d76:	f04f 0400 	mov.w	r4, #0
 8004d7a:	e00d      	b.n	8004d98 <UART_SetConfig+0xc48>
 8004d7c:	f04f 0304 	mov.w	r3, #4
 8004d80:	f04f 0400 	mov.w	r4, #0
 8004d84:	e008      	b.n	8004d98 <UART_SetConfig+0xc48>
 8004d86:	f04f 0302 	mov.w	r3, #2
 8004d8a:	f04f 0400 	mov.w	r4, #0
 8004d8e:	e003      	b.n	8004d98 <UART_SetConfig+0xc48>
 8004d90:	f04f 0301 	mov.w	r3, #1
 8004d94:	f04f 0400 	mov.w	r4, #0
 8004d98:	461a      	mov	r2, r3
 8004d9a:	4623      	mov	r3, r4
 8004d9c:	f7fb faf8 	bl	8000390 <__aeabi_uldivmod>
 8004da0:	4603      	mov	r3, r0
 8004da2:	460c      	mov	r4, r1
 8004da4:	4619      	mov	r1, r3
 8004da6:	4622      	mov	r2, r4
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	f04f 0400 	mov.w	r4, #0
 8004db0:	0214      	lsls	r4, r2, #8
 8004db2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004db6:	020b      	lsls	r3, r1, #8
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6852      	ldr	r2, [r2, #4]
 8004dbc:	0852      	lsrs	r2, r2, #1
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	eb13 0b01 	adds.w	fp, r3, r1
 8004dc8:	eb44 0c02 	adc.w	ip, r4, r2
 8004dcc:	4658      	mov	r0, fp
 8004dce:	4661      	mov	r1, ip
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f04f 0400 	mov.w	r4, #0
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4623      	mov	r3, r4
 8004ddc:	f7fb fad8 	bl	8000390 <__aeabi_uldivmod>
 8004de0:	4603      	mov	r3, r0
 8004de2:	460c      	mov	r4, r1
 8004de4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004de6:	e389      	b.n	80054fc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004de8:	f107 0318 	add.w	r3, r7, #24
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fe fccb 	bl	8003788 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f04f 0100 	mov.w	r1, #0
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d067      	beq.n	8004ed2 <UART_SetConfig+0xd82>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d05e      	beq.n	8004ec8 <UART_SetConfig+0xd78>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d055      	beq.n	8004ebe <UART_SetConfig+0xd6e>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d04c      	beq.n	8004eb4 <UART_SetConfig+0xd64>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d043      	beq.n	8004eaa <UART_SetConfig+0xd5a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	2b05      	cmp	r3, #5
 8004e28:	d03a      	beq.n	8004ea0 <UART_SetConfig+0xd50>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	2b06      	cmp	r3, #6
 8004e30:	d031      	beq.n	8004e96 <UART_SetConfig+0xd46>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	2b07      	cmp	r3, #7
 8004e38:	d028      	beq.n	8004e8c <UART_SetConfig+0xd3c>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	2b08      	cmp	r3, #8
 8004e40:	d01f      	beq.n	8004e82 <UART_SetConfig+0xd32>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	2b09      	cmp	r3, #9
 8004e48:	d016      	beq.n	8004e78 <UART_SetConfig+0xd28>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	2b0a      	cmp	r3, #10
 8004e50:	d00d      	beq.n	8004e6e <UART_SetConfig+0xd1e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	2b0b      	cmp	r3, #11
 8004e58:	d104      	bne.n	8004e64 <UART_SetConfig+0xd14>
 8004e5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e5e:	f04f 0400 	mov.w	r4, #0
 8004e62:	e03a      	b.n	8004eda <UART_SetConfig+0xd8a>
 8004e64:	f04f 0301 	mov.w	r3, #1
 8004e68:	f04f 0400 	mov.w	r4, #0
 8004e6c:	e035      	b.n	8004eda <UART_SetConfig+0xd8a>
 8004e6e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004e72:	f04f 0400 	mov.w	r4, #0
 8004e76:	e030      	b.n	8004eda <UART_SetConfig+0xd8a>
 8004e78:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004e7c:	f04f 0400 	mov.w	r4, #0
 8004e80:	e02b      	b.n	8004eda <UART_SetConfig+0xd8a>
 8004e82:	f04f 0320 	mov.w	r3, #32
 8004e86:	f04f 0400 	mov.w	r4, #0
 8004e8a:	e026      	b.n	8004eda <UART_SetConfig+0xd8a>
 8004e8c:	f04f 0310 	mov.w	r3, #16
 8004e90:	f04f 0400 	mov.w	r4, #0
 8004e94:	e021      	b.n	8004eda <UART_SetConfig+0xd8a>
 8004e96:	f04f 030c 	mov.w	r3, #12
 8004e9a:	f04f 0400 	mov.w	r4, #0
 8004e9e:	e01c      	b.n	8004eda <UART_SetConfig+0xd8a>
 8004ea0:	f04f 030a 	mov.w	r3, #10
 8004ea4:	f04f 0400 	mov.w	r4, #0
 8004ea8:	e017      	b.n	8004eda <UART_SetConfig+0xd8a>
 8004eaa:	f04f 0308 	mov.w	r3, #8
 8004eae:	f04f 0400 	mov.w	r4, #0
 8004eb2:	e012      	b.n	8004eda <UART_SetConfig+0xd8a>
 8004eb4:	f04f 0306 	mov.w	r3, #6
 8004eb8:	f04f 0400 	mov.w	r4, #0
 8004ebc:	e00d      	b.n	8004eda <UART_SetConfig+0xd8a>
 8004ebe:	f04f 0304 	mov.w	r3, #4
 8004ec2:	f04f 0400 	mov.w	r4, #0
 8004ec6:	e008      	b.n	8004eda <UART_SetConfig+0xd8a>
 8004ec8:	f04f 0302 	mov.w	r3, #2
 8004ecc:	f04f 0400 	mov.w	r4, #0
 8004ed0:	e003      	b.n	8004eda <UART_SetConfig+0xd8a>
 8004ed2:	f04f 0301 	mov.w	r3, #1
 8004ed6:	f04f 0400 	mov.w	r4, #0
 8004eda:	461a      	mov	r2, r3
 8004edc:	4623      	mov	r3, r4
 8004ede:	f7fb fa57 	bl	8000390 <__aeabi_uldivmod>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4622      	mov	r2, r4
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	f04f 0400 	mov.w	r4, #0
 8004ef2:	0214      	lsls	r4, r2, #8
 8004ef4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004ef8:	020b      	lsls	r3, r1, #8
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6852      	ldr	r2, [r2, #4]
 8004efe:	0852      	lsrs	r2, r2, #1
 8004f00:	4611      	mov	r1, r2
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	eb13 0b01 	adds.w	fp, r3, r1
 8004f0a:	eb44 0c02 	adc.w	ip, r4, r2
 8004f0e:	4658      	mov	r0, fp
 8004f10:	4661      	mov	r1, ip
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f04f 0400 	mov.w	r4, #0
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	4623      	mov	r3, r4
 8004f1e:	f7fb fa37 	bl	8000390 <__aeabi_uldivmod>
 8004f22:	4603      	mov	r3, r0
 8004f24:	460c      	mov	r4, r1
 8004f26:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004f28:	e2e8      	b.n	80054fc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f2a:	f107 030c 	add.w	r3, r7, #12
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fe fd76 	bl	8003a20 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f04f 0100 	mov.w	r1, #0
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d067      	beq.n	8005014 <UART_SetConfig+0xec4>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d05e      	beq.n	800500a <UART_SetConfig+0xeba>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d055      	beq.n	8005000 <UART_SetConfig+0xeb0>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d04c      	beq.n	8004ff6 <UART_SetConfig+0xea6>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d043      	beq.n	8004fec <UART_SetConfig+0xe9c>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	2b05      	cmp	r3, #5
 8004f6a:	d03a      	beq.n	8004fe2 <UART_SetConfig+0xe92>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	2b06      	cmp	r3, #6
 8004f72:	d031      	beq.n	8004fd8 <UART_SetConfig+0xe88>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	2b07      	cmp	r3, #7
 8004f7a:	d028      	beq.n	8004fce <UART_SetConfig+0xe7e>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d01f      	beq.n	8004fc4 <UART_SetConfig+0xe74>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	2b09      	cmp	r3, #9
 8004f8a:	d016      	beq.n	8004fba <UART_SetConfig+0xe6a>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	2b0a      	cmp	r3, #10
 8004f92:	d00d      	beq.n	8004fb0 <UART_SetConfig+0xe60>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	2b0b      	cmp	r3, #11
 8004f9a:	d104      	bne.n	8004fa6 <UART_SetConfig+0xe56>
 8004f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fa0:	f04f 0400 	mov.w	r4, #0
 8004fa4:	e03a      	b.n	800501c <UART_SetConfig+0xecc>
 8004fa6:	f04f 0301 	mov.w	r3, #1
 8004faa:	f04f 0400 	mov.w	r4, #0
 8004fae:	e035      	b.n	800501c <UART_SetConfig+0xecc>
 8004fb0:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004fb4:	f04f 0400 	mov.w	r4, #0
 8004fb8:	e030      	b.n	800501c <UART_SetConfig+0xecc>
 8004fba:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004fbe:	f04f 0400 	mov.w	r4, #0
 8004fc2:	e02b      	b.n	800501c <UART_SetConfig+0xecc>
 8004fc4:	f04f 0320 	mov.w	r3, #32
 8004fc8:	f04f 0400 	mov.w	r4, #0
 8004fcc:	e026      	b.n	800501c <UART_SetConfig+0xecc>
 8004fce:	f04f 0310 	mov.w	r3, #16
 8004fd2:	f04f 0400 	mov.w	r4, #0
 8004fd6:	e021      	b.n	800501c <UART_SetConfig+0xecc>
 8004fd8:	f04f 030c 	mov.w	r3, #12
 8004fdc:	f04f 0400 	mov.w	r4, #0
 8004fe0:	e01c      	b.n	800501c <UART_SetConfig+0xecc>
 8004fe2:	f04f 030a 	mov.w	r3, #10
 8004fe6:	f04f 0400 	mov.w	r4, #0
 8004fea:	e017      	b.n	800501c <UART_SetConfig+0xecc>
 8004fec:	f04f 0308 	mov.w	r3, #8
 8004ff0:	f04f 0400 	mov.w	r4, #0
 8004ff4:	e012      	b.n	800501c <UART_SetConfig+0xecc>
 8004ff6:	f04f 0306 	mov.w	r3, #6
 8004ffa:	f04f 0400 	mov.w	r4, #0
 8004ffe:	e00d      	b.n	800501c <UART_SetConfig+0xecc>
 8005000:	f04f 0304 	mov.w	r3, #4
 8005004:	f04f 0400 	mov.w	r4, #0
 8005008:	e008      	b.n	800501c <UART_SetConfig+0xecc>
 800500a:	f04f 0302 	mov.w	r3, #2
 800500e:	f04f 0400 	mov.w	r4, #0
 8005012:	e003      	b.n	800501c <UART_SetConfig+0xecc>
 8005014:	f04f 0301 	mov.w	r3, #1
 8005018:	f04f 0400 	mov.w	r4, #0
 800501c:	461a      	mov	r2, r3
 800501e:	4623      	mov	r3, r4
 8005020:	f7fb f9b6 	bl	8000390 <__aeabi_uldivmod>
 8005024:	4603      	mov	r3, r0
 8005026:	460c      	mov	r4, r1
 8005028:	4619      	mov	r1, r3
 800502a:	4622      	mov	r2, r4
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	f04f 0400 	mov.w	r4, #0
 8005034:	0214      	lsls	r4, r2, #8
 8005036:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800503a:	020b      	lsls	r3, r1, #8
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6852      	ldr	r2, [r2, #4]
 8005040:	0852      	lsrs	r2, r2, #1
 8005042:	4611      	mov	r1, r2
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	eb13 0b01 	adds.w	fp, r3, r1
 800504c:	eb44 0c02 	adc.w	ip, r4, r2
 8005050:	4658      	mov	r0, fp
 8005052:	4661      	mov	r1, ip
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f04f 0400 	mov.w	r4, #0
 800505c:	461a      	mov	r2, r3
 800505e:	4623      	mov	r3, r4
 8005060:	f7fb f996 	bl	8000390 <__aeabi_uldivmod>
 8005064:	4603      	mov	r3, r0
 8005066:	460c      	mov	r4, r1
 8005068:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800506a:	e247      	b.n	80054fc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800506c:	4b96      	ldr	r3, [pc, #600]	; (80052c8 <UART_SetConfig+0x1178>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0320 	and.w	r3, r3, #32
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 80a3 	beq.w	80051c0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800507a:	4b93      	ldr	r3, [pc, #588]	; (80052c8 <UART_SetConfig+0x1178>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	08db      	lsrs	r3, r3, #3
 8005080:	f003 0303 	and.w	r3, r3, #3
 8005084:	4a91      	ldr	r2, [pc, #580]	; (80052cc <UART_SetConfig+0x117c>)
 8005086:	fa22 f303 	lsr.w	r3, r2, r3
 800508a:	4618      	mov	r0, r3
 800508c:	f04f 0100 	mov.w	r1, #0
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	2b00      	cmp	r3, #0
 8005096:	d067      	beq.n	8005168 <UART_SetConfig+0x1018>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	2b01      	cmp	r3, #1
 800509e:	d05e      	beq.n	800515e <UART_SetConfig+0x100e>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d055      	beq.n	8005154 <UART_SetConfig+0x1004>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d04c      	beq.n	800514a <UART_SetConfig+0xffa>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d043      	beq.n	8005140 <UART_SetConfig+0xff0>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	2b05      	cmp	r3, #5
 80050be:	d03a      	beq.n	8005136 <UART_SetConfig+0xfe6>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	2b06      	cmp	r3, #6
 80050c6:	d031      	beq.n	800512c <UART_SetConfig+0xfdc>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	2b07      	cmp	r3, #7
 80050ce:	d028      	beq.n	8005122 <UART_SetConfig+0xfd2>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d01f      	beq.n	8005118 <UART_SetConfig+0xfc8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	2b09      	cmp	r3, #9
 80050de:	d016      	beq.n	800510e <UART_SetConfig+0xfbe>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	2b0a      	cmp	r3, #10
 80050e6:	d00d      	beq.n	8005104 <UART_SetConfig+0xfb4>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	2b0b      	cmp	r3, #11
 80050ee:	d104      	bne.n	80050fa <UART_SetConfig+0xfaa>
 80050f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050f4:	f04f 0400 	mov.w	r4, #0
 80050f8:	e03a      	b.n	8005170 <UART_SetConfig+0x1020>
 80050fa:	f04f 0301 	mov.w	r3, #1
 80050fe:	f04f 0400 	mov.w	r4, #0
 8005102:	e035      	b.n	8005170 <UART_SetConfig+0x1020>
 8005104:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005108:	f04f 0400 	mov.w	r4, #0
 800510c:	e030      	b.n	8005170 <UART_SetConfig+0x1020>
 800510e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005112:	f04f 0400 	mov.w	r4, #0
 8005116:	e02b      	b.n	8005170 <UART_SetConfig+0x1020>
 8005118:	f04f 0320 	mov.w	r3, #32
 800511c:	f04f 0400 	mov.w	r4, #0
 8005120:	e026      	b.n	8005170 <UART_SetConfig+0x1020>
 8005122:	f04f 0310 	mov.w	r3, #16
 8005126:	f04f 0400 	mov.w	r4, #0
 800512a:	e021      	b.n	8005170 <UART_SetConfig+0x1020>
 800512c:	f04f 030c 	mov.w	r3, #12
 8005130:	f04f 0400 	mov.w	r4, #0
 8005134:	e01c      	b.n	8005170 <UART_SetConfig+0x1020>
 8005136:	f04f 030a 	mov.w	r3, #10
 800513a:	f04f 0400 	mov.w	r4, #0
 800513e:	e017      	b.n	8005170 <UART_SetConfig+0x1020>
 8005140:	f04f 0308 	mov.w	r3, #8
 8005144:	f04f 0400 	mov.w	r4, #0
 8005148:	e012      	b.n	8005170 <UART_SetConfig+0x1020>
 800514a:	f04f 0306 	mov.w	r3, #6
 800514e:	f04f 0400 	mov.w	r4, #0
 8005152:	e00d      	b.n	8005170 <UART_SetConfig+0x1020>
 8005154:	f04f 0304 	mov.w	r3, #4
 8005158:	f04f 0400 	mov.w	r4, #0
 800515c:	e008      	b.n	8005170 <UART_SetConfig+0x1020>
 800515e:	f04f 0302 	mov.w	r3, #2
 8005162:	f04f 0400 	mov.w	r4, #0
 8005166:	e003      	b.n	8005170 <UART_SetConfig+0x1020>
 8005168:	f04f 0301 	mov.w	r3, #1
 800516c:	f04f 0400 	mov.w	r4, #0
 8005170:	461a      	mov	r2, r3
 8005172:	4623      	mov	r3, r4
 8005174:	f7fb f90c 	bl	8000390 <__aeabi_uldivmod>
 8005178:	4603      	mov	r3, r0
 800517a:	460c      	mov	r4, r1
 800517c:	4619      	mov	r1, r3
 800517e:	4622      	mov	r2, r4
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	f04f 0400 	mov.w	r4, #0
 8005188:	0214      	lsls	r4, r2, #8
 800518a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800518e:	020b      	lsls	r3, r1, #8
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6852      	ldr	r2, [r2, #4]
 8005194:	0852      	lsrs	r2, r2, #1
 8005196:	4611      	mov	r1, r2
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	eb13 0b01 	adds.w	fp, r3, r1
 80051a0:	eb44 0c02 	adc.w	ip, r4, r2
 80051a4:	4658      	mov	r0, fp
 80051a6:	4661      	mov	r1, ip
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f04f 0400 	mov.w	r4, #0
 80051b0:	461a      	mov	r2, r3
 80051b2:	4623      	mov	r3, r4
 80051b4:	f7fb f8ec 	bl	8000390 <__aeabi_uldivmod>
 80051b8:	4603      	mov	r3, r0
 80051ba:	460c      	mov	r4, r1
 80051bc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80051be:	e19d      	b.n	80054fc <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d05b      	beq.n	8005280 <UART_SetConfig+0x1130>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d053      	beq.n	8005278 <UART_SetConfig+0x1128>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d04b      	beq.n	8005270 <UART_SetConfig+0x1120>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	2b03      	cmp	r3, #3
 80051de:	d043      	beq.n	8005268 <UART_SetConfig+0x1118>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d03b      	beq.n	8005260 <UART_SetConfig+0x1110>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	2b05      	cmp	r3, #5
 80051ee:	d033      	beq.n	8005258 <UART_SetConfig+0x1108>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	2b06      	cmp	r3, #6
 80051f6:	d02b      	beq.n	8005250 <UART_SetConfig+0x1100>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	2b07      	cmp	r3, #7
 80051fe:	d023      	beq.n	8005248 <UART_SetConfig+0x10f8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	2b08      	cmp	r3, #8
 8005206:	d01b      	beq.n	8005240 <UART_SetConfig+0x10f0>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	2b09      	cmp	r3, #9
 800520e:	d013      	beq.n	8005238 <UART_SetConfig+0x10e8>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	2b0a      	cmp	r3, #10
 8005216:	d00b      	beq.n	8005230 <UART_SetConfig+0x10e0>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	2b0b      	cmp	r3, #11
 800521e:	d103      	bne.n	8005228 <UART_SetConfig+0x10d8>
 8005220:	4b2a      	ldr	r3, [pc, #168]	; (80052cc <UART_SetConfig+0x117c>)
 8005222:	f04f 0400 	mov.w	r4, #0
 8005226:	e02e      	b.n	8005286 <UART_SetConfig+0x1136>
 8005228:	4b29      	ldr	r3, [pc, #164]	; (80052d0 <UART_SetConfig+0x1180>)
 800522a:	f04f 0403 	mov.w	r4, #3
 800522e:	e02a      	b.n	8005286 <UART_SetConfig+0x1136>
 8005230:	4b28      	ldr	r3, [pc, #160]	; (80052d4 <UART_SetConfig+0x1184>)
 8005232:	f04f 0400 	mov.w	r4, #0
 8005236:	e026      	b.n	8005286 <UART_SetConfig+0x1136>
 8005238:	4b27      	ldr	r3, [pc, #156]	; (80052d8 <UART_SetConfig+0x1188>)
 800523a:	f04f 0400 	mov.w	r4, #0
 800523e:	e022      	b.n	8005286 <UART_SetConfig+0x1136>
 8005240:	4b26      	ldr	r3, [pc, #152]	; (80052dc <UART_SetConfig+0x118c>)
 8005242:	f04f 0400 	mov.w	r4, #0
 8005246:	e01e      	b.n	8005286 <UART_SetConfig+0x1136>
 8005248:	4b25      	ldr	r3, [pc, #148]	; (80052e0 <UART_SetConfig+0x1190>)
 800524a:	f04f 0400 	mov.w	r4, #0
 800524e:	e01a      	b.n	8005286 <UART_SetConfig+0x1136>
 8005250:	a419      	add	r4, pc, #100	; (adr r4, 80052b8 <UART_SetConfig+0x1168>)
 8005252:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005256:	e016      	b.n	8005286 <UART_SetConfig+0x1136>
 8005258:	4b22      	ldr	r3, [pc, #136]	; (80052e4 <UART_SetConfig+0x1194>)
 800525a:	f04f 0400 	mov.w	r4, #0
 800525e:	e012      	b.n	8005286 <UART_SetConfig+0x1136>
 8005260:	4b21      	ldr	r3, [pc, #132]	; (80052e8 <UART_SetConfig+0x1198>)
 8005262:	f04f 0400 	mov.w	r4, #0
 8005266:	e00e      	b.n	8005286 <UART_SetConfig+0x1136>
 8005268:	a415      	add	r4, pc, #84	; (adr r4, 80052c0 <UART_SetConfig+0x1170>)
 800526a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800526e:	e00a      	b.n	8005286 <UART_SetConfig+0x1136>
 8005270:	4b1e      	ldr	r3, [pc, #120]	; (80052ec <UART_SetConfig+0x119c>)
 8005272:	f04f 0400 	mov.w	r4, #0
 8005276:	e006      	b.n	8005286 <UART_SetConfig+0x1136>
 8005278:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <UART_SetConfig+0x11a0>)
 800527a:	f04f 0401 	mov.w	r4, #1
 800527e:	e002      	b.n	8005286 <UART_SetConfig+0x1136>
 8005280:	4b13      	ldr	r3, [pc, #76]	; (80052d0 <UART_SetConfig+0x1180>)
 8005282:	f04f 0403 	mov.w	r4, #3
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6852      	ldr	r2, [r2, #4]
 800528a:	0852      	lsrs	r2, r2, #1
 800528c:	4611      	mov	r1, r2
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	eb13 0b01 	adds.w	fp, r3, r1
 8005296:	eb44 0c02 	adc.w	ip, r4, r2
 800529a:	4658      	mov	r0, fp
 800529c:	4661      	mov	r1, ip
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f04f 0400 	mov.w	r4, #0
 80052a6:	461a      	mov	r2, r3
 80052a8:	4623      	mov	r3, r4
 80052aa:	f7fb f871 	bl	8000390 <__aeabi_uldivmod>
 80052ae:	4603      	mov	r3, r0
 80052b0:	460c      	mov	r4, r1
 80052b2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80052b4:	e122      	b.n	80054fc <UART_SetConfig+0x13ac>
 80052b6:	bf00      	nop
 80052b8:	51615500 	.word	0x51615500
 80052bc:	00000000 	.word	0x00000000
 80052c0:	a2c2aa00 	.word	0xa2c2aa00
 80052c4:	00000000 	.word	0x00000000
 80052c8:	58024400 	.word	0x58024400
 80052cc:	03d09000 	.word	0x03d09000
 80052d0:	d0900000 	.word	0xd0900000
 80052d4:	07a12000 	.word	0x07a12000
 80052d8:	0f424000 	.word	0x0f424000
 80052dc:	1e848000 	.word	0x1e848000
 80052e0:	3d090000 	.word	0x3d090000
 80052e4:	61a80000 	.word	0x61a80000
 80052e8:	7a120000 	.word	0x7a120000
 80052ec:	f4240000 	.word	0xf4240000
 80052f0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d05b      	beq.n	80053b4 <UART_SetConfig+0x1264>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	2b01      	cmp	r3, #1
 8005302:	d053      	beq.n	80053ac <UART_SetConfig+0x125c>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	2b02      	cmp	r3, #2
 800530a:	d04b      	beq.n	80053a4 <UART_SetConfig+0x1254>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	2b03      	cmp	r3, #3
 8005312:	d043      	beq.n	800539c <UART_SetConfig+0x124c>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	2b04      	cmp	r3, #4
 800531a:	d03b      	beq.n	8005394 <UART_SetConfig+0x1244>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	2b05      	cmp	r3, #5
 8005322:	d033      	beq.n	800538c <UART_SetConfig+0x123c>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	2b06      	cmp	r3, #6
 800532a:	d02b      	beq.n	8005384 <UART_SetConfig+0x1234>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	2b07      	cmp	r3, #7
 8005332:	d023      	beq.n	800537c <UART_SetConfig+0x122c>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	2b08      	cmp	r3, #8
 800533a:	d01b      	beq.n	8005374 <UART_SetConfig+0x1224>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	2b09      	cmp	r3, #9
 8005342:	d013      	beq.n	800536c <UART_SetConfig+0x121c>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	2b0a      	cmp	r3, #10
 800534a:	d00b      	beq.n	8005364 <UART_SetConfig+0x1214>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	2b0b      	cmp	r3, #11
 8005352:	d103      	bne.n	800535c <UART_SetConfig+0x120c>
 8005354:	4bc0      	ldr	r3, [pc, #768]	; (8005658 <UART_SetConfig+0x1508>)
 8005356:	f04f 0400 	mov.w	r4, #0
 800535a:	e02e      	b.n	80053ba <UART_SetConfig+0x126a>
 800535c:	4bbf      	ldr	r3, [pc, #764]	; (800565c <UART_SetConfig+0x150c>)
 800535e:	f04f 0400 	mov.w	r4, #0
 8005362:	e02a      	b.n	80053ba <UART_SetConfig+0x126a>
 8005364:	4bbe      	ldr	r3, [pc, #760]	; (8005660 <UART_SetConfig+0x1510>)
 8005366:	f04f 0400 	mov.w	r4, #0
 800536a:	e026      	b.n	80053ba <UART_SetConfig+0x126a>
 800536c:	4bbd      	ldr	r3, [pc, #756]	; (8005664 <UART_SetConfig+0x1514>)
 800536e:	f04f 0400 	mov.w	r4, #0
 8005372:	e022      	b.n	80053ba <UART_SetConfig+0x126a>
 8005374:	4bbc      	ldr	r3, [pc, #752]	; (8005668 <UART_SetConfig+0x1518>)
 8005376:	f04f 0400 	mov.w	r4, #0
 800537a:	e01e      	b.n	80053ba <UART_SetConfig+0x126a>
 800537c:	4bbb      	ldr	r3, [pc, #748]	; (800566c <UART_SetConfig+0x151c>)
 800537e:	f04f 0400 	mov.w	r4, #0
 8005382:	e01a      	b.n	80053ba <UART_SetConfig+0x126a>
 8005384:	a4b0      	add	r4, pc, #704	; (adr r4, 8005648 <UART_SetConfig+0x14f8>)
 8005386:	e9d4 3400 	ldrd	r3, r4, [r4]
 800538a:	e016      	b.n	80053ba <UART_SetConfig+0x126a>
 800538c:	4bb8      	ldr	r3, [pc, #736]	; (8005670 <UART_SetConfig+0x1520>)
 800538e:	f04f 0400 	mov.w	r4, #0
 8005392:	e012      	b.n	80053ba <UART_SetConfig+0x126a>
 8005394:	4bb7      	ldr	r3, [pc, #732]	; (8005674 <UART_SetConfig+0x1524>)
 8005396:	f04f 0400 	mov.w	r4, #0
 800539a:	e00e      	b.n	80053ba <UART_SetConfig+0x126a>
 800539c:	a4ac      	add	r4, pc, #688	; (adr r4, 8005650 <UART_SetConfig+0x1500>)
 800539e:	e9d4 3400 	ldrd	r3, r4, [r4]
 80053a2:	e00a      	b.n	80053ba <UART_SetConfig+0x126a>
 80053a4:	4bb4      	ldr	r3, [pc, #720]	; (8005678 <UART_SetConfig+0x1528>)
 80053a6:	f04f 0400 	mov.w	r4, #0
 80053aa:	e006      	b.n	80053ba <UART_SetConfig+0x126a>
 80053ac:	4bb3      	ldr	r3, [pc, #716]	; (800567c <UART_SetConfig+0x152c>)
 80053ae:	f04f 0400 	mov.w	r4, #0
 80053b2:	e002      	b.n	80053ba <UART_SetConfig+0x126a>
 80053b4:	4ba9      	ldr	r3, [pc, #676]	; (800565c <UART_SetConfig+0x150c>)
 80053b6:	f04f 0400 	mov.w	r4, #0
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	6852      	ldr	r2, [r2, #4]
 80053be:	0852      	lsrs	r2, r2, #1
 80053c0:	4611      	mov	r1, r2
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	eb13 0b01 	adds.w	fp, r3, r1
 80053ca:	eb44 0c02 	adc.w	ip, r4, r2
 80053ce:	4658      	mov	r0, fp
 80053d0:	4661      	mov	r1, ip
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f04f 0400 	mov.w	r4, #0
 80053da:	461a      	mov	r2, r3
 80053dc:	4623      	mov	r3, r4
 80053de:	f7fa ffd7 	bl	8000390 <__aeabi_uldivmod>
 80053e2:	4603      	mov	r3, r0
 80053e4:	460c      	mov	r4, r1
 80053e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80053e8:	e088      	b.n	80054fc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d064      	beq.n	80054bc <UART_SetConfig+0x136c>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d05b      	beq.n	80054b2 <UART_SetConfig+0x1362>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d052      	beq.n	80054a8 <UART_SetConfig+0x1358>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	2b03      	cmp	r3, #3
 8005408:	d04a      	beq.n	80054a0 <UART_SetConfig+0x1350>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	2b04      	cmp	r3, #4
 8005410:	d041      	beq.n	8005496 <UART_SetConfig+0x1346>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	2b05      	cmp	r3, #5
 8005418:	d039      	beq.n	800548e <UART_SetConfig+0x133e>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541e:	2b06      	cmp	r3, #6
 8005420:	d031      	beq.n	8005486 <UART_SetConfig+0x1336>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	2b07      	cmp	r3, #7
 8005428:	d028      	beq.n	800547c <UART_SetConfig+0x132c>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	2b08      	cmp	r3, #8
 8005430:	d01f      	beq.n	8005472 <UART_SetConfig+0x1322>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	2b09      	cmp	r3, #9
 8005438:	d016      	beq.n	8005468 <UART_SetConfig+0x1318>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	2b0a      	cmp	r3, #10
 8005440:	d00d      	beq.n	800545e <UART_SetConfig+0x130e>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b0b      	cmp	r3, #11
 8005448:	d104      	bne.n	8005454 <UART_SetConfig+0x1304>
 800544a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800544e:	f04f 0400 	mov.w	r4, #0
 8005452:	e037      	b.n	80054c4 <UART_SetConfig+0x1374>
 8005454:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005458:	f04f 0400 	mov.w	r4, #0
 800545c:	e032      	b.n	80054c4 <UART_SetConfig+0x1374>
 800545e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005462:	f04f 0400 	mov.w	r4, #0
 8005466:	e02d      	b.n	80054c4 <UART_SetConfig+0x1374>
 8005468:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800546c:	f04f 0400 	mov.w	r4, #0
 8005470:	e028      	b.n	80054c4 <UART_SetConfig+0x1374>
 8005472:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005476:	f04f 0400 	mov.w	r4, #0
 800547a:	e023      	b.n	80054c4 <UART_SetConfig+0x1374>
 800547c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005480:	f04f 0400 	mov.w	r4, #0
 8005484:	e01e      	b.n	80054c4 <UART_SetConfig+0x1374>
 8005486:	4b7e      	ldr	r3, [pc, #504]	; (8005680 <UART_SetConfig+0x1530>)
 8005488:	f04f 0400 	mov.w	r4, #0
 800548c:	e01a      	b.n	80054c4 <UART_SetConfig+0x1374>
 800548e:	4b7d      	ldr	r3, [pc, #500]	; (8005684 <UART_SetConfig+0x1534>)
 8005490:	f04f 0400 	mov.w	r4, #0
 8005494:	e016      	b.n	80054c4 <UART_SetConfig+0x1374>
 8005496:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800549a:	f04f 0400 	mov.w	r4, #0
 800549e:	e011      	b.n	80054c4 <UART_SetConfig+0x1374>
 80054a0:	4b79      	ldr	r3, [pc, #484]	; (8005688 <UART_SetConfig+0x1538>)
 80054a2:	f04f 0400 	mov.w	r4, #0
 80054a6:	e00d      	b.n	80054c4 <UART_SetConfig+0x1374>
 80054a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80054ac:	f04f 0400 	mov.w	r4, #0
 80054b0:	e008      	b.n	80054c4 <UART_SetConfig+0x1374>
 80054b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80054b6:	f04f 0400 	mov.w	r4, #0
 80054ba:	e003      	b.n	80054c4 <UART_SetConfig+0x1374>
 80054bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80054c0:	f04f 0400 	mov.w	r4, #0
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6852      	ldr	r2, [r2, #4]
 80054c8:	0852      	lsrs	r2, r2, #1
 80054ca:	4611      	mov	r1, r2
 80054cc:	f04f 0200 	mov.w	r2, #0
 80054d0:	eb13 0b01 	adds.w	fp, r3, r1
 80054d4:	eb44 0c02 	adc.w	ip, r4, r2
 80054d8:	4658      	mov	r0, fp
 80054da:	4661      	mov	r1, ip
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f04f 0400 	mov.w	r4, #0
 80054e4:	461a      	mov	r2, r3
 80054e6:	4623      	mov	r3, r4
 80054e8:	f7fa ff52 	bl	8000390 <__aeabi_uldivmod>
 80054ec:	4603      	mov	r3, r0
 80054ee:	460c      	mov	r4, r1
 80054f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80054f2:	e003      	b.n	80054fc <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 80054fa:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005502:	d309      	bcc.n	8005518 <UART_SetConfig+0x13c8>
 8005504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800550a:	d205      	bcs.n	8005518 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005512:	60da      	str	r2, [r3, #12]
 8005514:	f000 bf85 	b.w	8006422 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800551e:	f000 bf80 	b.w	8006422 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800552a:	f040 83da 	bne.w	8005ce2 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800552e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005532:	2b40      	cmp	r3, #64	; 0x40
 8005534:	f200 83b3 	bhi.w	8005c9e <UART_SetConfig+0x1b4e>
 8005538:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <UART_SetConfig+0x13f0>)
 800553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553e:	bf00      	nop
 8005540:	0800568d 	.word	0x0800568d
 8005544:	08005745 	.word	0x08005745
 8005548:	08005c9f 	.word	0x08005c9f
 800554c:	08005c9f 	.word	0x08005c9f
 8005550:	080057fd 	.word	0x080057fd
 8005554:	08005c9f 	.word	0x08005c9f
 8005558:	08005c9f 	.word	0x08005c9f
 800555c:	08005c9f 	.word	0x08005c9f
 8005560:	080058b9 	.word	0x080058b9
 8005564:	08005c9f 	.word	0x08005c9f
 8005568:	08005c9f 	.word	0x08005c9f
 800556c:	08005c9f 	.word	0x08005c9f
 8005570:	08005c9f 	.word	0x08005c9f
 8005574:	08005c9f 	.word	0x08005c9f
 8005578:	08005c9f 	.word	0x08005c9f
 800557c:	08005c9f 	.word	0x08005c9f
 8005580:	08005975 	.word	0x08005975
 8005584:	08005c9f 	.word	0x08005c9f
 8005588:	08005c9f 	.word	0x08005c9f
 800558c:	08005c9f 	.word	0x08005c9f
 8005590:	08005c9f 	.word	0x08005c9f
 8005594:	08005c9f 	.word	0x08005c9f
 8005598:	08005c9f 	.word	0x08005c9f
 800559c:	08005c9f 	.word	0x08005c9f
 80055a0:	08005c9f 	.word	0x08005c9f
 80055a4:	08005c9f 	.word	0x08005c9f
 80055a8:	08005c9f 	.word	0x08005c9f
 80055ac:	08005c9f 	.word	0x08005c9f
 80055b0:	08005c9f 	.word	0x08005c9f
 80055b4:	08005c9f 	.word	0x08005c9f
 80055b8:	08005c9f 	.word	0x08005c9f
 80055bc:	08005c9f 	.word	0x08005c9f
 80055c0:	08005ae7 	.word	0x08005ae7
 80055c4:	08005c9f 	.word	0x08005c9f
 80055c8:	08005c9f 	.word	0x08005c9f
 80055cc:	08005c9f 	.word	0x08005c9f
 80055d0:	08005c9f 	.word	0x08005c9f
 80055d4:	08005c9f 	.word	0x08005c9f
 80055d8:	08005c9f 	.word	0x08005c9f
 80055dc:	08005c9f 	.word	0x08005c9f
 80055e0:	08005c9f 	.word	0x08005c9f
 80055e4:	08005c9f 	.word	0x08005c9f
 80055e8:	08005c9f 	.word	0x08005c9f
 80055ec:	08005c9f 	.word	0x08005c9f
 80055f0:	08005c9f 	.word	0x08005c9f
 80055f4:	08005c9f 	.word	0x08005c9f
 80055f8:	08005c9f 	.word	0x08005c9f
 80055fc:	08005c9f 	.word	0x08005c9f
 8005600:	08005c9f 	.word	0x08005c9f
 8005604:	08005c9f 	.word	0x08005c9f
 8005608:	08005c9f 	.word	0x08005c9f
 800560c:	08005c9f 	.word	0x08005c9f
 8005610:	08005c9f 	.word	0x08005c9f
 8005614:	08005c9f 	.word	0x08005c9f
 8005618:	08005c9f 	.word	0x08005c9f
 800561c:	08005c9f 	.word	0x08005c9f
 8005620:	08005c9f 	.word	0x08005c9f
 8005624:	08005c9f 	.word	0x08005c9f
 8005628:	08005c9f 	.word	0x08005c9f
 800562c:	08005c9f 	.word	0x08005c9f
 8005630:	08005c9f 	.word	0x08005c9f
 8005634:	08005c9f 	.word	0x08005c9f
 8005638:	08005c9f 	.word	0x08005c9f
 800563c:	08005c9f 	.word	0x08005c9f
 8005640:	08005bdd 	.word	0x08005bdd
 8005644:	f3af 8000 	nop.w
 8005648:	05161500 	.word	0x05161500
 800564c:	00000000 	.word	0x00000000
 8005650:	0a2c2a00 	.word	0x0a2c2a00
 8005654:	00000000 	.word	0x00000000
 8005658:	003d0900 	.word	0x003d0900
 800565c:	3d090000 	.word	0x3d090000
 8005660:	007a1200 	.word	0x007a1200
 8005664:	00f42400 	.word	0x00f42400
 8005668:	01e84800 	.word	0x01e84800
 800566c:	03d09000 	.word	0x03d09000
 8005670:	061a8000 	.word	0x061a8000
 8005674:	07a12000 	.word	0x07a12000
 8005678:	0f424000 	.word	0x0f424000
 800567c:	1e848000 	.word	0x1e848000
 8005680:	000aaa00 	.word	0x000aaa00
 8005684:	000ccc00 	.word	0x000ccc00
 8005688:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800568c:	f7fd f95c 	bl	8002948 <HAL_RCC_GetPCLK1Freq>
 8005690:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	2b00      	cmp	r3, #0
 8005698:	d044      	beq.n	8005724 <UART_SetConfig+0x15d4>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d03e      	beq.n	8005720 <UART_SetConfig+0x15d0>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d038      	beq.n	800571c <UART_SetConfig+0x15cc>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d032      	beq.n	8005718 <UART_SetConfig+0x15c8>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d02c      	beq.n	8005714 <UART_SetConfig+0x15c4>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	2b05      	cmp	r3, #5
 80056c0:	d026      	beq.n	8005710 <UART_SetConfig+0x15c0>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	2b06      	cmp	r3, #6
 80056c8:	d020      	beq.n	800570c <UART_SetConfig+0x15bc>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	2b07      	cmp	r3, #7
 80056d0:	d01a      	beq.n	8005708 <UART_SetConfig+0x15b8>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	d014      	beq.n	8005704 <UART_SetConfig+0x15b4>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	2b09      	cmp	r3, #9
 80056e0:	d00e      	beq.n	8005700 <UART_SetConfig+0x15b0>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	2b0a      	cmp	r3, #10
 80056e8:	d008      	beq.n	80056fc <UART_SetConfig+0x15ac>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	2b0b      	cmp	r3, #11
 80056f0:	d102      	bne.n	80056f8 <UART_SetConfig+0x15a8>
 80056f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056f6:	e016      	b.n	8005726 <UART_SetConfig+0x15d6>
 80056f8:	2301      	movs	r3, #1
 80056fa:	e014      	b.n	8005726 <UART_SetConfig+0x15d6>
 80056fc:	2380      	movs	r3, #128	; 0x80
 80056fe:	e012      	b.n	8005726 <UART_SetConfig+0x15d6>
 8005700:	2340      	movs	r3, #64	; 0x40
 8005702:	e010      	b.n	8005726 <UART_SetConfig+0x15d6>
 8005704:	2320      	movs	r3, #32
 8005706:	e00e      	b.n	8005726 <UART_SetConfig+0x15d6>
 8005708:	2310      	movs	r3, #16
 800570a:	e00c      	b.n	8005726 <UART_SetConfig+0x15d6>
 800570c:	230c      	movs	r3, #12
 800570e:	e00a      	b.n	8005726 <UART_SetConfig+0x15d6>
 8005710:	230a      	movs	r3, #10
 8005712:	e008      	b.n	8005726 <UART_SetConfig+0x15d6>
 8005714:	2308      	movs	r3, #8
 8005716:	e006      	b.n	8005726 <UART_SetConfig+0x15d6>
 8005718:	2306      	movs	r3, #6
 800571a:	e004      	b.n	8005726 <UART_SetConfig+0x15d6>
 800571c:	2304      	movs	r3, #4
 800571e:	e002      	b.n	8005726 <UART_SetConfig+0x15d6>
 8005720:	2302      	movs	r3, #2
 8005722:	e000      	b.n	8005726 <UART_SetConfig+0x15d6>
 8005724:	2301      	movs	r3, #1
 8005726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005728:	fbb2 f3f3 	udiv	r3, r2, r3
 800572c:	005a      	lsls	r2, r3, #1
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	085b      	lsrs	r3, r3, #1
 8005734:	441a      	add	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	fbb2 f3f3 	udiv	r3, r2, r3
 800573e:	b29b      	uxth	r3, r3
 8005740:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005742:	e2b0      	b.n	8005ca6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005744:	f7fd f916 	bl	8002974 <HAL_RCC_GetPCLK2Freq>
 8005748:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	2b00      	cmp	r3, #0
 8005750:	d044      	beq.n	80057dc <UART_SetConfig+0x168c>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	2b01      	cmp	r3, #1
 8005758:	d03e      	beq.n	80057d8 <UART_SetConfig+0x1688>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	2b02      	cmp	r3, #2
 8005760:	d038      	beq.n	80057d4 <UART_SetConfig+0x1684>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	2b03      	cmp	r3, #3
 8005768:	d032      	beq.n	80057d0 <UART_SetConfig+0x1680>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	2b04      	cmp	r3, #4
 8005770:	d02c      	beq.n	80057cc <UART_SetConfig+0x167c>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	2b05      	cmp	r3, #5
 8005778:	d026      	beq.n	80057c8 <UART_SetConfig+0x1678>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	2b06      	cmp	r3, #6
 8005780:	d020      	beq.n	80057c4 <UART_SetConfig+0x1674>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	2b07      	cmp	r3, #7
 8005788:	d01a      	beq.n	80057c0 <UART_SetConfig+0x1670>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	2b08      	cmp	r3, #8
 8005790:	d014      	beq.n	80057bc <UART_SetConfig+0x166c>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	2b09      	cmp	r3, #9
 8005798:	d00e      	beq.n	80057b8 <UART_SetConfig+0x1668>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	2b0a      	cmp	r3, #10
 80057a0:	d008      	beq.n	80057b4 <UART_SetConfig+0x1664>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	2b0b      	cmp	r3, #11
 80057a8:	d102      	bne.n	80057b0 <UART_SetConfig+0x1660>
 80057aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057ae:	e016      	b.n	80057de <UART_SetConfig+0x168e>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e014      	b.n	80057de <UART_SetConfig+0x168e>
 80057b4:	2380      	movs	r3, #128	; 0x80
 80057b6:	e012      	b.n	80057de <UART_SetConfig+0x168e>
 80057b8:	2340      	movs	r3, #64	; 0x40
 80057ba:	e010      	b.n	80057de <UART_SetConfig+0x168e>
 80057bc:	2320      	movs	r3, #32
 80057be:	e00e      	b.n	80057de <UART_SetConfig+0x168e>
 80057c0:	2310      	movs	r3, #16
 80057c2:	e00c      	b.n	80057de <UART_SetConfig+0x168e>
 80057c4:	230c      	movs	r3, #12
 80057c6:	e00a      	b.n	80057de <UART_SetConfig+0x168e>
 80057c8:	230a      	movs	r3, #10
 80057ca:	e008      	b.n	80057de <UART_SetConfig+0x168e>
 80057cc:	2308      	movs	r3, #8
 80057ce:	e006      	b.n	80057de <UART_SetConfig+0x168e>
 80057d0:	2306      	movs	r3, #6
 80057d2:	e004      	b.n	80057de <UART_SetConfig+0x168e>
 80057d4:	2304      	movs	r3, #4
 80057d6:	e002      	b.n	80057de <UART_SetConfig+0x168e>
 80057d8:	2302      	movs	r3, #2
 80057da:	e000      	b.n	80057de <UART_SetConfig+0x168e>
 80057dc:	2301      	movs	r3, #1
 80057de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e4:	005a      	lsls	r2, r3, #1
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	085b      	lsrs	r3, r3, #1
 80057ec:	441a      	add	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057fa:	e254      	b.n	8005ca6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057fc:	f107 0318 	add.w	r3, r7, #24
 8005800:	4618      	mov	r0, r3
 8005802:	f7fd ffc1 	bl	8003788 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005806:	69fa      	ldr	r2, [r7, #28]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	2b00      	cmp	r3, #0
 800580e:	d044      	beq.n	800589a <UART_SetConfig+0x174a>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	2b01      	cmp	r3, #1
 8005816:	d03e      	beq.n	8005896 <UART_SetConfig+0x1746>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	2b02      	cmp	r3, #2
 800581e:	d038      	beq.n	8005892 <UART_SetConfig+0x1742>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	2b03      	cmp	r3, #3
 8005826:	d032      	beq.n	800588e <UART_SetConfig+0x173e>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	2b04      	cmp	r3, #4
 800582e:	d02c      	beq.n	800588a <UART_SetConfig+0x173a>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	2b05      	cmp	r3, #5
 8005836:	d026      	beq.n	8005886 <UART_SetConfig+0x1736>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	2b06      	cmp	r3, #6
 800583e:	d020      	beq.n	8005882 <UART_SetConfig+0x1732>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	2b07      	cmp	r3, #7
 8005846:	d01a      	beq.n	800587e <UART_SetConfig+0x172e>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	2b08      	cmp	r3, #8
 800584e:	d014      	beq.n	800587a <UART_SetConfig+0x172a>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	2b09      	cmp	r3, #9
 8005856:	d00e      	beq.n	8005876 <UART_SetConfig+0x1726>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	2b0a      	cmp	r3, #10
 800585e:	d008      	beq.n	8005872 <UART_SetConfig+0x1722>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	2b0b      	cmp	r3, #11
 8005866:	d102      	bne.n	800586e <UART_SetConfig+0x171e>
 8005868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800586c:	e016      	b.n	800589c <UART_SetConfig+0x174c>
 800586e:	2301      	movs	r3, #1
 8005870:	e014      	b.n	800589c <UART_SetConfig+0x174c>
 8005872:	2380      	movs	r3, #128	; 0x80
 8005874:	e012      	b.n	800589c <UART_SetConfig+0x174c>
 8005876:	2340      	movs	r3, #64	; 0x40
 8005878:	e010      	b.n	800589c <UART_SetConfig+0x174c>
 800587a:	2320      	movs	r3, #32
 800587c:	e00e      	b.n	800589c <UART_SetConfig+0x174c>
 800587e:	2310      	movs	r3, #16
 8005880:	e00c      	b.n	800589c <UART_SetConfig+0x174c>
 8005882:	230c      	movs	r3, #12
 8005884:	e00a      	b.n	800589c <UART_SetConfig+0x174c>
 8005886:	230a      	movs	r3, #10
 8005888:	e008      	b.n	800589c <UART_SetConfig+0x174c>
 800588a:	2308      	movs	r3, #8
 800588c:	e006      	b.n	800589c <UART_SetConfig+0x174c>
 800588e:	2306      	movs	r3, #6
 8005890:	e004      	b.n	800589c <UART_SetConfig+0x174c>
 8005892:	2304      	movs	r3, #4
 8005894:	e002      	b.n	800589c <UART_SetConfig+0x174c>
 8005896:	2302      	movs	r3, #2
 8005898:	e000      	b.n	800589c <UART_SetConfig+0x174c>
 800589a:	2301      	movs	r3, #1
 800589c:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a0:	005a      	lsls	r2, r3, #1
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	085b      	lsrs	r3, r3, #1
 80058a8:	441a      	add	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058b6:	e1f6      	b.n	8005ca6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058b8:	f107 030c 	add.w	r3, r7, #12
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fe f8af 	bl	8003a20 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d044      	beq.n	8005956 <UART_SetConfig+0x1806>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d03e      	beq.n	8005952 <UART_SetConfig+0x1802>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d038      	beq.n	800594e <UART_SetConfig+0x17fe>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d032      	beq.n	800594a <UART_SetConfig+0x17fa>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	d02c      	beq.n	8005946 <UART_SetConfig+0x17f6>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	2b05      	cmp	r3, #5
 80058f2:	d026      	beq.n	8005942 <UART_SetConfig+0x17f2>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	2b06      	cmp	r3, #6
 80058fa:	d020      	beq.n	800593e <UART_SetConfig+0x17ee>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	2b07      	cmp	r3, #7
 8005902:	d01a      	beq.n	800593a <UART_SetConfig+0x17ea>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	2b08      	cmp	r3, #8
 800590a:	d014      	beq.n	8005936 <UART_SetConfig+0x17e6>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	2b09      	cmp	r3, #9
 8005912:	d00e      	beq.n	8005932 <UART_SetConfig+0x17e2>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	2b0a      	cmp	r3, #10
 800591a:	d008      	beq.n	800592e <UART_SetConfig+0x17de>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	2b0b      	cmp	r3, #11
 8005922:	d102      	bne.n	800592a <UART_SetConfig+0x17da>
 8005924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005928:	e016      	b.n	8005958 <UART_SetConfig+0x1808>
 800592a:	2301      	movs	r3, #1
 800592c:	e014      	b.n	8005958 <UART_SetConfig+0x1808>
 800592e:	2380      	movs	r3, #128	; 0x80
 8005930:	e012      	b.n	8005958 <UART_SetConfig+0x1808>
 8005932:	2340      	movs	r3, #64	; 0x40
 8005934:	e010      	b.n	8005958 <UART_SetConfig+0x1808>
 8005936:	2320      	movs	r3, #32
 8005938:	e00e      	b.n	8005958 <UART_SetConfig+0x1808>
 800593a:	2310      	movs	r3, #16
 800593c:	e00c      	b.n	8005958 <UART_SetConfig+0x1808>
 800593e:	230c      	movs	r3, #12
 8005940:	e00a      	b.n	8005958 <UART_SetConfig+0x1808>
 8005942:	230a      	movs	r3, #10
 8005944:	e008      	b.n	8005958 <UART_SetConfig+0x1808>
 8005946:	2308      	movs	r3, #8
 8005948:	e006      	b.n	8005958 <UART_SetConfig+0x1808>
 800594a:	2306      	movs	r3, #6
 800594c:	e004      	b.n	8005958 <UART_SetConfig+0x1808>
 800594e:	2304      	movs	r3, #4
 8005950:	e002      	b.n	8005958 <UART_SetConfig+0x1808>
 8005952:	2302      	movs	r3, #2
 8005954:	e000      	b.n	8005958 <UART_SetConfig+0x1808>
 8005956:	2301      	movs	r3, #1
 8005958:	fbb2 f3f3 	udiv	r3, r2, r3
 800595c:	005a      	lsls	r2, r3, #1
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	085b      	lsrs	r3, r3, #1
 8005964:	441a      	add	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	fbb2 f3f3 	udiv	r3, r2, r3
 800596e:	b29b      	uxth	r3, r3
 8005970:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005972:	e198      	b.n	8005ca6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005974:	4b87      	ldr	r3, [pc, #540]	; (8005b94 <UART_SetConfig+0x1a44>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b00      	cmp	r3, #0
 800597e:	d05e      	beq.n	8005a3e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005980:	4b84      	ldr	r3, [pc, #528]	; (8005b94 <UART_SetConfig+0x1a44>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	08db      	lsrs	r3, r3, #3
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	4a83      	ldr	r2, [pc, #524]	; (8005b98 <UART_SetConfig+0x1a48>)
 800598c:	40da      	lsrs	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	2b00      	cmp	r3, #0
 8005994:	d044      	beq.n	8005a20 <UART_SetConfig+0x18d0>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	2b01      	cmp	r3, #1
 800599c:	d03e      	beq.n	8005a1c <UART_SetConfig+0x18cc>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d038      	beq.n	8005a18 <UART_SetConfig+0x18c8>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d032      	beq.n	8005a14 <UART_SetConfig+0x18c4>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d02c      	beq.n	8005a10 <UART_SetConfig+0x18c0>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	2b05      	cmp	r3, #5
 80059bc:	d026      	beq.n	8005a0c <UART_SetConfig+0x18bc>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	2b06      	cmp	r3, #6
 80059c4:	d020      	beq.n	8005a08 <UART_SetConfig+0x18b8>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	2b07      	cmp	r3, #7
 80059cc:	d01a      	beq.n	8005a04 <UART_SetConfig+0x18b4>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	d014      	beq.n	8005a00 <UART_SetConfig+0x18b0>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	2b09      	cmp	r3, #9
 80059dc:	d00e      	beq.n	80059fc <UART_SetConfig+0x18ac>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	2b0a      	cmp	r3, #10
 80059e4:	d008      	beq.n	80059f8 <UART_SetConfig+0x18a8>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	2b0b      	cmp	r3, #11
 80059ec:	d102      	bne.n	80059f4 <UART_SetConfig+0x18a4>
 80059ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059f2:	e016      	b.n	8005a22 <UART_SetConfig+0x18d2>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e014      	b.n	8005a22 <UART_SetConfig+0x18d2>
 80059f8:	2380      	movs	r3, #128	; 0x80
 80059fa:	e012      	b.n	8005a22 <UART_SetConfig+0x18d2>
 80059fc:	2340      	movs	r3, #64	; 0x40
 80059fe:	e010      	b.n	8005a22 <UART_SetConfig+0x18d2>
 8005a00:	2320      	movs	r3, #32
 8005a02:	e00e      	b.n	8005a22 <UART_SetConfig+0x18d2>
 8005a04:	2310      	movs	r3, #16
 8005a06:	e00c      	b.n	8005a22 <UART_SetConfig+0x18d2>
 8005a08:	230c      	movs	r3, #12
 8005a0a:	e00a      	b.n	8005a22 <UART_SetConfig+0x18d2>
 8005a0c:	230a      	movs	r3, #10
 8005a0e:	e008      	b.n	8005a22 <UART_SetConfig+0x18d2>
 8005a10:	2308      	movs	r3, #8
 8005a12:	e006      	b.n	8005a22 <UART_SetConfig+0x18d2>
 8005a14:	2306      	movs	r3, #6
 8005a16:	e004      	b.n	8005a22 <UART_SetConfig+0x18d2>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	e002      	b.n	8005a22 <UART_SetConfig+0x18d2>
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	e000      	b.n	8005a22 <UART_SetConfig+0x18d2>
 8005a20:	2301      	movs	r3, #1
 8005a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a26:	005a      	lsls	r2, r3, #1
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	085b      	lsrs	r3, r3, #1
 8005a2e:	441a      	add	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8005a3c:	e133      	b.n	8005ca6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d043      	beq.n	8005ace <UART_SetConfig+0x197e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d03d      	beq.n	8005aca <UART_SetConfig+0x197a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d037      	beq.n	8005ac6 <UART_SetConfig+0x1976>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d031      	beq.n	8005ac2 <UART_SetConfig+0x1972>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d02b      	beq.n	8005abe <UART_SetConfig+0x196e>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	2b05      	cmp	r3, #5
 8005a6c:	d025      	beq.n	8005aba <UART_SetConfig+0x196a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	2b06      	cmp	r3, #6
 8005a74:	d01f      	beq.n	8005ab6 <UART_SetConfig+0x1966>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	2b07      	cmp	r3, #7
 8005a7c:	d019      	beq.n	8005ab2 <UART_SetConfig+0x1962>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	2b08      	cmp	r3, #8
 8005a84:	d013      	beq.n	8005aae <UART_SetConfig+0x195e>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	2b09      	cmp	r3, #9
 8005a8c:	d00d      	beq.n	8005aaa <UART_SetConfig+0x195a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	2b0a      	cmp	r3, #10
 8005a94:	d007      	beq.n	8005aa6 <UART_SetConfig+0x1956>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	2b0b      	cmp	r3, #11
 8005a9c:	d101      	bne.n	8005aa2 <UART_SetConfig+0x1952>
 8005a9e:	4b3f      	ldr	r3, [pc, #252]	; (8005b9c <UART_SetConfig+0x1a4c>)
 8005aa0:	e016      	b.n	8005ad0 <UART_SetConfig+0x1980>
 8005aa2:	4b3f      	ldr	r3, [pc, #252]	; (8005ba0 <UART_SetConfig+0x1a50>)
 8005aa4:	e014      	b.n	8005ad0 <UART_SetConfig+0x1980>
 8005aa6:	4b3f      	ldr	r3, [pc, #252]	; (8005ba4 <UART_SetConfig+0x1a54>)
 8005aa8:	e012      	b.n	8005ad0 <UART_SetConfig+0x1980>
 8005aaa:	4b3f      	ldr	r3, [pc, #252]	; (8005ba8 <UART_SetConfig+0x1a58>)
 8005aac:	e010      	b.n	8005ad0 <UART_SetConfig+0x1980>
 8005aae:	4b3f      	ldr	r3, [pc, #252]	; (8005bac <UART_SetConfig+0x1a5c>)
 8005ab0:	e00e      	b.n	8005ad0 <UART_SetConfig+0x1980>
 8005ab2:	4b3f      	ldr	r3, [pc, #252]	; (8005bb0 <UART_SetConfig+0x1a60>)
 8005ab4:	e00c      	b.n	8005ad0 <UART_SetConfig+0x1980>
 8005ab6:	4b3f      	ldr	r3, [pc, #252]	; (8005bb4 <UART_SetConfig+0x1a64>)
 8005ab8:	e00a      	b.n	8005ad0 <UART_SetConfig+0x1980>
 8005aba:	4b3f      	ldr	r3, [pc, #252]	; (8005bb8 <UART_SetConfig+0x1a68>)
 8005abc:	e008      	b.n	8005ad0 <UART_SetConfig+0x1980>
 8005abe:	4b3f      	ldr	r3, [pc, #252]	; (8005bbc <UART_SetConfig+0x1a6c>)
 8005ac0:	e006      	b.n	8005ad0 <UART_SetConfig+0x1980>
 8005ac2:	4b3f      	ldr	r3, [pc, #252]	; (8005bc0 <UART_SetConfig+0x1a70>)
 8005ac4:	e004      	b.n	8005ad0 <UART_SetConfig+0x1980>
 8005ac6:	4b3f      	ldr	r3, [pc, #252]	; (8005bc4 <UART_SetConfig+0x1a74>)
 8005ac8:	e002      	b.n	8005ad0 <UART_SetConfig+0x1980>
 8005aca:	4b33      	ldr	r3, [pc, #204]	; (8005b98 <UART_SetConfig+0x1a48>)
 8005acc:	e000      	b.n	8005ad0 <UART_SetConfig+0x1980>
 8005ace:	4b34      	ldr	r3, [pc, #208]	; (8005ba0 <UART_SetConfig+0x1a50>)
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6852      	ldr	r2, [r2, #4]
 8005ad4:	0852      	lsrs	r2, r2, #1
 8005ad6:	441a      	add	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ae4:	e0df      	b.n	8005ca6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d045      	beq.n	8005b7a <UART_SetConfig+0x1a2a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d03f      	beq.n	8005b76 <UART_SetConfig+0x1a26>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d039      	beq.n	8005b72 <UART_SetConfig+0x1a22>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d033      	beq.n	8005b6e <UART_SetConfig+0x1a1e>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d02d      	beq.n	8005b6a <UART_SetConfig+0x1a1a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	2b05      	cmp	r3, #5
 8005b14:	d027      	beq.n	8005b66 <UART_SetConfig+0x1a16>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	2b06      	cmp	r3, #6
 8005b1c:	d021      	beq.n	8005b62 <UART_SetConfig+0x1a12>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	2b07      	cmp	r3, #7
 8005b24:	d01b      	beq.n	8005b5e <UART_SetConfig+0x1a0e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d015      	beq.n	8005b5a <UART_SetConfig+0x1a0a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	2b09      	cmp	r3, #9
 8005b34:	d00f      	beq.n	8005b56 <UART_SetConfig+0x1a06>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	2b0a      	cmp	r3, #10
 8005b3c:	d008      	beq.n	8005b50 <UART_SetConfig+0x1a00>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	2b0b      	cmp	r3, #11
 8005b44:	d102      	bne.n	8005b4c <UART_SetConfig+0x19fc>
 8005b46:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005b4a:	e017      	b.n	8005b7c <UART_SetConfig+0x1a2c>
 8005b4c:	4b18      	ldr	r3, [pc, #96]	; (8005bb0 <UART_SetConfig+0x1a60>)
 8005b4e:	e015      	b.n	8005b7c <UART_SetConfig+0x1a2c>
 8005b50:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005b54:	e012      	b.n	8005b7c <UART_SetConfig+0x1a2c>
 8005b56:	4b1c      	ldr	r3, [pc, #112]	; (8005bc8 <UART_SetConfig+0x1a78>)
 8005b58:	e010      	b.n	8005b7c <UART_SetConfig+0x1a2c>
 8005b5a:	4b1c      	ldr	r3, [pc, #112]	; (8005bcc <UART_SetConfig+0x1a7c>)
 8005b5c:	e00e      	b.n	8005b7c <UART_SetConfig+0x1a2c>
 8005b5e:	4b0f      	ldr	r3, [pc, #60]	; (8005b9c <UART_SetConfig+0x1a4c>)
 8005b60:	e00c      	b.n	8005b7c <UART_SetConfig+0x1a2c>
 8005b62:	4b1b      	ldr	r3, [pc, #108]	; (8005bd0 <UART_SetConfig+0x1a80>)
 8005b64:	e00a      	b.n	8005b7c <UART_SetConfig+0x1a2c>
 8005b66:	4b1b      	ldr	r3, [pc, #108]	; (8005bd4 <UART_SetConfig+0x1a84>)
 8005b68:	e008      	b.n	8005b7c <UART_SetConfig+0x1a2c>
 8005b6a:	4b0e      	ldr	r3, [pc, #56]	; (8005ba4 <UART_SetConfig+0x1a54>)
 8005b6c:	e006      	b.n	8005b7c <UART_SetConfig+0x1a2c>
 8005b6e:	4b1a      	ldr	r3, [pc, #104]	; (8005bd8 <UART_SetConfig+0x1a88>)
 8005b70:	e004      	b.n	8005b7c <UART_SetConfig+0x1a2c>
 8005b72:	4b0d      	ldr	r3, [pc, #52]	; (8005ba8 <UART_SetConfig+0x1a58>)
 8005b74:	e002      	b.n	8005b7c <UART_SetConfig+0x1a2c>
 8005b76:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <UART_SetConfig+0x1a5c>)
 8005b78:	e000      	b.n	8005b7c <UART_SetConfig+0x1a2c>
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	; (8005bb0 <UART_SetConfig+0x1a60>)
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6852      	ldr	r2, [r2, #4]
 8005b80:	0852      	lsrs	r2, r2, #1
 8005b82:	441a      	add	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b90:	e089      	b.n	8005ca6 <UART_SetConfig+0x1b56>
 8005b92:	bf00      	nop
 8005b94:	58024400 	.word	0x58024400
 8005b98:	03d09000 	.word	0x03d09000
 8005b9c:	0007a120 	.word	0x0007a120
 8005ba0:	07a12000 	.word	0x07a12000
 8005ba4:	000f4240 	.word	0x000f4240
 8005ba8:	001e8480 	.word	0x001e8480
 8005bac:	003d0900 	.word	0x003d0900
 8005bb0:	007a1200 	.word	0x007a1200
 8005bb4:	00a2c2aa 	.word	0x00a2c2aa
 8005bb8:	00c35000 	.word	0x00c35000
 8005bbc:	00f42400 	.word	0x00f42400
 8005bc0:	01458554 	.word	0x01458554
 8005bc4:	01e84800 	.word	0x01e84800
 8005bc8:	0001e848 	.word	0x0001e848
 8005bcc:	0003d090 	.word	0x0003d090
 8005bd0:	000a2c2a 	.word	0x000a2c2a
 8005bd4:	000c3500 	.word	0x000c3500
 8005bd8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d04f      	beq.n	8005c84 <UART_SetConfig+0x1b34>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d048      	beq.n	8005c7e <UART_SetConfig+0x1b2e>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d041      	beq.n	8005c78 <UART_SetConfig+0x1b28>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d03a      	beq.n	8005c72 <UART_SetConfig+0x1b22>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d033      	beq.n	8005c6c <UART_SetConfig+0x1b1c>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	2b05      	cmp	r3, #5
 8005c0a:	d02c      	beq.n	8005c66 <UART_SetConfig+0x1b16>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	2b06      	cmp	r3, #6
 8005c12:	d025      	beq.n	8005c60 <UART_SetConfig+0x1b10>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	2b07      	cmp	r3, #7
 8005c1a:	d01e      	beq.n	8005c5a <UART_SetConfig+0x1b0a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d017      	beq.n	8005c54 <UART_SetConfig+0x1b04>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	2b09      	cmp	r3, #9
 8005c2a:	d010      	beq.n	8005c4e <UART_SetConfig+0x1afe>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	2b0a      	cmp	r3, #10
 8005c32:	d009      	beq.n	8005c48 <UART_SetConfig+0x1af8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	2b0b      	cmp	r3, #11
 8005c3a:	d102      	bne.n	8005c42 <UART_SetConfig+0x1af2>
 8005c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c40:	e022      	b.n	8005c88 <UART_SetConfig+0x1b38>
 8005c42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c46:	e01f      	b.n	8005c88 <UART_SetConfig+0x1b38>
 8005c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c4c:	e01c      	b.n	8005c88 <UART_SetConfig+0x1b38>
 8005c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c52:	e019      	b.n	8005c88 <UART_SetConfig+0x1b38>
 8005c54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c58:	e016      	b.n	8005c88 <UART_SetConfig+0x1b38>
 8005c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c5e:	e013      	b.n	8005c88 <UART_SetConfig+0x1b38>
 8005c60:	f241 5354 	movw	r3, #5460	; 0x1554
 8005c64:	e010      	b.n	8005c88 <UART_SetConfig+0x1b38>
 8005c66:	f641 1398 	movw	r3, #6552	; 0x1998
 8005c6a:	e00d      	b.n	8005c88 <UART_SetConfig+0x1b38>
 8005c6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c70:	e00a      	b.n	8005c88 <UART_SetConfig+0x1b38>
 8005c72:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005c76:	e007      	b.n	8005c88 <UART_SetConfig+0x1b38>
 8005c78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c7c:	e004      	b.n	8005c88 <UART_SetConfig+0x1b38>
 8005c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c82:	e001      	b.n	8005c88 <UART_SetConfig+0x1b38>
 8005c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6852      	ldr	r2, [r2, #4]
 8005c8c:	0852      	lsrs	r2, r2, #1
 8005c8e:	441a      	add	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c9c:	e003      	b.n	8005ca6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8005ca4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca8:	2b0f      	cmp	r3, #15
 8005caa:	d916      	bls.n	8005cda <UART_SetConfig+0x1b8a>
 8005cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb2:	d212      	bcs.n	8005cda <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	f023 030f 	bic.w	r3, r3, #15
 8005cbc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc0:	085b      	lsrs	r3, r3, #1
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005cd6:	60da      	str	r2, [r3, #12]
 8005cd8:	e3a3      	b.n	8006422 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ce0:	e39f      	b.n	8006422 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8005ce2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005ce6:	2b40      	cmp	r3, #64	; 0x40
 8005ce8:	f200 8388 	bhi.w	80063fc <UART_SetConfig+0x22ac>
 8005cec:	a201      	add	r2, pc, #4	; (adr r2, 8005cf4 <UART_SetConfig+0x1ba4>)
 8005cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf2:	bf00      	nop
 8005cf4:	08005df9 	.word	0x08005df9
 8005cf8:	08005eaf 	.word	0x08005eaf
 8005cfc:	080063fd 	.word	0x080063fd
 8005d00:	080063fd 	.word	0x080063fd
 8005d04:	08005f65 	.word	0x08005f65
 8005d08:	080063fd 	.word	0x080063fd
 8005d0c:	080063fd 	.word	0x080063fd
 8005d10:	080063fd 	.word	0x080063fd
 8005d14:	0800601f 	.word	0x0800601f
 8005d18:	080063fd 	.word	0x080063fd
 8005d1c:	080063fd 	.word	0x080063fd
 8005d20:	080063fd 	.word	0x080063fd
 8005d24:	080063fd 	.word	0x080063fd
 8005d28:	080063fd 	.word	0x080063fd
 8005d2c:	080063fd 	.word	0x080063fd
 8005d30:	080063fd 	.word	0x080063fd
 8005d34:	080060d9 	.word	0x080060d9
 8005d38:	080063fd 	.word	0x080063fd
 8005d3c:	080063fd 	.word	0x080063fd
 8005d40:	080063fd 	.word	0x080063fd
 8005d44:	080063fd 	.word	0x080063fd
 8005d48:	080063fd 	.word	0x080063fd
 8005d4c:	080063fd 	.word	0x080063fd
 8005d50:	080063fd 	.word	0x080063fd
 8005d54:	080063fd 	.word	0x080063fd
 8005d58:	080063fd 	.word	0x080063fd
 8005d5c:	080063fd 	.word	0x080063fd
 8005d60:	080063fd 	.word	0x080063fd
 8005d64:	080063fd 	.word	0x080063fd
 8005d68:	080063fd 	.word	0x080063fd
 8005d6c:	080063fd 	.word	0x080063fd
 8005d70:	080063fd 	.word	0x080063fd
 8005d74:	08006249 	.word	0x08006249
 8005d78:	080063fd 	.word	0x080063fd
 8005d7c:	080063fd 	.word	0x080063fd
 8005d80:	080063fd 	.word	0x080063fd
 8005d84:	080063fd 	.word	0x080063fd
 8005d88:	080063fd 	.word	0x080063fd
 8005d8c:	080063fd 	.word	0x080063fd
 8005d90:	080063fd 	.word	0x080063fd
 8005d94:	080063fd 	.word	0x080063fd
 8005d98:	080063fd 	.word	0x080063fd
 8005d9c:	080063fd 	.word	0x080063fd
 8005da0:	080063fd 	.word	0x080063fd
 8005da4:	080063fd 	.word	0x080063fd
 8005da8:	080063fd 	.word	0x080063fd
 8005dac:	080063fd 	.word	0x080063fd
 8005db0:	080063fd 	.word	0x080063fd
 8005db4:	080063fd 	.word	0x080063fd
 8005db8:	080063fd 	.word	0x080063fd
 8005dbc:	080063fd 	.word	0x080063fd
 8005dc0:	080063fd 	.word	0x080063fd
 8005dc4:	080063fd 	.word	0x080063fd
 8005dc8:	080063fd 	.word	0x080063fd
 8005dcc:	080063fd 	.word	0x080063fd
 8005dd0:	080063fd 	.word	0x080063fd
 8005dd4:	080063fd 	.word	0x080063fd
 8005dd8:	080063fd 	.word	0x080063fd
 8005ddc:	080063fd 	.word	0x080063fd
 8005de0:	080063fd 	.word	0x080063fd
 8005de4:	080063fd 	.word	0x080063fd
 8005de8:	080063fd 	.word	0x080063fd
 8005dec:	080063fd 	.word	0x080063fd
 8005df0:	080063fd 	.word	0x080063fd
 8005df4:	0800633d 	.word	0x0800633d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df8:	f7fc fda6 	bl	8002948 <HAL_RCC_GetPCLK1Freq>
 8005dfc:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d044      	beq.n	8005e90 <UART_SetConfig+0x1d40>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d03e      	beq.n	8005e8c <UART_SetConfig+0x1d3c>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d038      	beq.n	8005e88 <UART_SetConfig+0x1d38>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	2b03      	cmp	r3, #3
 8005e1c:	d032      	beq.n	8005e84 <UART_SetConfig+0x1d34>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	d02c      	beq.n	8005e80 <UART_SetConfig+0x1d30>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	2b05      	cmp	r3, #5
 8005e2c:	d026      	beq.n	8005e7c <UART_SetConfig+0x1d2c>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	2b06      	cmp	r3, #6
 8005e34:	d020      	beq.n	8005e78 <UART_SetConfig+0x1d28>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	2b07      	cmp	r3, #7
 8005e3c:	d01a      	beq.n	8005e74 <UART_SetConfig+0x1d24>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	2b08      	cmp	r3, #8
 8005e44:	d014      	beq.n	8005e70 <UART_SetConfig+0x1d20>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	2b09      	cmp	r3, #9
 8005e4c:	d00e      	beq.n	8005e6c <UART_SetConfig+0x1d1c>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	2b0a      	cmp	r3, #10
 8005e54:	d008      	beq.n	8005e68 <UART_SetConfig+0x1d18>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	2b0b      	cmp	r3, #11
 8005e5c:	d102      	bne.n	8005e64 <UART_SetConfig+0x1d14>
 8005e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e62:	e016      	b.n	8005e92 <UART_SetConfig+0x1d42>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e014      	b.n	8005e92 <UART_SetConfig+0x1d42>
 8005e68:	2380      	movs	r3, #128	; 0x80
 8005e6a:	e012      	b.n	8005e92 <UART_SetConfig+0x1d42>
 8005e6c:	2340      	movs	r3, #64	; 0x40
 8005e6e:	e010      	b.n	8005e92 <UART_SetConfig+0x1d42>
 8005e70:	2320      	movs	r3, #32
 8005e72:	e00e      	b.n	8005e92 <UART_SetConfig+0x1d42>
 8005e74:	2310      	movs	r3, #16
 8005e76:	e00c      	b.n	8005e92 <UART_SetConfig+0x1d42>
 8005e78:	230c      	movs	r3, #12
 8005e7a:	e00a      	b.n	8005e92 <UART_SetConfig+0x1d42>
 8005e7c:	230a      	movs	r3, #10
 8005e7e:	e008      	b.n	8005e92 <UART_SetConfig+0x1d42>
 8005e80:	2308      	movs	r3, #8
 8005e82:	e006      	b.n	8005e92 <UART_SetConfig+0x1d42>
 8005e84:	2306      	movs	r3, #6
 8005e86:	e004      	b.n	8005e92 <UART_SetConfig+0x1d42>
 8005e88:	2304      	movs	r3, #4
 8005e8a:	e002      	b.n	8005e92 <UART_SetConfig+0x1d42>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e000      	b.n	8005e92 <UART_SetConfig+0x1d42>
 8005e90:	2301      	movs	r3, #1
 8005e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e94:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	085b      	lsrs	r3, r3, #1
 8005e9e:	441a      	add	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005eac:	e2aa      	b.n	8006404 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005eae:	f7fc fd61 	bl	8002974 <HAL_RCC_GetPCLK2Freq>
 8005eb2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d044      	beq.n	8005f46 <UART_SetConfig+0x1df6>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d03e      	beq.n	8005f42 <UART_SetConfig+0x1df2>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d038      	beq.n	8005f3e <UART_SetConfig+0x1dee>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d032      	beq.n	8005f3a <UART_SetConfig+0x1dea>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	d02c      	beq.n	8005f36 <UART_SetConfig+0x1de6>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	2b05      	cmp	r3, #5
 8005ee2:	d026      	beq.n	8005f32 <UART_SetConfig+0x1de2>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	2b06      	cmp	r3, #6
 8005eea:	d020      	beq.n	8005f2e <UART_SetConfig+0x1dde>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	2b07      	cmp	r3, #7
 8005ef2:	d01a      	beq.n	8005f2a <UART_SetConfig+0x1dda>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d014      	beq.n	8005f26 <UART_SetConfig+0x1dd6>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	2b09      	cmp	r3, #9
 8005f02:	d00e      	beq.n	8005f22 <UART_SetConfig+0x1dd2>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	2b0a      	cmp	r3, #10
 8005f0a:	d008      	beq.n	8005f1e <UART_SetConfig+0x1dce>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	2b0b      	cmp	r3, #11
 8005f12:	d102      	bne.n	8005f1a <UART_SetConfig+0x1dca>
 8005f14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f18:	e016      	b.n	8005f48 <UART_SetConfig+0x1df8>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e014      	b.n	8005f48 <UART_SetConfig+0x1df8>
 8005f1e:	2380      	movs	r3, #128	; 0x80
 8005f20:	e012      	b.n	8005f48 <UART_SetConfig+0x1df8>
 8005f22:	2340      	movs	r3, #64	; 0x40
 8005f24:	e010      	b.n	8005f48 <UART_SetConfig+0x1df8>
 8005f26:	2320      	movs	r3, #32
 8005f28:	e00e      	b.n	8005f48 <UART_SetConfig+0x1df8>
 8005f2a:	2310      	movs	r3, #16
 8005f2c:	e00c      	b.n	8005f48 <UART_SetConfig+0x1df8>
 8005f2e:	230c      	movs	r3, #12
 8005f30:	e00a      	b.n	8005f48 <UART_SetConfig+0x1df8>
 8005f32:	230a      	movs	r3, #10
 8005f34:	e008      	b.n	8005f48 <UART_SetConfig+0x1df8>
 8005f36:	2308      	movs	r3, #8
 8005f38:	e006      	b.n	8005f48 <UART_SetConfig+0x1df8>
 8005f3a:	2306      	movs	r3, #6
 8005f3c:	e004      	b.n	8005f48 <UART_SetConfig+0x1df8>
 8005f3e:	2304      	movs	r3, #4
 8005f40:	e002      	b.n	8005f48 <UART_SetConfig+0x1df8>
 8005f42:	2302      	movs	r3, #2
 8005f44:	e000      	b.n	8005f48 <UART_SetConfig+0x1df8>
 8005f46:	2301      	movs	r3, #1
 8005f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	085b      	lsrs	r3, r3, #1
 8005f54:	441a      	add	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f62:	e24f      	b.n	8006404 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f64:	f107 0318 	add.w	r3, r7, #24
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fd fc0d 	bl	8003788 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f6e:	69fa      	ldr	r2, [r7, #28]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d044      	beq.n	8006002 <UART_SetConfig+0x1eb2>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d03e      	beq.n	8005ffe <UART_SetConfig+0x1eae>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d038      	beq.n	8005ffa <UART_SetConfig+0x1eaa>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	2b03      	cmp	r3, #3
 8005f8e:	d032      	beq.n	8005ff6 <UART_SetConfig+0x1ea6>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d02c      	beq.n	8005ff2 <UART_SetConfig+0x1ea2>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	2b05      	cmp	r3, #5
 8005f9e:	d026      	beq.n	8005fee <UART_SetConfig+0x1e9e>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	2b06      	cmp	r3, #6
 8005fa6:	d020      	beq.n	8005fea <UART_SetConfig+0x1e9a>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	2b07      	cmp	r3, #7
 8005fae:	d01a      	beq.n	8005fe6 <UART_SetConfig+0x1e96>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	2b08      	cmp	r3, #8
 8005fb6:	d014      	beq.n	8005fe2 <UART_SetConfig+0x1e92>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	2b09      	cmp	r3, #9
 8005fbe:	d00e      	beq.n	8005fde <UART_SetConfig+0x1e8e>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	2b0a      	cmp	r3, #10
 8005fc6:	d008      	beq.n	8005fda <UART_SetConfig+0x1e8a>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	2b0b      	cmp	r3, #11
 8005fce:	d102      	bne.n	8005fd6 <UART_SetConfig+0x1e86>
 8005fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fd4:	e016      	b.n	8006004 <UART_SetConfig+0x1eb4>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e014      	b.n	8006004 <UART_SetConfig+0x1eb4>
 8005fda:	2380      	movs	r3, #128	; 0x80
 8005fdc:	e012      	b.n	8006004 <UART_SetConfig+0x1eb4>
 8005fde:	2340      	movs	r3, #64	; 0x40
 8005fe0:	e010      	b.n	8006004 <UART_SetConfig+0x1eb4>
 8005fe2:	2320      	movs	r3, #32
 8005fe4:	e00e      	b.n	8006004 <UART_SetConfig+0x1eb4>
 8005fe6:	2310      	movs	r3, #16
 8005fe8:	e00c      	b.n	8006004 <UART_SetConfig+0x1eb4>
 8005fea:	230c      	movs	r3, #12
 8005fec:	e00a      	b.n	8006004 <UART_SetConfig+0x1eb4>
 8005fee:	230a      	movs	r3, #10
 8005ff0:	e008      	b.n	8006004 <UART_SetConfig+0x1eb4>
 8005ff2:	2308      	movs	r3, #8
 8005ff4:	e006      	b.n	8006004 <UART_SetConfig+0x1eb4>
 8005ff6:	2306      	movs	r3, #6
 8005ff8:	e004      	b.n	8006004 <UART_SetConfig+0x1eb4>
 8005ffa:	2304      	movs	r3, #4
 8005ffc:	e002      	b.n	8006004 <UART_SetConfig+0x1eb4>
 8005ffe:	2302      	movs	r3, #2
 8006000:	e000      	b.n	8006004 <UART_SetConfig+0x1eb4>
 8006002:	2301      	movs	r3, #1
 8006004:	fbb2 f2f3 	udiv	r2, r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	085b      	lsrs	r3, r3, #1
 800600e:	441a      	add	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	fbb2 f3f3 	udiv	r3, r2, r3
 8006018:	b29b      	uxth	r3, r3
 800601a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800601c:	e1f2      	b.n	8006404 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800601e:	f107 030c 	add.w	r3, r7, #12
 8006022:	4618      	mov	r0, r3
 8006024:	f7fd fcfc 	bl	8003a20 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	2b00      	cmp	r3, #0
 8006030:	d044      	beq.n	80060bc <UART_SetConfig+0x1f6c>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	2b01      	cmp	r3, #1
 8006038:	d03e      	beq.n	80060b8 <UART_SetConfig+0x1f68>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	2b02      	cmp	r3, #2
 8006040:	d038      	beq.n	80060b4 <UART_SetConfig+0x1f64>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	2b03      	cmp	r3, #3
 8006048:	d032      	beq.n	80060b0 <UART_SetConfig+0x1f60>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	2b04      	cmp	r3, #4
 8006050:	d02c      	beq.n	80060ac <UART_SetConfig+0x1f5c>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	2b05      	cmp	r3, #5
 8006058:	d026      	beq.n	80060a8 <UART_SetConfig+0x1f58>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	2b06      	cmp	r3, #6
 8006060:	d020      	beq.n	80060a4 <UART_SetConfig+0x1f54>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	2b07      	cmp	r3, #7
 8006068:	d01a      	beq.n	80060a0 <UART_SetConfig+0x1f50>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	2b08      	cmp	r3, #8
 8006070:	d014      	beq.n	800609c <UART_SetConfig+0x1f4c>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	2b09      	cmp	r3, #9
 8006078:	d00e      	beq.n	8006098 <UART_SetConfig+0x1f48>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	2b0a      	cmp	r3, #10
 8006080:	d008      	beq.n	8006094 <UART_SetConfig+0x1f44>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	2b0b      	cmp	r3, #11
 8006088:	d102      	bne.n	8006090 <UART_SetConfig+0x1f40>
 800608a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800608e:	e016      	b.n	80060be <UART_SetConfig+0x1f6e>
 8006090:	2301      	movs	r3, #1
 8006092:	e014      	b.n	80060be <UART_SetConfig+0x1f6e>
 8006094:	2380      	movs	r3, #128	; 0x80
 8006096:	e012      	b.n	80060be <UART_SetConfig+0x1f6e>
 8006098:	2340      	movs	r3, #64	; 0x40
 800609a:	e010      	b.n	80060be <UART_SetConfig+0x1f6e>
 800609c:	2320      	movs	r3, #32
 800609e:	e00e      	b.n	80060be <UART_SetConfig+0x1f6e>
 80060a0:	2310      	movs	r3, #16
 80060a2:	e00c      	b.n	80060be <UART_SetConfig+0x1f6e>
 80060a4:	230c      	movs	r3, #12
 80060a6:	e00a      	b.n	80060be <UART_SetConfig+0x1f6e>
 80060a8:	230a      	movs	r3, #10
 80060aa:	e008      	b.n	80060be <UART_SetConfig+0x1f6e>
 80060ac:	2308      	movs	r3, #8
 80060ae:	e006      	b.n	80060be <UART_SetConfig+0x1f6e>
 80060b0:	2306      	movs	r3, #6
 80060b2:	e004      	b.n	80060be <UART_SetConfig+0x1f6e>
 80060b4:	2304      	movs	r3, #4
 80060b6:	e002      	b.n	80060be <UART_SetConfig+0x1f6e>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e000      	b.n	80060be <UART_SetConfig+0x1f6e>
 80060bc:	2301      	movs	r3, #1
 80060be:	fbb2 f2f3 	udiv	r2, r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	085b      	lsrs	r3, r3, #1
 80060c8:	441a      	add	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060d6:	e195      	b.n	8006404 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060d8:	4b87      	ldr	r3, [pc, #540]	; (80062f8 <UART_SetConfig+0x21a8>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0320 	and.w	r3, r3, #32
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d05d      	beq.n	80061a0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060e4:	4b84      	ldr	r3, [pc, #528]	; (80062f8 <UART_SetConfig+0x21a8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	08db      	lsrs	r3, r3, #3
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	4a83      	ldr	r2, [pc, #524]	; (80062fc <UART_SetConfig+0x21ac>)
 80060f0:	40da      	lsrs	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d044      	beq.n	8006184 <UART_SetConfig+0x2034>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d03e      	beq.n	8006180 <UART_SetConfig+0x2030>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	2b02      	cmp	r3, #2
 8006108:	d038      	beq.n	800617c <UART_SetConfig+0x202c>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	2b03      	cmp	r3, #3
 8006110:	d032      	beq.n	8006178 <UART_SetConfig+0x2028>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	2b04      	cmp	r3, #4
 8006118:	d02c      	beq.n	8006174 <UART_SetConfig+0x2024>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	2b05      	cmp	r3, #5
 8006120:	d026      	beq.n	8006170 <UART_SetConfig+0x2020>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	2b06      	cmp	r3, #6
 8006128:	d020      	beq.n	800616c <UART_SetConfig+0x201c>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	2b07      	cmp	r3, #7
 8006130:	d01a      	beq.n	8006168 <UART_SetConfig+0x2018>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	2b08      	cmp	r3, #8
 8006138:	d014      	beq.n	8006164 <UART_SetConfig+0x2014>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	2b09      	cmp	r3, #9
 8006140:	d00e      	beq.n	8006160 <UART_SetConfig+0x2010>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	2b0a      	cmp	r3, #10
 8006148:	d008      	beq.n	800615c <UART_SetConfig+0x200c>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	2b0b      	cmp	r3, #11
 8006150:	d102      	bne.n	8006158 <UART_SetConfig+0x2008>
 8006152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006156:	e016      	b.n	8006186 <UART_SetConfig+0x2036>
 8006158:	2301      	movs	r3, #1
 800615a:	e014      	b.n	8006186 <UART_SetConfig+0x2036>
 800615c:	2380      	movs	r3, #128	; 0x80
 800615e:	e012      	b.n	8006186 <UART_SetConfig+0x2036>
 8006160:	2340      	movs	r3, #64	; 0x40
 8006162:	e010      	b.n	8006186 <UART_SetConfig+0x2036>
 8006164:	2320      	movs	r3, #32
 8006166:	e00e      	b.n	8006186 <UART_SetConfig+0x2036>
 8006168:	2310      	movs	r3, #16
 800616a:	e00c      	b.n	8006186 <UART_SetConfig+0x2036>
 800616c:	230c      	movs	r3, #12
 800616e:	e00a      	b.n	8006186 <UART_SetConfig+0x2036>
 8006170:	230a      	movs	r3, #10
 8006172:	e008      	b.n	8006186 <UART_SetConfig+0x2036>
 8006174:	2308      	movs	r3, #8
 8006176:	e006      	b.n	8006186 <UART_SetConfig+0x2036>
 8006178:	2306      	movs	r3, #6
 800617a:	e004      	b.n	8006186 <UART_SetConfig+0x2036>
 800617c:	2304      	movs	r3, #4
 800617e:	e002      	b.n	8006186 <UART_SetConfig+0x2036>
 8006180:	2302      	movs	r3, #2
 8006182:	e000      	b.n	8006186 <UART_SetConfig+0x2036>
 8006184:	2301      	movs	r3, #1
 8006186:	fbb2 f2f3 	udiv	r2, r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	085b      	lsrs	r3, r3, #1
 8006190:	441a      	add	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	fbb2 f3f3 	udiv	r3, r2, r3
 800619a:	b29b      	uxth	r3, r3
 800619c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800619e:	e131      	b.n	8006404 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d043      	beq.n	8006230 <UART_SetConfig+0x20e0>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d03d      	beq.n	800622c <UART_SetConfig+0x20dc>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d037      	beq.n	8006228 <UART_SetConfig+0x20d8>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	2b03      	cmp	r3, #3
 80061be:	d031      	beq.n	8006224 <UART_SetConfig+0x20d4>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d02b      	beq.n	8006220 <UART_SetConfig+0x20d0>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	2b05      	cmp	r3, #5
 80061ce:	d025      	beq.n	800621c <UART_SetConfig+0x20cc>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	2b06      	cmp	r3, #6
 80061d6:	d01f      	beq.n	8006218 <UART_SetConfig+0x20c8>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	2b07      	cmp	r3, #7
 80061de:	d019      	beq.n	8006214 <UART_SetConfig+0x20c4>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d013      	beq.n	8006210 <UART_SetConfig+0x20c0>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	2b09      	cmp	r3, #9
 80061ee:	d00d      	beq.n	800620c <UART_SetConfig+0x20bc>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	2b0a      	cmp	r3, #10
 80061f6:	d007      	beq.n	8006208 <UART_SetConfig+0x20b8>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	2b0b      	cmp	r3, #11
 80061fe:	d101      	bne.n	8006204 <UART_SetConfig+0x20b4>
 8006200:	4b3f      	ldr	r3, [pc, #252]	; (8006300 <UART_SetConfig+0x21b0>)
 8006202:	e016      	b.n	8006232 <UART_SetConfig+0x20e2>
 8006204:	4b3d      	ldr	r3, [pc, #244]	; (80062fc <UART_SetConfig+0x21ac>)
 8006206:	e014      	b.n	8006232 <UART_SetConfig+0x20e2>
 8006208:	4b3e      	ldr	r3, [pc, #248]	; (8006304 <UART_SetConfig+0x21b4>)
 800620a:	e012      	b.n	8006232 <UART_SetConfig+0x20e2>
 800620c:	4b3e      	ldr	r3, [pc, #248]	; (8006308 <UART_SetConfig+0x21b8>)
 800620e:	e010      	b.n	8006232 <UART_SetConfig+0x20e2>
 8006210:	4b3e      	ldr	r3, [pc, #248]	; (800630c <UART_SetConfig+0x21bc>)
 8006212:	e00e      	b.n	8006232 <UART_SetConfig+0x20e2>
 8006214:	4b3e      	ldr	r3, [pc, #248]	; (8006310 <UART_SetConfig+0x21c0>)
 8006216:	e00c      	b.n	8006232 <UART_SetConfig+0x20e2>
 8006218:	4b3e      	ldr	r3, [pc, #248]	; (8006314 <UART_SetConfig+0x21c4>)
 800621a:	e00a      	b.n	8006232 <UART_SetConfig+0x20e2>
 800621c:	4b3e      	ldr	r3, [pc, #248]	; (8006318 <UART_SetConfig+0x21c8>)
 800621e:	e008      	b.n	8006232 <UART_SetConfig+0x20e2>
 8006220:	4b3e      	ldr	r3, [pc, #248]	; (800631c <UART_SetConfig+0x21cc>)
 8006222:	e006      	b.n	8006232 <UART_SetConfig+0x20e2>
 8006224:	4b3e      	ldr	r3, [pc, #248]	; (8006320 <UART_SetConfig+0x21d0>)
 8006226:	e004      	b.n	8006232 <UART_SetConfig+0x20e2>
 8006228:	4b3e      	ldr	r3, [pc, #248]	; (8006324 <UART_SetConfig+0x21d4>)
 800622a:	e002      	b.n	8006232 <UART_SetConfig+0x20e2>
 800622c:	4b3e      	ldr	r3, [pc, #248]	; (8006328 <UART_SetConfig+0x21d8>)
 800622e:	e000      	b.n	8006232 <UART_SetConfig+0x20e2>
 8006230:	4b32      	ldr	r3, [pc, #200]	; (80062fc <UART_SetConfig+0x21ac>)
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6852      	ldr	r2, [r2, #4]
 8006236:	0852      	lsrs	r2, r2, #1
 8006238:	441a      	add	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006242:	b29b      	uxth	r3, r3
 8006244:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006246:	e0dd      	b.n	8006404 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	2b00      	cmp	r3, #0
 800624e:	d046      	beq.n	80062de <UART_SetConfig+0x218e>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	2b01      	cmp	r3, #1
 8006256:	d040      	beq.n	80062da <UART_SetConfig+0x218a>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625c:	2b02      	cmp	r3, #2
 800625e:	d03a      	beq.n	80062d6 <UART_SetConfig+0x2186>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	2b03      	cmp	r3, #3
 8006266:	d034      	beq.n	80062d2 <UART_SetConfig+0x2182>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	2b04      	cmp	r3, #4
 800626e:	d02e      	beq.n	80062ce <UART_SetConfig+0x217e>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006274:	2b05      	cmp	r3, #5
 8006276:	d028      	beq.n	80062ca <UART_SetConfig+0x217a>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	2b06      	cmp	r3, #6
 800627e:	d022      	beq.n	80062c6 <UART_SetConfig+0x2176>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	2b07      	cmp	r3, #7
 8006286:	d01c      	beq.n	80062c2 <UART_SetConfig+0x2172>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	2b08      	cmp	r3, #8
 800628e:	d016      	beq.n	80062be <UART_SetConfig+0x216e>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	2b09      	cmp	r3, #9
 8006296:	d00f      	beq.n	80062b8 <UART_SetConfig+0x2168>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629c:	2b0a      	cmp	r3, #10
 800629e:	d008      	beq.n	80062b2 <UART_SetConfig+0x2162>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	2b0b      	cmp	r3, #11
 80062a6:	d102      	bne.n	80062ae <UART_SetConfig+0x215e>
 80062a8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80062ac:	e018      	b.n	80062e0 <UART_SetConfig+0x2190>
 80062ae:	4b18      	ldr	r3, [pc, #96]	; (8006310 <UART_SetConfig+0x21c0>)
 80062b0:	e016      	b.n	80062e0 <UART_SetConfig+0x2190>
 80062b2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80062b6:	e013      	b.n	80062e0 <UART_SetConfig+0x2190>
 80062b8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80062bc:	e010      	b.n	80062e0 <UART_SetConfig+0x2190>
 80062be:	4b1b      	ldr	r3, [pc, #108]	; (800632c <UART_SetConfig+0x21dc>)
 80062c0:	e00e      	b.n	80062e0 <UART_SetConfig+0x2190>
 80062c2:	4b0f      	ldr	r3, [pc, #60]	; (8006300 <UART_SetConfig+0x21b0>)
 80062c4:	e00c      	b.n	80062e0 <UART_SetConfig+0x2190>
 80062c6:	4b1a      	ldr	r3, [pc, #104]	; (8006330 <UART_SetConfig+0x21e0>)
 80062c8:	e00a      	b.n	80062e0 <UART_SetConfig+0x2190>
 80062ca:	4b1a      	ldr	r3, [pc, #104]	; (8006334 <UART_SetConfig+0x21e4>)
 80062cc:	e008      	b.n	80062e0 <UART_SetConfig+0x2190>
 80062ce:	4b0d      	ldr	r3, [pc, #52]	; (8006304 <UART_SetConfig+0x21b4>)
 80062d0:	e006      	b.n	80062e0 <UART_SetConfig+0x2190>
 80062d2:	4b19      	ldr	r3, [pc, #100]	; (8006338 <UART_SetConfig+0x21e8>)
 80062d4:	e004      	b.n	80062e0 <UART_SetConfig+0x2190>
 80062d6:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <UART_SetConfig+0x21b8>)
 80062d8:	e002      	b.n	80062e0 <UART_SetConfig+0x2190>
 80062da:	4b0c      	ldr	r3, [pc, #48]	; (800630c <UART_SetConfig+0x21bc>)
 80062dc:	e000      	b.n	80062e0 <UART_SetConfig+0x2190>
 80062de:	4b0c      	ldr	r3, [pc, #48]	; (8006310 <UART_SetConfig+0x21c0>)
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6852      	ldr	r2, [r2, #4]
 80062e4:	0852      	lsrs	r2, r2, #1
 80062e6:	441a      	add	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062f4:	e086      	b.n	8006404 <UART_SetConfig+0x22b4>
 80062f6:	bf00      	nop
 80062f8:	58024400 	.word	0x58024400
 80062fc:	03d09000 	.word	0x03d09000
 8006300:	0003d090 	.word	0x0003d090
 8006304:	0007a120 	.word	0x0007a120
 8006308:	000f4240 	.word	0x000f4240
 800630c:	001e8480 	.word	0x001e8480
 8006310:	003d0900 	.word	0x003d0900
 8006314:	00516155 	.word	0x00516155
 8006318:	0061a800 	.word	0x0061a800
 800631c:	007a1200 	.word	0x007a1200
 8006320:	00a2c2aa 	.word	0x00a2c2aa
 8006324:	00f42400 	.word	0x00f42400
 8006328:	01e84800 	.word	0x01e84800
 800632c:	0001e848 	.word	0x0001e848
 8006330:	00051615 	.word	0x00051615
 8006334:	00061a80 	.word	0x00061a80
 8006338:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	2b00      	cmp	r3, #0
 8006342:	d04e      	beq.n	80063e2 <UART_SetConfig+0x2292>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	2b01      	cmp	r3, #1
 800634a:	d047      	beq.n	80063dc <UART_SetConfig+0x228c>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	2b02      	cmp	r3, #2
 8006352:	d040      	beq.n	80063d6 <UART_SetConfig+0x2286>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	2b03      	cmp	r3, #3
 800635a:	d039      	beq.n	80063d0 <UART_SetConfig+0x2280>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	2b04      	cmp	r3, #4
 8006362:	d032      	beq.n	80063ca <UART_SetConfig+0x227a>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	2b05      	cmp	r3, #5
 800636a:	d02b      	beq.n	80063c4 <UART_SetConfig+0x2274>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	2b06      	cmp	r3, #6
 8006372:	d024      	beq.n	80063be <UART_SetConfig+0x226e>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	2b07      	cmp	r3, #7
 800637a:	d01d      	beq.n	80063b8 <UART_SetConfig+0x2268>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	2b08      	cmp	r3, #8
 8006382:	d016      	beq.n	80063b2 <UART_SetConfig+0x2262>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	2b09      	cmp	r3, #9
 800638a:	d00f      	beq.n	80063ac <UART_SetConfig+0x225c>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	2b0a      	cmp	r3, #10
 8006392:	d008      	beq.n	80063a6 <UART_SetConfig+0x2256>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	2b0b      	cmp	r3, #11
 800639a:	d101      	bne.n	80063a0 <UART_SetConfig+0x2250>
 800639c:	2380      	movs	r3, #128	; 0x80
 800639e:	e022      	b.n	80063e6 <UART_SetConfig+0x2296>
 80063a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063a4:	e01f      	b.n	80063e6 <UART_SetConfig+0x2296>
 80063a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063aa:	e01c      	b.n	80063e6 <UART_SetConfig+0x2296>
 80063ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063b0:	e019      	b.n	80063e6 <UART_SetConfig+0x2296>
 80063b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063b6:	e016      	b.n	80063e6 <UART_SetConfig+0x2296>
 80063b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063bc:	e013      	b.n	80063e6 <UART_SetConfig+0x2296>
 80063be:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80063c2:	e010      	b.n	80063e6 <UART_SetConfig+0x2296>
 80063c4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80063c8:	e00d      	b.n	80063e6 <UART_SetConfig+0x2296>
 80063ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063ce:	e00a      	b.n	80063e6 <UART_SetConfig+0x2296>
 80063d0:	f241 5355 	movw	r3, #5461	; 0x1555
 80063d4:	e007      	b.n	80063e6 <UART_SetConfig+0x2296>
 80063d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063da:	e004      	b.n	80063e6 <UART_SetConfig+0x2296>
 80063dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063e0:	e001      	b.n	80063e6 <UART_SetConfig+0x2296>
 80063e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6852      	ldr	r2, [r2, #4]
 80063ea:	0852      	lsrs	r2, r2, #1
 80063ec:	441a      	add	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063fa:	e003      	b.n	8006404 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8006402:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006406:	2b0f      	cmp	r3, #15
 8006408:	d908      	bls.n	800641c <UART_SetConfig+0x22cc>
 800640a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006410:	d204      	bcs.n	800641c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006418:	60da      	str	r2, [r3, #12]
 800641a:	e002      	b.n	8006422 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800643e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006442:	4618      	mov	r0, r3
 8006444:	3740      	adds	r7, #64	; 0x40
 8006446:	46bd      	mov	sp, r7
 8006448:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800644c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00a      	beq.n	8006476 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00a      	beq.n	8006498 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00a      	beq.n	80064ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064be:	f003 0308 	and.w	r3, r3, #8
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e0:	f003 0310 	and.w	r3, r3, #16
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00a      	beq.n	80064fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006502:	f003 0320 	and.w	r3, r3, #32
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01a      	beq.n	8006562 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800654a:	d10a      	bne.n	8006562 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00a      	beq.n	8006584 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	605a      	str	r2, [r3, #4]
  }
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af02      	add	r7, sp, #8
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80065a0:	f7fa f8fc 	bl	800079c <HAL_GetTick>
 80065a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0308 	and.w	r3, r3, #8
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d10e      	bne.n	80065d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f82c 	bl	8006620 <UART_WaitOnFlagUntilTimeout>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e022      	b.n	8006618 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b04      	cmp	r3, #4
 80065de:	d10e      	bne.n	80065fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f816 	bl	8006620 <UART_WaitOnFlagUntilTimeout>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e00c      	b.n	8006618 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2220      	movs	r2, #32
 8006602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2220      	movs	r2, #32
 800660a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	4613      	mov	r3, r2
 800662e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006630:	e062      	b.n	80066f8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006638:	d05e      	beq.n	80066f8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800663a:	f7fa f8af 	bl	800079c <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	429a      	cmp	r2, r3
 8006648:	d302      	bcc.n	8006650 <UART_WaitOnFlagUntilTimeout+0x30>
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d11d      	bne.n	800668c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800665e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0201 	bic.w	r2, r2, #1
 800666e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2220      	movs	r2, #32
 8006674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2220      	movs	r2, #32
 800667c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e045      	b.n	8006718 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b00      	cmp	r3, #0
 8006698:	d02e      	beq.n	80066f8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066a8:	d126      	bne.n	80066f8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066b2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066c2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0201 	bic.w	r2, r2, #1
 80066d2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2220      	movs	r2, #32
 80066e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e00f      	b.n	8006718 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	69da      	ldr	r2, [r3, #28]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	4013      	ands	r3, r2
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	429a      	cmp	r2, r3
 8006706:	bf0c      	ite	eq
 8006708:	2301      	moveq	r3, #1
 800670a:	2300      	movne	r3, #0
 800670c:	b2db      	uxtb	r3, r3
 800670e:	461a      	mov	r2, r3
 8006710:	79fb      	ldrb	r3, [r7, #7]
 8006712:	429a      	cmp	r2, r3
 8006714:	d08d      	beq.n	8006632 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800672e:	2b01      	cmp	r3, #1
 8006730:	d101      	bne.n	8006736 <HAL_UARTEx_DisableFifoMode+0x16>
 8006732:	2302      	movs	r3, #2
 8006734:	e027      	b.n	8006786 <HAL_UARTEx_DisableFifoMode+0x66>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2224      	movs	r2, #36	; 0x24
 8006742:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0201 	bic.w	r2, r2, #1
 800675c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006764:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2220      	movs	r2, #32
 8006778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b084      	sub	sp, #16
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d101      	bne.n	80067aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067a6:	2302      	movs	r3, #2
 80067a8:	e02d      	b.n	8006806 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2224      	movs	r2, #36	; 0x24
 80067b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0201 	bic.w	r2, r2, #1
 80067d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f850 	bl	800688c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800681e:	2b01      	cmp	r3, #1
 8006820:	d101      	bne.n	8006826 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006822:	2302      	movs	r3, #2
 8006824:	e02d      	b.n	8006882 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2224      	movs	r2, #36	; 0x24
 8006832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0201 	bic.w	r2, r2, #1
 800684c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f812 	bl	800688c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2220      	movs	r2, #32
 8006874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
	...

0800688c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800688c:	b480      	push	{r7}
 800688e:	b089      	sub	sp, #36	; 0x24
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006894:	4a2f      	ldr	r2, [pc, #188]	; (8006954 <UARTEx_SetNbDataToProcess+0xc8>)
 8006896:	f107 0314 	add.w	r3, r7, #20
 800689a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800689e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80068a2:	4a2d      	ldr	r2, [pc, #180]	; (8006958 <UARTEx_SetNbDataToProcess+0xcc>)
 80068a4:	f107 030c 	add.w	r3, r7, #12
 80068a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068ac:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d108      	bne.n	80068ca <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068c8:	e03d      	b.n	8006946 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068ca:	2308      	movs	r3, #8
 80068cc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068ce:	2308      	movs	r3, #8
 80068d0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	0e5b      	lsrs	r3, r3, #25
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	f003 0307 	and.w	r3, r3, #7
 80068e0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	0f5b      	lsrs	r3, r3, #29
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	f003 0307 	and.w	r3, r3, #7
 80068f0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80068f2:	7fbb      	ldrb	r3, [r7, #30]
 80068f4:	7f3a      	ldrb	r2, [r7, #28]
 80068f6:	f107 0120 	add.w	r1, r7, #32
 80068fa:	440a      	add	r2, r1
 80068fc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006900:	fb02 f303 	mul.w	r3, r2, r3
 8006904:	7f3a      	ldrb	r2, [r7, #28]
 8006906:	f107 0120 	add.w	r1, r7, #32
 800690a:	440a      	add	r2, r1
 800690c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006910:	fb93 f3f2 	sdiv	r3, r3, r2
 8006914:	b29a      	uxth	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800691c:	7ffb      	ldrb	r3, [r7, #31]
 800691e:	7f7a      	ldrb	r2, [r7, #29]
 8006920:	f107 0120 	add.w	r1, r7, #32
 8006924:	440a      	add	r2, r1
 8006926:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800692a:	fb02 f303 	mul.w	r3, r2, r3
 800692e:	7f7a      	ldrb	r2, [r7, #29]
 8006930:	f107 0120 	add.w	r1, r7, #32
 8006934:	440a      	add	r2, r1
 8006936:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800693a:	fb93 f3f2 	sdiv	r3, r3, r2
 800693e:	b29a      	uxth	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006946:	bf00      	nop
 8006948:	3724      	adds	r7, #36	; 0x24
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	0800f978 	.word	0x0800f978
 8006958:	0800f980 	.word	0x0800f980

0800695c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800695c:	b084      	sub	sp, #16
 800695e:	b580      	push	{r7, lr}
 8006960:	b084      	sub	sp, #16
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	f107 001c 	add.w	r0, r7, #28
 800696a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	2b01      	cmp	r3, #1
 8006972:	d120      	bne.n	80069b6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006978:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	4b25      	ldr	r3, [pc, #148]	; (8006a1c <USB_CoreInit+0xc0>)
 8006986:	4013      	ands	r3, r2
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699a:	2b01      	cmp	r3, #1
 800699c:	d105      	bne.n	80069aa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fa4c 	bl	8006e48 <USB_CoreReset>
 80069b0:	4603      	mov	r3, r0
 80069b2:	73fb      	strb	r3, [r7, #15]
 80069b4:	e01a      	b.n	80069ec <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fa40 	bl	8006e48 <USB_CoreReset>
 80069c8:	4603      	mov	r3, r0
 80069ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d106      	bne.n	80069e0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	639a      	str	r2, [r3, #56]	; 0x38
 80069de:	e005      	b.n	80069ec <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d10b      	bne.n	8006a0a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f043 0206 	orr.w	r2, r3, #6
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f043 0220 	orr.w	r2, r3, #32
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a16:	b004      	add	sp, #16
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	ffbdffbf 	.word	0xffbdffbf

08006a20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f023 0201 	bic.w	r2, r3, #1
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b082      	sub	sp, #8
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a5a:	78fb      	ldrb	r3, [r7, #3]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d106      	bne.n	8006a6e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	60da      	str	r2, [r3, #12]
 8006a6c:	e00b      	b.n	8006a86 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a6e:	78fb      	ldrb	r3, [r7, #3]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d106      	bne.n	8006a82 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	60da      	str	r2, [r3, #12]
 8006a80:	e001      	b.n	8006a86 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e003      	b.n	8006a8e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006a86:	2032      	movs	r0, #50	; 0x32
 8006a88:	f7f9 fe94 	bl	80007b4 <HAL_Delay>

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a98:	b084      	sub	sp, #16
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b086      	sub	sp, #24
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006aa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	613b      	str	r3, [r7, #16]
 8006ab6:	e009      	b.n	8006acc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	3340      	adds	r3, #64	; 0x40
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	613b      	str	r3, [r7, #16]
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	2b0e      	cmp	r3, #14
 8006ad0:	d9f2      	bls.n	8006ab8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d11c      	bne.n	8006b12 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ae6:	f043 0302 	orr.w	r3, r3, #2
 8006aea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	601a      	str	r2, [r3, #0]
 8006b10:	e005      	b.n	8006b1e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b24:	461a      	mov	r2, r3
 8006b26:	2300      	movs	r3, #0
 8006b28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b30:	4619      	mov	r1, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b38:	461a      	mov	r2, r3
 8006b3a:	680b      	ldr	r3, [r1, #0]
 8006b3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d10c      	bne.n	8006b5e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d104      	bne.n	8006b54 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f949 	bl	8006de4 <USB_SetDevSpeed>
 8006b52:	e008      	b.n	8006b66 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b54:	2101      	movs	r1, #1
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f944 	bl	8006de4 <USB_SetDevSpeed>
 8006b5c:	e003      	b.n	8006b66 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b5e:	2103      	movs	r1, #3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f93f 	bl	8006de4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b66:	2110      	movs	r1, #16
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f8f3 	bl	8006d54 <USB_FlushTxFifo>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f911 	bl	8006da0 <USB_FlushRxFifo>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b8e:	461a      	mov	r2, r3
 8006b90:	2300      	movs	r3, #0
 8006b92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	2300      	movs	r3, #0
 8006baa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bac:	2300      	movs	r3, #0
 8006bae:	613b      	str	r3, [r7, #16]
 8006bb0:	e043      	b.n	8006c3a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bc8:	d118      	bne.n	8006bfc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10a      	bne.n	8006be6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bdc:	461a      	mov	r2, r3
 8006bde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006be2:	6013      	str	r3, [r2, #0]
 8006be4:	e013      	b.n	8006c0e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	e008      	b.n	8006c0e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c08:	461a      	mov	r2, r3
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	3301      	adds	r3, #1
 8006c38:	613b      	str	r3, [r7, #16]
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d3b7      	bcc.n	8006bb2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c42:	2300      	movs	r3, #0
 8006c44:	613b      	str	r3, [r7, #16]
 8006c46:	e043      	b.n	8006cd0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c5e:	d118      	bne.n	8006c92 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10a      	bne.n	8006c7c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c72:	461a      	mov	r2, r3
 8006c74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c78:	6013      	str	r3, [r2, #0]
 8006c7a:	e013      	b.n	8006ca4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c88:	461a      	mov	r2, r3
 8006c8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	e008      	b.n	8006ca4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	613b      	str	r3, [r7, #16]
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d3b7      	bcc.n	8006c48 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ce6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006cf8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d105      	bne.n	8006d0c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	f043 0210 	orr.w	r2, r3, #16
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	699a      	ldr	r2, [r3, #24]
 8006d10:	4b0e      	ldr	r3, [pc, #56]	; (8006d4c <USB_DevInit+0x2b4>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d005      	beq.n	8006d2a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	f043 0208 	orr.w	r2, r3, #8
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d105      	bne.n	8006d3c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	699a      	ldr	r2, [r3, #24]
 8006d34:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <USB_DevInit+0x2b8>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d48:	b004      	add	sp, #16
 8006d4a:	4770      	bx	lr
 8006d4c:	803c3800 	.word	0x803c3800
 8006d50:	40000004 	.word	0x40000004

08006d54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	019b      	lsls	r3, r3, #6
 8006d66:	f043 0220 	orr.w	r2, r3, #32
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3301      	adds	r3, #1
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4a09      	ldr	r2, [pc, #36]	; (8006d9c <USB_FlushTxFifo+0x48>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d901      	bls.n	8006d80 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e006      	b.n	8006d8e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	2b20      	cmp	r3, #32
 8006d8a:	d0f0      	beq.n	8006d6e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	00030d40 	.word	0x00030d40

08006da0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006da8:	2300      	movs	r3, #0
 8006daa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2210      	movs	r2, #16
 8006db0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	3301      	adds	r3, #1
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4a09      	ldr	r2, [pc, #36]	; (8006de0 <USB_FlushRxFifo+0x40>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d901      	bls.n	8006dc4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e006      	b.n	8006dd2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	f003 0310 	and.w	r3, r3, #16
 8006dcc:	2b10      	cmp	r3, #16
 8006dce:	d0f0      	beq.n	8006db2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	00030d40 	.word	0x00030d40

08006de4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	78fb      	ldrb	r3, [r7, #3]
 8006dfe:	68f9      	ldr	r1, [r7, #12]
 8006e00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e04:	4313      	orrs	r3, r2
 8006e06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b084      	sub	sp, #16
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e30:	f043 0302 	orr.w	r3, r3, #2
 8006e34:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006e36:	2003      	movs	r0, #3
 8006e38:	f7f9 fcbc 	bl	80007b4 <HAL_Delay>

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3301      	adds	r3, #1
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	4a13      	ldr	r2, [pc, #76]	; (8006eac <USB_CoreReset+0x64>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d901      	bls.n	8006e66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e01b      	b.n	8006e9e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	daf2      	bge.n	8006e54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	f043 0201 	orr.w	r2, r3, #1
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	3301      	adds	r3, #1
 8006e82:	60fb      	str	r3, [r7, #12]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4a09      	ldr	r2, [pc, #36]	; (8006eac <USB_CoreReset+0x64>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d901      	bls.n	8006e90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e006      	b.n	8006e9e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d0f0      	beq.n	8006e7e <USB_CoreReset+0x36>

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	00030d40 	.word	0x00030d40

08006eb0 <crcIpInit>:
 * Device-related functions
 * -----------------------------------------------------------------------------
 */

__STATIC_INLINE void crcIpInit(void)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
#if defined(STM32H7)
    /* By default the CRC IP clock is enabled */
    __HAL_RCC_CRC_CLK_ENABLE();  
 8006eb6:	4b0a      	ldr	r3, [pc, #40]	; (8006ee0 <crcIpInit+0x30>)
 8006eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ebc:	4a08      	ldr	r2, [pc, #32]	; (8006ee0 <crcIpInit+0x30>)
 8006ebe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ec6:	4b06      	ldr	r3, [pc, #24]	; (8006ee0 <crcIpInit+0x30>)
 8006ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ecc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ed0:	607b      	str	r3, [r7, #4]
 8006ed2:	687b      	ldr	r3, [r7, #4]
        printf("W: CRC IP clock is NOT enabled\r\n");

    /* By default the CRC IP clock is enabled */
    __HAL_RCC_CRC_CLK_ENABLE();
#endif
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	58024400 	.word	0x58024400

08006ee4 <dwtIpInit>:

__STATIC_INLINE void dwtIpInit(void)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8006ee8:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <dwtIpInit+0x2c>)
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	4a08      	ldr	r2, [pc, #32]	; (8006f10 <dwtIpInit+0x2c>)
 8006eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ef2:	60d3      	str	r3, [r2, #12]

#ifdef STM32F7
    DWT->LAR = 0xC5ACCE55;
#endif

    DWT->CYCCNT = 0;
 8006ef4:	4b07      	ldr	r3, [pc, #28]	; (8006f14 <dwtIpInit+0x30>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 8006efa:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <dwtIpInit+0x30>)
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	4905      	ldr	r1, [pc, #20]	; (8006f14 <dwtIpInit+0x30>)
 8006f00:	4b05      	ldr	r3, [pc, #20]	; (8006f18 <dwtIpInit+0x34>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	600b      	str	r3, [r1, #0]

}
 8006f06:	bf00      	nop
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	e000edf0 	.word	0xe000edf0
 8006f14:	e0001000 	.word	0xe0001000
 8006f18:	00020001 	.word	0x00020001

08006f1c <dwtReset>:

__STATIC_INLINE void dwtReset(void)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
    DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8006f20:	4b03      	ldr	r3, [pc, #12]	; (8006f30 <dwtReset+0x14>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	605a      	str	r2, [r3, #4]
}
 8006f26:	bf00      	nop
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	e0001000 	.word	0xe0001000

08006f34 <dwtGetCycles>:

__STATIC_INLINE uint32_t dwtGetCycles(void)
{
 8006f34:	b480      	push	{r7}
 8006f36:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 8006f38:	4b03      	ldr	r3, [pc, #12]	; (8006f48 <dwtGetCycles+0x14>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	e0001000 	.word	0xe0001000

08006f4c <cyclesCounterInit>:

__STATIC_INLINE void cyclesCounterInit(void)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
    struct dwtTime t;
    dwtCyclesToTime(UINT32_MAX, &t);
 8006f52:	463b      	mov	r3, r7
 8006f54:	461a      	mov	r2, r3
 8006f56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f5a:	f04f 0100 	mov.w	r1, #0
 8006f5e:	f000 f81a 	bl	8006f96 <dwtCyclesToTime>
    cyclesCount.dwt_max = t.s * 1000 + t.ms;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f68:	fb02 f203 	mul.w	r2, r2, r3
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	4413      	add	r3, r2
 8006f70:	461a      	mov	r2, r3
 8006f72:	4b04      	ldr	r3, [pc, #16]	; (8006f84 <cyclesCounterInit+0x38>)
 8006f74:	601a      	str	r2, [r3, #0]
    dwtIpInit();
 8006f76:	f7ff ffb5 	bl	8006ee4 <dwtIpInit>
}
 8006f7a:	bf00      	nop
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	24000958 	.word	0x24000958

08006f88 <systemCoreClock>:
#endif
}


__STATIC_INLINE uint32_t systemCoreClock(void)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	af00      	add	r7, sp, #0
#if !defined(STM32H7) 
    return HAL_RCC_GetHCLKFreq();
#else
    return HAL_RCC_GetSysClockFreq();
 8006f8c:	f7fb fb3a 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 8006f90:	4603      	mov	r3, r0
#endif
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <dwtCyclesToTime>:

static int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8006f96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f9a:	b08d      	sub	sp, #52	; 0x34
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
    if (!t)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d102      	bne.n	8006fb0 <dwtCyclesToTime+0x1a>
        return -1;
 8006faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fae:	e120      	b.n	80071f2 <dwtCyclesToTime+0x25c>
    uint32_t fcpu = systemCoreClock();
 8006fb0:	f7ff ffea 	bl	8006f88 <systemCoreClock>
 8006fb4:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint64_t s  = clks / fcpu;
 8006fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb8:	f04f 0400 	mov.w	r4, #0
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	4623      	mov	r3, r4
 8006fc0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fc4:	f7f9 f9e4 	bl	8000390 <__aeabi_uldivmod>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	460c      	mov	r4, r1
 8006fcc:	e9c7 3408 	strd	r3, r4, [r7, #32]
    uint64_t ms = (clks * 1000) / fcpu;
 8006fd0:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8006fd4:	462b      	mov	r3, r5
 8006fd6:	4634      	mov	r4, r6
 8006fd8:	f04f 0100 	mov.w	r1, #0
 8006fdc:	f04f 0200 	mov.w	r2, #0
 8006fe0:	0162      	lsls	r2, r4, #5
 8006fe2:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8006fe6:	0159      	lsls	r1, r3, #5
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4614      	mov	r4, r2
 8006fec:	1b5b      	subs	r3, r3, r5
 8006fee:	eb64 0406 	sbc.w	r4, r4, r6
 8006ff2:	f04f 0100 	mov.w	r1, #0
 8006ff6:	f04f 0200 	mov.w	r2, #0
 8006ffa:	00a2      	lsls	r2, r4, #2
 8006ffc:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8007000:	0099      	lsls	r1, r3, #2
 8007002:	460b      	mov	r3, r1
 8007004:	4614      	mov	r4, r2
 8007006:	195b      	adds	r3, r3, r5
 8007008:	eb44 0406 	adc.w	r4, r4, r6
 800700c:	f04f 0100 	mov.w	r1, #0
 8007010:	f04f 0200 	mov.w	r2, #0
 8007014:	00e2      	lsls	r2, r4, #3
 8007016:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800701a:	00d9      	lsls	r1, r3, #3
 800701c:	460b      	mov	r3, r1
 800701e:	4614      	mov	r4, r2
 8007020:	4618      	mov	r0, r3
 8007022:	4621      	mov	r1, r4
 8007024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007026:	f04f 0400 	mov.w	r4, #0
 800702a:	461a      	mov	r2, r3
 800702c:	4623      	mov	r3, r4
 800702e:	f7f9 f9af 	bl	8000390 <__aeabi_uldivmod>
 8007032:	4603      	mov	r3, r0
 8007034:	460c      	mov	r4, r1
 8007036:	e9c7 3406 	strd	r3, r4, [r7, #24]
    uint64_t us = (clks * 1000 * 1000) / fcpu;
 800703a:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800703e:	462b      	mov	r3, r5
 8007040:	4634      	mov	r4, r6
 8007042:	f04f 0100 	mov.w	r1, #0
 8007046:	f04f 0200 	mov.w	r2, #0
 800704a:	0162      	lsls	r2, r4, #5
 800704c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8007050:	0159      	lsls	r1, r3, #5
 8007052:	460b      	mov	r3, r1
 8007054:	4614      	mov	r4, r2
 8007056:	1b5b      	subs	r3, r3, r5
 8007058:	eb64 0406 	sbc.w	r4, r4, r6
 800705c:	f04f 0100 	mov.w	r1, #0
 8007060:	f04f 0200 	mov.w	r2, #0
 8007064:	0262      	lsls	r2, r4, #9
 8007066:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800706a:	0259      	lsls	r1, r3, #9
 800706c:	460b      	mov	r3, r1
 800706e:	4614      	mov	r4, r2
 8007070:	195b      	adds	r3, r3, r5
 8007072:	eb44 0406 	adc.w	r4, r4, r6
 8007076:	f04f 0100 	mov.w	r1, #0
 800707a:	f04f 0200 	mov.w	r2, #0
 800707e:	01a2      	lsls	r2, r4, #6
 8007080:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 8007084:	0199      	lsls	r1, r3, #6
 8007086:	1ac9      	subs	r1, r1, r3
 8007088:	eb62 0204 	sbc.w	r2, r2, r4
 800708c:	194b      	adds	r3, r1, r5
 800708e:	eb42 0406 	adc.w	r4, r2, r6
 8007092:	4618      	mov	r0, r3
 8007094:	4621      	mov	r1, r4
 8007096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007098:	f04f 0400 	mov.w	r4, #0
 800709c:	461a      	mov	r2, r3
 800709e:	4623      	mov	r3, r4
 80070a0:	f7f9 f976 	bl	8000390 <__aeabi_uldivmod>
 80070a4:	4603      	mov	r3, r0
 80070a6:	460c      	mov	r4, r1
 80070a8:	e9c7 3404 	strd	r3, r4, [r7, #16]
    ms -= (s * 1000);
 80070ac:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 80070b0:	462b      	mov	r3, r5
 80070b2:	4634      	mov	r4, r6
 80070b4:	f04f 0100 	mov.w	r1, #0
 80070b8:	f04f 0200 	mov.w	r2, #0
 80070bc:	0162      	lsls	r2, r4, #5
 80070be:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80070c2:	0159      	lsls	r1, r3, #5
 80070c4:	460b      	mov	r3, r1
 80070c6:	4614      	mov	r4, r2
 80070c8:	1b5b      	subs	r3, r3, r5
 80070ca:	eb64 0406 	sbc.w	r4, r4, r6
 80070ce:	f04f 0100 	mov.w	r1, #0
 80070d2:	f04f 0200 	mov.w	r2, #0
 80070d6:	00a2      	lsls	r2, r4, #2
 80070d8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80070dc:	0099      	lsls	r1, r3, #2
 80070de:	460b      	mov	r3, r1
 80070e0:	4614      	mov	r4, r2
 80070e2:	195b      	adds	r3, r3, r5
 80070e4:	eb44 0406 	adc.w	r4, r4, r6
 80070e8:	f04f 0100 	mov.w	r1, #0
 80070ec:	f04f 0200 	mov.w	r2, #0
 80070f0:	00e2      	lsls	r2, r4, #3
 80070f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80070f6:	00d9      	lsls	r1, r3, #3
 80070f8:	460b      	mov	r3, r1
 80070fa:	4614      	mov	r4, r2
 80070fc:	4619      	mov	r1, r3
 80070fe:	4622      	mov	r2, r4
 8007100:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007104:	1a5b      	subs	r3, r3, r1
 8007106:	eb64 0402 	sbc.w	r4, r4, r2
 800710a:	461d      	mov	r5, r3
 800710c:	4626      	mov	r6, r4
 800710e:	e9c7 5606 	strd	r5, r6, [r7, #24]
    us -= (ms * 1000 + s * 1000000);
 8007112:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 8007116:	462b      	mov	r3, r5
 8007118:	4634      	mov	r4, r6
 800711a:	f04f 0100 	mov.w	r1, #0
 800711e:	f04f 0200 	mov.w	r2, #0
 8007122:	0162      	lsls	r2, r4, #5
 8007124:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8007128:	0159      	lsls	r1, r3, #5
 800712a:	460b      	mov	r3, r1
 800712c:	4614      	mov	r4, r2
 800712e:	1b5b      	subs	r3, r3, r5
 8007130:	eb64 0406 	sbc.w	r4, r4, r6
 8007134:	f04f 0100 	mov.w	r1, #0
 8007138:	f04f 0200 	mov.w	r2, #0
 800713c:	00a2      	lsls	r2, r4, #2
 800713e:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8007142:	0099      	lsls	r1, r3, #2
 8007144:	460b      	mov	r3, r1
 8007146:	4614      	mov	r4, r2
 8007148:	195b      	adds	r3, r3, r5
 800714a:	eb44 0406 	adc.w	r4, r4, r6
 800714e:	f04f 0100 	mov.w	r1, #0
 8007152:	f04f 0200 	mov.w	r2, #0
 8007156:	00e2      	lsls	r2, r4, #3
 8007158:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800715c:	00d9      	lsls	r1, r3, #3
 800715e:	460b      	mov	r3, r1
 8007160:	4614      	mov	r4, r2
 8007162:	4698      	mov	r8, r3
 8007164:	46a1      	mov	r9, r4
 8007166:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 800716a:	462b      	mov	r3, r5
 800716c:	4634      	mov	r4, r6
 800716e:	f04f 0100 	mov.w	r1, #0
 8007172:	f04f 0200 	mov.w	r2, #0
 8007176:	0162      	lsls	r2, r4, #5
 8007178:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800717c:	0159      	lsls	r1, r3, #5
 800717e:	460b      	mov	r3, r1
 8007180:	4614      	mov	r4, r2
 8007182:	1b5b      	subs	r3, r3, r5
 8007184:	eb64 0406 	sbc.w	r4, r4, r6
 8007188:	f04f 0100 	mov.w	r1, #0
 800718c:	f04f 0200 	mov.w	r2, #0
 8007190:	0262      	lsls	r2, r4, #9
 8007192:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007196:	0259      	lsls	r1, r3, #9
 8007198:	460b      	mov	r3, r1
 800719a:	4614      	mov	r4, r2
 800719c:	195b      	adds	r3, r3, r5
 800719e:	eb44 0406 	adc.w	r4, r4, r6
 80071a2:	f04f 0100 	mov.w	r1, #0
 80071a6:	f04f 0200 	mov.w	r2, #0
 80071aa:	01a2      	lsls	r2, r4, #6
 80071ac:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 80071b0:	0199      	lsls	r1, r3, #6
 80071b2:	1ac9      	subs	r1, r1, r3
 80071b4:	eb62 0204 	sbc.w	r2, r2, r4
 80071b8:	194b      	adds	r3, r1, r5
 80071ba:	eb42 0406 	adc.w	r4, r2, r6
 80071be:	eb13 0508 	adds.w	r5, r3, r8
 80071c2:	eb44 0609 	adc.w	r6, r4, r9
 80071c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80071ca:	460b      	mov	r3, r1
 80071cc:	4614      	mov	r4, r2
 80071ce:	1b5b      	subs	r3, r3, r5
 80071d0:	eb64 0406 	sbc.w	r4, r4, r6
 80071d4:	e9c7 3404 	strd	r3, r4, [r7, #16]
    t->fcpu = fcpu;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071dc:	601a      	str	r2, [r3, #0]
    t->s = s;
 80071de:	6a3a      	ldr	r2, [r7, #32]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	605a      	str	r2, [r3, #4]
    t->ms = ms;
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	609a      	str	r2, [r3, #8]
    t->us = us;
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	60da      	str	r2, [r3, #12]
    return 0;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3734      	adds	r7, #52	; 0x34
 80071f6:	46bd      	mov	sp, r7
 80071f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080071fc <devIdToStr>:

__STATIC_INLINE const char *devIdToStr(uint16_t dev_id)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	4603      	mov	r3, r0
 8007204:	80fb      	strh	r3, [r7, #6]
    /* DEV_ID field from DBGMCU register */
    const char *str;
    switch (dev_id) {
 8007206:	88fb      	ldrh	r3, [r7, #6]
 8007208:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 800720c:	2b5d      	cmp	r3, #93	; 0x5d
 800720e:	f200 80e6 	bhi.w	80073de <devIdToStr+0x1e2>
 8007212:	a201      	add	r2, pc, #4	; (adr r2, 8007218 <devIdToStr+0x1c>)
 8007214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007218:	080073c1 	.word	0x080073c1
 800721c:	080073df 	.word	0x080073df
 8007220:	080073df 	.word	0x080073df
 8007224:	080073df 	.word	0x080073df
 8007228:	080073df 	.word	0x080073df
 800722c:	080073df 	.word	0x080073df
 8007230:	080073df 	.word	0x080073df
 8007234:	080073df 	.word	0x080073df
 8007238:	080073df 	.word	0x080073df
 800723c:	080073df 	.word	0x080073df
 8007240:	080073df 	.word	0x080073df
 8007244:	080073df 	.word	0x080073df
 8007248:	080073df 	.word	0x080073df
 800724c:	08007391 	.word	0x08007391
 8007250:	080073a9 	.word	0x080073a9
 8007254:	080073df 	.word	0x080073df
 8007258:	080073df 	.word	0x080073df
 800725c:	080073df 	.word	0x080073df
 8007260:	080073df 	.word	0x080073df
 8007264:	080073df 	.word	0x080073df
 8007268:	080073df 	.word	0x080073df
 800726c:	080073df 	.word	0x080073df
 8007270:	080073df 	.word	0x080073df
 8007274:	080073df 	.word	0x080073df
 8007278:	080073df 	.word	0x080073df
 800727c:	080073df 	.word	0x080073df
 8007280:	080073df 	.word	0x080073df
 8007284:	080073df 	.word	0x080073df
 8007288:	080073a3 	.word	0x080073a3
 800728c:	080073df 	.word	0x080073df
 8007290:	080073af 	.word	0x080073af
 8007294:	080073df 	.word	0x080073df
 8007298:	080073b5 	.word	0x080073b5
 800729c:	080073df 	.word	0x080073df
 80072a0:	080073df 	.word	0x080073df
 80072a4:	08007397 	.word	0x08007397
 80072a8:	080073df 	.word	0x080073df
 80072ac:	080073df 	.word	0x080073df
 80072b0:	080073df 	.word	0x080073df
 80072b4:	080073df 	.word	0x080073df
 80072b8:	080073df 	.word	0x080073df
 80072bc:	080073df 	.word	0x080073df
 80072c0:	080073df 	.word	0x080073df
 80072c4:	080073df 	.word	0x080073df
 80072c8:	080073df 	.word	0x080073df
 80072cc:	080073df 	.word	0x080073df
 80072d0:	080073df 	.word	0x080073df
 80072d4:	080073df 	.word	0x080073df
 80072d8:	080073df 	.word	0x080073df
 80072dc:	0800739d 	.word	0x0800739d
 80072e0:	080073df 	.word	0x080073df
 80072e4:	080073df 	.word	0x080073df
 80072e8:	080073d3 	.word	0x080073d3
 80072ec:	080073df 	.word	0x080073df
 80072f0:	080073df 	.word	0x080073df
 80072f4:	080073df 	.word	0x080073df
 80072f8:	080073df 	.word	0x080073df
 80072fc:	080073df 	.word	0x080073df
 8007300:	080073df 	.word	0x080073df
 8007304:	080073d9 	.word	0x080073d9
 8007308:	080073df 	.word	0x080073df
 800730c:	080073df 	.word	0x080073df
 8007310:	080073df 	.word	0x080073df
 8007314:	080073df 	.word	0x080073df
 8007318:	080073df 	.word	0x080073df
 800731c:	080073df 	.word	0x080073df
 8007320:	080073df 	.word	0x080073df
 8007324:	080073df 	.word	0x080073df
 8007328:	080073df 	.word	0x080073df
 800732c:	080073df 	.word	0x080073df
 8007330:	080073df 	.word	0x080073df
 8007334:	080073df 	.word	0x080073df
 8007338:	080073df 	.word	0x080073df
 800733c:	080073df 	.word	0x080073df
 8007340:	080073df 	.word	0x080073df
 8007344:	080073df 	.word	0x080073df
 8007348:	080073df 	.word	0x080073df
 800734c:	080073bb 	.word	0x080073bb
 8007350:	080073df 	.word	0x080073df
 8007354:	080073df 	.word	0x080073df
 8007358:	080073df 	.word	0x080073df
 800735c:	080073df 	.word	0x080073df
 8007360:	080073df 	.word	0x080073df
 8007364:	080073df 	.word	0x080073df
 8007368:	080073df 	.word	0x080073df
 800736c:	080073df 	.word	0x080073df
 8007370:	080073df 	.word	0x080073df
 8007374:	080073df 	.word	0x080073df
 8007378:	080073df 	.word	0x080073df
 800737c:	080073df 	.word	0x080073df
 8007380:	080073df 	.word	0x080073df
 8007384:	080073c7 	.word	0x080073c7
 8007388:	080073df 	.word	0x080073df
 800738c:	080073cd 	.word	0x080073cd
    case 0x422: str = "STM32F303xB/C"; break;
 8007390:	4b17      	ldr	r3, [pc, #92]	; (80073f0 <devIdToStr+0x1f4>)
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	e025      	b.n	80073e2 <devIdToStr+0x1e6>
    case 0x438: str = "STM32F303x6/8"; break;
 8007396:	4b17      	ldr	r3, [pc, #92]	; (80073f4 <devIdToStr+0x1f8>)
 8007398:	60fb      	str	r3, [r7, #12]
 800739a:	e022      	b.n	80073e2 <devIdToStr+0x1e6>
    case 0x446: str = "STM32F303xD/E"; break;
 800739c:	4b16      	ldr	r3, [pc, #88]	; (80073f8 <devIdToStr+0x1fc>)
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	e01f      	b.n	80073e2 <devIdToStr+0x1e6>
    case 0x431: str = "STM32F411xC/E"; break;
 80073a2:	4b16      	ldr	r3, [pc, #88]	; (80073fc <devIdToStr+0x200>)
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	e01c      	b.n	80073e2 <devIdToStr+0x1e6>
    case 0x423: str = "STM32F401xB/C"; break;
 80073a8:	4b15      	ldr	r3, [pc, #84]	; (8007400 <devIdToStr+0x204>)
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	e019      	b.n	80073e2 <devIdToStr+0x1e6>
    case 0x433: str = "STM32F401xD/E"; break;
 80073ae:	4b15      	ldr	r3, [pc, #84]	; (8007404 <devIdToStr+0x208>)
 80073b0:	60fb      	str	r3, [r7, #12]
 80073b2:	e016      	b.n	80073e2 <devIdToStr+0x1e6>
    case 0x435: str = "STM32L43xxx"; break;
 80073b4:	4b14      	ldr	r3, [pc, #80]	; (8007408 <devIdToStr+0x20c>)
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	e013      	b.n	80073e2 <devIdToStr+0x1e6>
    case 0x462: str = "STM32L45xxx"; break;
 80073ba:	4b14      	ldr	r3, [pc, #80]	; (800740c <devIdToStr+0x210>)
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	e010      	b.n	80073e2 <devIdToStr+0x1e6>
    case 0x415: str = "STM32L4x6xx"; break;
 80073c0:	4b13      	ldr	r3, [pc, #76]	; (8007410 <devIdToStr+0x214>)
 80073c2:	60fb      	str	r3, [r7, #12]
 80073c4:	e00d      	b.n	80073e2 <devIdToStr+0x1e6>
    case 0x470: str = "STM32L4Rxxx"; break;
 80073c6:	4b13      	ldr	r3, [pc, #76]	; (8007414 <devIdToStr+0x218>)
 80073c8:	60fb      	str	r3, [r7, #12]
 80073ca:	e00a      	b.n	80073e2 <devIdToStr+0x1e6>
    case 0x472: str = "STM32L5[5,6]2xx"; break;
 80073cc:	4b12      	ldr	r3, [pc, #72]	; (8007418 <devIdToStr+0x21c>)
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	e007      	b.n	80073e2 <devIdToStr+0x1e6>
    case 0x449: str = "STM32F74xxx"; break;
 80073d2:	4b12      	ldr	r3, [pc, #72]	; (800741c <devIdToStr+0x220>)
 80073d4:	60fb      	str	r3, [r7, #12]
 80073d6:	e004      	b.n	80073e2 <devIdToStr+0x1e6>
    case 0x450: str = "STM32H743/53/50xx and STM32H745/55/47/57xx"; break; /* see RM0433 & RM0399 */
 80073d8:	4b11      	ldr	r3, [pc, #68]	; (8007420 <devIdToStr+0x224>)
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	e001      	b.n	80073e2 <devIdToStr+0x1e6>
    default:    str = "UNKNOWN";
 80073de:	4b11      	ldr	r3, [pc, #68]	; (8007424 <devIdToStr+0x228>)
 80073e0:	60fb      	str	r3, [r7, #12]
    }
    return str;
 80073e2:	68fb      	ldr	r3, [r7, #12]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	0800f988 	.word	0x0800f988
 80073f4:	0800f998 	.word	0x0800f998
 80073f8:	0800f9a8 	.word	0x0800f9a8
 80073fc:	0800f9b8 	.word	0x0800f9b8
 8007400:	0800f9c8 	.word	0x0800f9c8
 8007404:	0800f9d8 	.word	0x0800f9d8
 8007408:	0800f9e8 	.word	0x0800f9e8
 800740c:	0800f9f4 	.word	0x0800f9f4
 8007410:	0800fa00 	.word	0x0800fa00
 8007414:	0800fa0c 	.word	0x0800fa0c
 8007418:	0800fa18 	.word	0x0800fa18
 800741c:	0800fa28 	.word	0x0800fa28
 8007420:	0800fa34 	.word	0x0800fa34
 8007424:	0800fa60 	.word	0x0800fa60

08007428 <bitToStr>:

#if !defined(STM32F3)
__STATIC_INLINE const char* bitToStr(uint32_t val)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
    if (val)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <bitToStr+0x12>
        return "True";
 8007436:	4b04      	ldr	r3, [pc, #16]	; (8007448 <bitToStr+0x20>)
 8007438:	e000      	b.n	800743c <bitToStr+0x14>
    else
        return "False";
 800743a:	4b04      	ldr	r3, [pc, #16]	; (800744c <bitToStr+0x24>)
}
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	0800fa68 	.word	0x0800fa68
 800744c:	0800fa70 	.word	0x0800fa70

08007450 <logDeviceConf>:
#endif

__STATIC_INLINE void logDeviceConf(void)
{
 8007450:	b5b0      	push	{r4, r5, r7, lr}
 8007452:	b088      	sub	sp, #32
 8007454:	af00      	add	r7, sp, #0
    struct dwtTime t;
    uint32_t st;

#if !defined(STM32F3) && !defined(STM32L5)
    uint32_t acr = FLASH->ACR ;
 8007456:	4b42      	ldr	r3, [pc, #264]	; (8007560 <logDeviceConf+0x110>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	61fb      	str	r3, [r7, #28]
#endif
    uint32_t val;

    printf("STM32 Runtime configuration...\r\n");
 800745c:	4841      	ldr	r0, [pc, #260]	; (8007564 <logDeviceConf+0x114>)
 800745e:	f006 fd83 	bl	800df68 <puts>

    printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
            (int)HAL_GetDEVID(),
 8007462:	f7f9 f9df 	bl	8000824 <HAL_GetDEVID>
 8007466:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8007468:	461c      	mov	r4, r3
            devIdToStr(HAL_GetDEVID()),
 800746a:	f7f9 f9db 	bl	8000824 <HAL_GetDEVID>
 800746e:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8007470:	b29b      	uxth	r3, r3
 8007472:	4618      	mov	r0, r3
 8007474:	f7ff fec2 	bl	80071fc <devIdToStr>
 8007478:	4605      	mov	r5, r0
            (int)HAL_GetREVID()
 800747a:	f7f9 f9c7 	bl	800080c <HAL_GetREVID>
 800747e:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8007480:	462a      	mov	r2, r5
 8007482:	4621      	mov	r1, r4
 8007484:	4838      	ldr	r0, [pc, #224]	; (8007568 <logDeviceConf+0x118>)
 8007486:	f006 fcfb 	bl	800de80 <iprintf>
    );

    printf(" Core Arch.   : M%d - %s %s\r\n",
 800748a:	4b38      	ldr	r3, [pc, #224]	; (800756c <logDeviceConf+0x11c>)
 800748c:	4a38      	ldr	r2, [pc, #224]	; (8007570 <logDeviceConf+0x120>)
 800748e:	2107      	movs	r1, #7
 8007490:	4838      	ldr	r0, [pc, #224]	; (8007574 <logDeviceConf+0x124>)
 8007492:	f006 fcf5 	bl	800de80 <iprintf>
                    "!FPU NOT PRESENT",
                    ""
#endif
    );

    printf(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 8007496:	f7f9 f9af 	bl	80007f8 <HAL_GetHalVersion>
 800749a:	4603      	mov	r3, r0
 800749c:	4619      	mov	r1, r3
 800749e:	4836      	ldr	r0, [pc, #216]	; (8007578 <logDeviceConf+0x128>)
 80074a0:	f006 fcee 	bl	800de80 <iprintf>

    val = systemCoreClock()/1000000;
 80074a4:	f7ff fd70 	bl	8006f88 <systemCoreClock>
 80074a8:	4602      	mov	r2, r0
 80074aa:	4b34      	ldr	r3, [pc, #208]	; (800757c <logDeviceConf+0x12c>)
 80074ac:	fba3 2302 	umull	r2, r3, r3, r2
 80074b0:	0c9b      	lsrs	r3, r3, #18
 80074b2:	61bb      	str	r3, [r7, #24]

#if !defined(STM32H7)
    printf(" system clock : %u MHz\r\n", (int)val);
#else
    printf(" SYSCLK clock : %u MHz\r\n", (int)val);
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	4619      	mov	r1, r3
 80074b8:	4831      	ldr	r0, [pc, #196]	; (8007580 <logDeviceConf+0x130>)
 80074ba:	f006 fce1 	bl	800de80 <iprintf>
    printf(" HCLK clock   : %u MHz\r\n", (int)HAL_RCC_GetHCLKFreq()/1000000);    
 80074be:	f7fb fa13 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 80074c2:	4603      	mov	r3, r0
 80074c4:	4a2d      	ldr	r2, [pc, #180]	; (800757c <logDeviceConf+0x12c>)
 80074c6:	fb82 1203 	smull	r1, r2, r2, r3
 80074ca:	1492      	asrs	r2, r2, #18
 80074cc:	17db      	asrs	r3, r3, #31
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	4619      	mov	r1, r3
 80074d2:	482c      	ldr	r0, [pc, #176]	; (8007584 <logDeviceConf+0x134>)
 80074d4:	f006 fcd4 	bl	800de80 <iprintf>
#endif

#if defined(STM32F7) || defined(STM32H7)
    val = SCB->CCR;
 80074d8:	4b2b      	ldr	r3, [pc, #172]	; (8007588 <logDeviceConf+0x138>)
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	61bb      	str	r3, [r7, #24]
            (int)acr,
            bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
            bitToStr((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos),
            (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
#else
    printf(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
 80074de:	69f9      	ldr	r1, [r7, #28]
            (int)acr,
            (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
 80074e0:	69fb      	ldr	r3, [r7, #28]
    printf(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
 80074e2:	f003 030f 	and.w	r3, r3, #15
 80074e6:	461a      	mov	r2, r3
 80074e8:	4828      	ldr	r0, [pc, #160]	; (800758c <logDeviceConf+0x13c>)
 80074ea:	f006 fcc9 	bl	800de80 <iprintf>
#endif
#if !defined(CORE_M4)
    printf(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7ff ff97 	bl	8007428 <bitToStr>
 80074fa:	4604      	mov	r4, r0
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007502:	4618      	mov	r0, r3
 8007504:	f7ff ff90 	bl	8007428 <bitToStr>
 8007508:	4603      	mov	r3, r0
 800750a:	461a      	mov	r2, r3
 800750c:	4621      	mov	r1, r4
 800750e:	4820      	ldr	r0, [pc, #128]	; (8007590 <logDeviceConf+0x140>)
 8007510:	f006 fcb6 	bl	800de80 <iprintf>
#if defined(STM32L5)
    printf(" ICACHE       : %s\r\n", bitToStr(READ_BIT(ICACHE->CR, ICACHE_CR_EN)));
#endif
#endif

    dwtIpInit();
 8007514:	f7ff fce6 	bl	8006ee4 <dwtIpInit>
    dwtReset();
 8007518:	f7ff fd00 	bl	8006f1c <dwtReset>
    HAL_Delay(100);
 800751c:	2064      	movs	r0, #100	; 0x64
 800751e:	f7f9 f949 	bl	80007b4 <HAL_Delay>
    st = dwtGetCycles();
 8007522:	f7ff fd07 	bl	8006f34 <dwtGetCycles>
 8007526:	6178      	str	r0, [r7, #20]
    dwtCyclesToTime(st/100, &t);
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	4a1a      	ldr	r2, [pc, #104]	; (8007594 <logDeviceConf+0x144>)
 800752c:	fba2 2303 	umull	r2, r3, r2, r3
 8007530:	095b      	lsrs	r3, r3, #5
 8007532:	f04f 0400 	mov.w	r4, #0
 8007536:	1d3a      	adds	r2, r7, #4
 8007538:	4618      	mov	r0, r3
 800753a:	4621      	mov	r1, r4
 800753c:	f7ff fd2b 	bl	8006f96 <dwtCyclesToTime>

    printf(" Calibration  : HAL_Delay(1)=%d.%03d ms\r\n",
            t.s * 100 + t.ms, t.us);
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2264      	movs	r2, #100	; 0x64
 8007544:	fb02 f203 	mul.w	r2, r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
    printf(" Calibration  : HAL_Delay(1)=%d.%03d ms\r\n",
 800754a:	4413      	add	r3, r2
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	4619      	mov	r1, r3
 8007550:	4811      	ldr	r0, [pc, #68]	; (8007598 <logDeviceConf+0x148>)
 8007552:	f006 fc95 	bl	800de80 <iprintf>
}
 8007556:	bf00      	nop
 8007558:	3720      	adds	r7, #32
 800755a:	46bd      	mov	sp, r7
 800755c:	bdb0      	pop	{r4, r5, r7, pc}
 800755e:	bf00      	nop
 8007560:	52002000 	.word	0x52002000
 8007564:	0800fa78 	.word	0x0800fa78
 8007568:	0800fa98 	.word	0x0800fa98
 800756c:	0800facc 	.word	0x0800facc
 8007570:	0800fad8 	.word	0x0800fad8
 8007574:	0800fae4 	.word	0x0800fae4
 8007578:	0800fb04 	.word	0x0800fb04
 800757c:	431bde83 	.word	0x431bde83
 8007580:	0800fb20 	.word	0x0800fb20
 8007584:	0800fb3c 	.word	0x0800fb3c
 8007588:	e000ed00 	.word	0xe000ed00
 800758c:	0800fb58 	.word	0x0800fb58
 8007590:	0800fb84 	.word	0x0800fb84
 8007594:	51eb851f 	.word	0x51eb851f
 8007598:	0800fba4 	.word	0x0800fba4

0800759c <_write>:
#if defined(__GNUC__)

int _write(int fd, const void *buff, int count);

int _write(int fd, const void *buff, int count)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status;

    if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	da0d      	bge.n	80075ca <_write+0x2e>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d00a      	beq.n	80075ca <_write+0x2e>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d007      	beq.n	80075ca <_write+0x2e>
        errno = EBADF;
 80075ba:	f005 fdbd 	bl	800d138 <__errno>
 80075be:	4602      	mov	r2, r0
 80075c0:	2309      	movs	r3, #9
 80075c2:	6013      	str	r3, [r2, #0]
        return -1;
 80075c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075c8:	e00f      	b.n	80075ea <_write+0x4e>
    }

    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075d2:	68b9      	ldr	r1, [r7, #8]
 80075d4:	4807      	ldr	r0, [pc, #28]	; (80075f4 <_write+0x58>)
 80075d6:	f7fc fd23 	bl	8004020 <HAL_UART_Transmit>
 80075da:	4603      	mov	r3, r0
 80075dc:	75fb      	strb	r3, [r7, #23]
            HAL_MAX_DELAY);

    return (status == HAL_OK ? count : 0);
 80075de:	7dfb      	ldrb	r3, [r7, #23]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <_write+0x4c>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	e000      	b.n	80075ea <_write+0x4e>
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	24001960 	.word	0x24001960

080075f8 <aiLogErr>:
#endif



__STATIC_INLINE void aiLogErr(const ai_error err, const char *fct)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
    if (fct)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d009      	beq.n	800761c <aiLogErr+0x24>
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
                err.type, err.code);
 8007608:	793b      	ldrb	r3, [r7, #4]
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 800760a:	461a      	mov	r2, r3
                err.type, err.code);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f3c3 2317 	ubfx	r3, r3, #8, #24
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	4808      	ldr	r0, [pc, #32]	; (8007638 <aiLogErr+0x40>)
 8007616:	f006 fc33 	bl	800de80 <iprintf>
    else
        printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
}
 800761a:	e008      	b.n	800762e <aiLogErr+0x36>
        printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
 800761c:	793b      	ldrb	r3, [r7, #4]
 800761e:	4619      	mov	r1, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8007626:	461a      	mov	r2, r3
 8007628:	4804      	ldr	r0, [pc, #16]	; (800763c <aiLogErr+0x44>)
 800762a:	f006 fc29 	bl	800de80 <iprintf>
}
 800762e:	bf00      	nop
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	0800fbd0 	.word	0x0800fbd0
 800763c:	0800fbf8 	.word	0x0800fbf8

08007640 <aiPrintLayoutBuffer>:

__STATIC_INLINE void aiPrintLayoutBuffer(const char *msg, int idx,
        const ai_buffer* buffer)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08a      	sub	sp, #40	; 0x28
 8007644:	af02      	add	r7, sp, #8
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
    uint32_t type_id = AI_BUFFER_FMT_GET_TYPE(buffer->format);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	145b      	asrs	r3, r3, #17
 8007652:	f003 030f 	and.w	r3, r3, #15
 8007656:	61fb      	str	r3, [r7, #28]
    printf("%s[%d] ",msg, idx);
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	68f9      	ldr	r1, [r7, #12]
 800765c:	4897      	ldr	r0, [pc, #604]	; (80078bc <aiPrintLayoutBuffer+0x27c>)
 800765e:	f006 fc0f 	bl	800de80 <iprintf>
    if (type_id == AI_BUFFER_FMT_TYPE_Q) {
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	2b02      	cmp	r3, #2
 8007666:	f040 818c 	bne.w	8007982 <aiPrintLayoutBuffer+0x342>
        printf(" %s%d,",
                AI_BUFFER_FMT_GET_SIGN(buffer->format)?"s":"u",
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        printf(" %s%d,",
 8007672:	2b00      	cmp	r3, #0
 8007674:	d001      	beq.n	800767a <aiPrintLayoutBuffer+0x3a>
 8007676:	4992      	ldr	r1, [pc, #584]	; (80078c0 <aiPrintLayoutBuffer+0x280>)
 8007678:	e000      	b.n	800767c <aiPrintLayoutBuffer+0x3c>
 800767a:	4992      	ldr	r1, [pc, #584]	; (80078c4 <aiPrintLayoutBuffer+0x284>)
                        (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	11db      	asrs	r3, r3, #7
        printf(" %s%d,",
 8007682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007686:	461a      	mov	r2, r3
 8007688:	488f      	ldr	r0, [pc, #572]	; (80078c8 <aiPrintLayoutBuffer+0x288>)
 800768a:	f006 fbf9 	bl	800de80 <iprintf>
        if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 8157 	beq.w	8007946 <aiPrintLayoutBuffer+0x306>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f000 814f 	beq.w	8007946 <aiPrintLayoutBuffer+0x306>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 8149 	beq.w	8007946 <aiPrintLayoutBuffer+0x306>
            ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, 0);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d058      	beq.n	800776e <aiPrintLayoutBuffer+0x12e>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d051      	beq.n	800776e <aiPrintLayoutBuffer+0x12e>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d04c      	beq.n	800776e <aiPrintLayoutBuffer+0x12e>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	695b      	ldr	r3, [r3, #20]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d045      	beq.n	8007768 <aiPrintLayoutBuffer+0x128>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d03e      	beq.n	8007768 <aiPrintLayoutBuffer+0x128>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d039      	beq.n	8007768 <aiPrintLayoutBuffer+0x128>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00a      	beq.n	8007712 <aiPrintLayoutBuffer+0xd2>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <aiPrintLayoutBuffer+0xd2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	e000      	b.n	8007714 <aiPrintLayoutBuffer+0xd4>
 8007712:	2300      	movs	r3, #0
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d026      	beq.n	8007768 <aiPrintLayoutBuffer+0x128>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00a      	beq.n	8007738 <aiPrintLayoutBuffer+0xf8>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0301 	and.w	r3, r3, #1
 800772c:	2b00      	cmp	r3, #0
 800772e:	d003      	beq.n	8007738 <aiPrintLayoutBuffer+0xf8>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	e000      	b.n	800773a <aiPrintLayoutBuffer+0xfa>
 8007738:	2300      	movs	r3, #0
 800773a:	885b      	ldrh	r3, [r3, #2]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d013      	beq.n	8007768 <aiPrintLayoutBuffer+0x128>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00a      	beq.n	800775e <aiPrintLayoutBuffer+0x11e>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b00      	cmp	r3, #0
 8007754:	d003      	beq.n	800775e <aiPrintLayoutBuffer+0x11e>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	e000      	b.n	8007760 <aiPrintLayoutBuffer+0x120>
 800775e:	2300      	movs	r3, #0
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	e004      	b.n	8007772 <aiPrintLayoutBuffer+0x132>
 8007768:	f04f 0300 	mov.w	r3, #0
 800776c:	e001      	b.n	8007772 <aiPrintLayoutBuffer+0x132>
 800776e:	f04f 0300 	mov.w	r3, #0
 8007772:	61bb      	str	r3, [r7, #24]
            int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, 0);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 80d6 	beq.w	800792a <aiPrintLayoutBuffer+0x2ea>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 80ce 	beq.w	800792a <aiPrintLayoutBuffer+0x2ea>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 80c8 	beq.w	800792a <aiPrintLayoutBuffer+0x2ea>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d06c      	beq.n	800787c <aiPrintLayoutBuffer+0x23c>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d065      	beq.n	800787c <aiPrintLayoutBuffer+0x23c>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d060      	beq.n	800787c <aiPrintLayoutBuffer+0x23c>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00a      	beq.n	80077d8 <aiPrintLayoutBuffer+0x198>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d003      	beq.n	80077d8 <aiPrintLayoutBuffer+0x198>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	e000      	b.n	80077da <aiPrintLayoutBuffer+0x19a>
 80077d8:	2300      	movs	r3, #0
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d04b      	beq.n	800787c <aiPrintLayoutBuffer+0x23c>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d045      	beq.n	8007878 <aiPrintLayoutBuffer+0x238>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d03e      	beq.n	8007878 <aiPrintLayoutBuffer+0x238>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d039      	beq.n	8007878 <aiPrintLayoutBuffer+0x238>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00a      	beq.n	8007822 <aiPrintLayoutBuffer+0x1e2>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <aiPrintLayoutBuffer+0x1e2>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	e000      	b.n	8007824 <aiPrintLayoutBuffer+0x1e4>
 8007822:	2300      	movs	r3, #0
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d026      	beq.n	8007878 <aiPrintLayoutBuffer+0x238>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00a      	beq.n	8007848 <aiPrintLayoutBuffer+0x208>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b00      	cmp	r3, #0
 800783e:	d003      	beq.n	8007848 <aiPrintLayoutBuffer+0x208>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	e000      	b.n	800784a <aiPrintLayoutBuffer+0x20a>
 8007848:	2300      	movs	r3, #0
 800784a:	885b      	ldrh	r3, [r3, #2]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d013      	beq.n	8007878 <aiPrintLayoutBuffer+0x238>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00a      	beq.n	800786e <aiPrintLayoutBuffer+0x22e>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <aiPrintLayoutBuffer+0x22e>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	e000      	b.n	8007870 <aiPrintLayoutBuffer+0x230>
 800786e:	2300      	movs	r3, #0
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	e057      	b.n	8007928 <aiPrintLayoutBuffer+0x2e8>
 8007878:	2300      	movs	r3, #0
 800787a:	e055      	b.n	8007928 <aiPrintLayoutBuffer+0x2e8>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d04f      	beq.n	8007924 <aiPrintLayoutBuffer+0x2e4>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b00      	cmp	r3, #0
 8007890:	d048      	beq.n	8007924 <aiPrintLayoutBuffer+0x2e4>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d043      	beq.n	8007924 <aiPrintLayoutBuffer+0x2e4>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d013      	beq.n	80078cc <aiPrintLayoutBuffer+0x28c>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00c      	beq.n	80078cc <aiPrintLayoutBuffer+0x28c>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	e009      	b.n	80078ce <aiPrintLayoutBuffer+0x28e>
 80078ba:	bf00      	nop
 80078bc:	0800fc18 	.word	0x0800fc18
 80078c0:	0800fc20 	.word	0x0800fc20
 80078c4:	0800fc24 	.word	0x0800fc24
 80078c8:	0800fc28 	.word	0x0800fc28
 80078cc:	2300      	movs	r3, #0
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d027      	beq.n	8007924 <aiPrintLayoutBuffer+0x2e4>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00a      	beq.n	80078f2 <aiPrintLayoutBuffer+0x2b2>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <aiPrintLayoutBuffer+0x2b2>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	e000      	b.n	80078f4 <aiPrintLayoutBuffer+0x2b4>
 80078f2:	2300      	movs	r3, #0
 80078f4:	885b      	ldrh	r3, [r3, #2]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d014      	beq.n	8007924 <aiPrintLayoutBuffer+0x2e4>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00a      	beq.n	8007918 <aiPrintLayoutBuffer+0x2d8>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b00      	cmp	r3, #0
 800790e:	d003      	beq.n	8007918 <aiPrintLayoutBuffer+0x2d8>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	e000      	b.n	800791a <aiPrintLayoutBuffer+0x2da>
 8007918:	2300      	movs	r3, #0
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f993 3000 	ldrsb.w	r3, [r3]
 8007922:	e001      	b.n	8007928 <aiPrintLayoutBuffer+0x2e8>
 8007924:	2300      	movs	r3, #0
 8007926:	e001      	b.n	800792c <aiPrintLayoutBuffer+0x2ec>
 8007928:	e000      	b.n	800792c <aiPrintLayoutBuffer+0x2ec>
 800792a:	2300      	movs	r3, #0
 800792c:	617b      	str	r3, [r7, #20]
            printf(" scale=%f, zero=%d,", scale, zero_point);
 800792e:	edd7 7a06 	vldr	s15, [r7, #24]
 8007932:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	ec53 2b17 	vmov	r2, r3, d7
 800793e:	4833      	ldr	r0, [pc, #204]	; (8007a0c <aiPrintLayoutBuffer+0x3cc>)
 8007940:	f006 fa9e 	bl	800de80 <iprintf>
        if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8007944:	e02d      	b.n	80079a2 <aiPrintLayoutBuffer+0x362>
        } else {
            printf("Q%d.%d,",
                    (int)AI_BUFFER_FMT_GET_BITS(buffer->format)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	11db      	asrs	r3, r3, #7
 800794c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                    - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	b2db      	uxtb	r3, r3
 8007956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800795a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
                            (int)AI_BUFFER_FMT_GET_SIGN(buffer->format)),
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	15db      	asrs	r3, r3, #23
 8007964:	f003 0301 	and.w	r3, r3, #1
                    - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 8007968:	440b      	add	r3, r1
            printf("Q%d.%d,",
 800796a:	1ad1      	subs	r1, r2, r3
                            AI_BUFFER_FMT_GET_FBITS(buffer->format));
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	b2db      	uxtb	r3, r3
 8007972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
            printf("Q%d.%d,",
 8007976:	3b40      	subs	r3, #64	; 0x40
 8007978:	461a      	mov	r2, r3
 800797a:	4825      	ldr	r0, [pc, #148]	; (8007a10 <aiPrintLayoutBuffer+0x3d0>)
 800797c:	f006 fa80 	bl	800de80 <iprintf>
 8007980:	e00f      	b.n	80079a2 <aiPrintLayoutBuffer+0x362>
        }
    }
    else if (type_id == AI_BUFFER_FMT_TYPE_FLOAT)
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d109      	bne.n	800799c <aiPrintLayoutBuffer+0x35c>
        printf(" float%d,",
                (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	11db      	asrs	r3, r3, #7
        printf(" float%d,",
 800798e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007992:	4619      	mov	r1, r3
 8007994:	481f      	ldr	r0, [pc, #124]	; (8007a14 <aiPrintLayoutBuffer+0x3d4>)
 8007996:	f006 fa73 	bl	800de80 <iprintf>
 800799a:	e002      	b.n	80079a2 <aiPrintLayoutBuffer+0x362>
    else
        printf("NONE");
 800799c:	481e      	ldr	r0, [pc, #120]	; (8007a18 <aiPrintLayoutBuffer+0x3d8>)
 800799e:	f006 fa6f 	bl	800de80 <iprintf>
    printf(" %ld bytes, shape=(%d,%d,%ld)",
            AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), buffer->format),
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	891b      	ldrh	r3, [r3, #8]
 80079a6:	461a      	mov	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	88db      	ldrh	r3, [r3, #6]
 80079ac:	fb03 f302 	mul.w	r3, r3, r2
 80079b0:	461a      	mov	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	fb03 f302 	mul.w	r3, r3, r2
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	6812      	ldr	r2, [r2, #0]
 80079be:	11d2      	asrs	r2, r2, #7
 80079c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80079c4:	fb02 f303 	mul.w	r3, r2, r3
 80079c8:	3304      	adds	r3, #4
    printf(" %ld bytes, shape=(%d,%d,%ld)",
 80079ca:	08d9      	lsrs	r1, r3, #3
            buffer->height, buffer->width, buffer->channels);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	88db      	ldrh	r3, [r3, #6]
    printf(" %ld bytes, shape=(%d,%d,%ld)",
 80079d0:	461a      	mov	r2, r3
            buffer->height, buffer->width, buffer->channels);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	891b      	ldrh	r3, [r3, #8]
    printf(" %ld bytes, shape=(%d,%d,%ld)",
 80079d6:	4618      	mov	r0, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	4603      	mov	r3, r0
 80079e0:	480e      	ldr	r0, [pc, #56]	; (8007a1c <aiPrintLayoutBuffer+0x3dc>)
 80079e2:	f006 fa4d 	bl	800de80 <iprintf>
    if (buffer->data)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d006      	beq.n	80079fc <aiPrintLayoutBuffer+0x3bc>
        printf(" (@0x%08x)\r\n", (int)buffer->data);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	4619      	mov	r1, r3
 80079f4:	480a      	ldr	r0, [pc, #40]	; (8007a20 <aiPrintLayoutBuffer+0x3e0>)
 80079f6:	f006 fa43 	bl	800de80 <iprintf>
    else
        printf(" (USER domain)\r\n");
}
 80079fa:	e002      	b.n	8007a02 <aiPrintLayoutBuffer+0x3c2>
        printf(" (USER domain)\r\n");
 80079fc:	4809      	ldr	r0, [pc, #36]	; (8007a24 <aiPrintLayoutBuffer+0x3e4>)
 80079fe:	f006 fab3 	bl	800df68 <puts>
}
 8007a02:	bf00      	nop
 8007a04:	3720      	adds	r7, #32
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	0800fc30 	.word	0x0800fc30
 8007a10:	0800fc44 	.word	0x0800fc44
 8007a14:	0800fc4c 	.word	0x0800fc4c
 8007a18:	0800fc58 	.word	0x0800fc58
 8007a1c:	0800fc60 	.word	0x0800fc60
 8007a20:	0800fc80 	.word	0x0800fc80
 8007a24:	0800fc90 	.word	0x0800fc90

08007a28 <aiPrintNetworkInfo>:

__STATIC_INLINE void aiPrintNetworkInfo(const ai_network_report* report)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
    int i;
    printf("Network informations...\r\n");
 8007a30:	485a      	ldr	r0, [pc, #360]	; (8007b9c <aiPrintNetworkInfo+0x174>)
 8007a32:	f006 fa99 	bl	800df68 <puts>
    printf(" model name         : %s\r\n", report->model_name);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	4858      	ldr	r0, [pc, #352]	; (8007ba0 <aiPrintNetworkInfo+0x178>)
 8007a3e:	f006 fa1f 	bl	800de80 <iprintf>
    printf(" model signature    : %s\r\n", report->model_signature);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	4619      	mov	r1, r3
 8007a48:	4856      	ldr	r0, [pc, #344]	; (8007ba4 <aiPrintNetworkInfo+0x17c>)
 8007a4a:	f006 fa19 	bl	800de80 <iprintf>
    printf(" model datetime     : %s\r\n", report->model_datetime);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	4619      	mov	r1, r3
 8007a54:	4854      	ldr	r0, [pc, #336]	; (8007ba8 <aiPrintNetworkInfo+0x180>)
 8007a56:	f006 fa13 	bl	800de80 <iprintf>
    printf(" compile datetime   : %s\r\n", report->compile_datetime);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4852      	ldr	r0, [pc, #328]	; (8007bac <aiPrintNetworkInfo+0x184>)
 8007a62:	f006 fa0d 	bl	800de80 <iprintf>
    printf(" runtime version    : %d.%d.%d\r\n",
            report->runtime_version.major,
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	7d1b      	ldrb	r3, [r3, #20]
    printf(" runtime version    : %d.%d.%d\r\n",
 8007a6a:	4619      	mov	r1, r3
            report->runtime_version.minor,
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	7d5b      	ldrb	r3, [r3, #21]
    printf(" runtime version    : %d.%d.%d\r\n",
 8007a70:	461a      	mov	r2, r3
            report->runtime_version.micro);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	7d9b      	ldrb	r3, [r3, #22]
    printf(" runtime version    : %d.%d.%d\r\n",
 8007a76:	484e      	ldr	r0, [pc, #312]	; (8007bb0 <aiPrintNetworkInfo+0x188>)
 8007a78:	f006 fa02 	bl	800de80 <iprintf>
    if (report->tool_revision[0])
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00c      	beq.n	8007aa0 <aiPrintNetworkInfo+0x78>
    	printf(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <aiPrintNetworkInfo+0x6e>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	e000      	b.n	8007a98 <aiPrintNetworkInfo+0x70>
 8007a96:	4b47      	ldr	r3, [pc, #284]	; (8007bb4 <aiPrintNetworkInfo+0x18c>)
 8007a98:	4619      	mov	r1, r3
 8007a9a:	4847      	ldr	r0, [pc, #284]	; (8007bb8 <aiPrintNetworkInfo+0x190>)
 8007a9c:	f006 f9f0 	bl	800de80 <iprintf>
    printf(" tools version      : %d.%d.%d\r\n",
            report->tool_version.major,
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	7f1b      	ldrb	r3, [r3, #28]
    printf(" tools version      : %d.%d.%d\r\n",
 8007aa4:	4619      	mov	r1, r3
            report->tool_version.minor,
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	7f5b      	ldrb	r3, [r3, #29]
    printf(" tools version      : %d.%d.%d\r\n",
 8007aaa:	461a      	mov	r2, r3
            report->tool_version.micro);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	7f9b      	ldrb	r3, [r3, #30]
    printf(" tools version      : %d.%d.%d\r\n",
 8007ab0:	4842      	ldr	r0, [pc, #264]	; (8007bbc <aiPrintNetworkInfo+0x194>)
 8007ab2:	f006 f9e5 	bl	800de80 <iprintf>
    printf(" complexity         : %ld MACC\r\n", report->n_macc);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aba:	4619      	mov	r1, r3
 8007abc:	4840      	ldr	r0, [pc, #256]	; (8007bc0 <aiPrintNetworkInfo+0x198>)
 8007abe:	f006 f9df 	bl	800de80 <iprintf>
    printf(" c-nodes            : %ld\r\n", report->n_nodes);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	483e      	ldr	r0, [pc, #248]	; (8007bc4 <aiPrintNetworkInfo+0x19c>)
 8007aca:	f006 f9d9 	bl	800de80 <iprintf>
    printf(" activations        : %ld bytes (@0x%08x)\r\n",
            AI_BUFFER_SIZE(&report->activations), (int)report->activations.data);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8007adc:	fb03 f302 	mul.w	r3, r3, r2
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    printf(" activations        : %ld bytes (@0x%08x)\r\n",
 8007ae6:	fb03 f102 	mul.w	r1, r3, r2
            AI_BUFFER_SIZE(&report->activations), (int)report->activations.data);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    printf(" activations        : %ld bytes (@0x%08x)\r\n",
 8007aee:	461a      	mov	r2, r3
 8007af0:	4835      	ldr	r0, [pc, #212]	; (8007bc8 <aiPrintNetworkInfo+0x1a0>)
 8007af2:	f006 f9c5 	bl	800de80 <iprintf>
    printf(" weights            : %ld bytes (@0x%08x)\r\n",
            AI_BUFFER_SIZE(&report->params), (int)report->params.data);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007afc:	461a      	mov	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b04:	fb03 f302 	mul.w	r3, r3, r2
 8007b08:	461a      	mov	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    printf(" weights            : %ld bytes (@0x%08x)\r\n",
 8007b0e:	fb03 f102 	mul.w	r1, r3, r2
            AI_BUFFER_SIZE(&report->params), (int)report->params.data);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    printf(" weights            : %ld bytes (@0x%08x)\r\n",
 8007b16:	461a      	mov	r2, r3
 8007b18:	482c      	ldr	r0, [pc, #176]	; (8007bcc <aiPrintNetworkInfo+0x1a4>)
 8007b1a:	f006 f9b1 	bl	800de80 <iprintf>
    printf(" inputs/outputs     : %u/%u\r\n", report->n_inputs,
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007b22:	4619      	mov	r1, r3
            report->n_outputs);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    printf(" inputs/outputs     : %u/%u\r\n", report->n_inputs,
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4829      	ldr	r0, [pc, #164]	; (8007bd0 <aiPrintNetworkInfo+0x1a8>)
 8007b2c:	f006 f9a8 	bl	800de80 <iprintf>
    for (i=0; i<report->n_inputs; i++)
 8007b30:	2300      	movs	r3, #0
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	e00f      	b.n	8007b56 <aiPrintNetworkInfo+0x12e>
        aiPrintLayoutBuffer("  I", i, &report->inputs[i]);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	4413      	add	r3, r2
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	440b      	add	r3, r1
 8007b46:	461a      	mov	r2, r3
 8007b48:	68f9      	ldr	r1, [r7, #12]
 8007b4a:	4822      	ldr	r0, [pc, #136]	; (8007bd4 <aiPrintNetworkInfo+0x1ac>)
 8007b4c:	f7ff fd78 	bl	8007640 <aiPrintLayoutBuffer>
    for (i=0; i<report->n_inputs; i++)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3301      	adds	r3, #1
 8007b54:	60fb      	str	r3, [r7, #12]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	dbe9      	blt.n	8007b36 <aiPrintNetworkInfo+0x10e>
    for (i=0; i<report->n_outputs; i++)
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	e00f      	b.n	8007b88 <aiPrintNetworkInfo+0x160>
        aiPrintLayoutBuffer("  O", i, &report->outputs[i]);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	005b      	lsls	r3, r3, #1
 8007b72:	4413      	add	r3, r2
 8007b74:	00db      	lsls	r3, r3, #3
 8007b76:	440b      	add	r3, r1
 8007b78:	461a      	mov	r2, r3
 8007b7a:	68f9      	ldr	r1, [r7, #12]
 8007b7c:	4816      	ldr	r0, [pc, #88]	; (8007bd8 <aiPrintNetworkInfo+0x1b0>)
 8007b7e:	f7ff fd5f 	bl	8007640 <aiPrintLayoutBuffer>
    for (i=0; i<report->n_outputs; i++)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3301      	adds	r3, #1
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	4293      	cmp	r3, r2
 8007b92:	dbe9      	blt.n	8007b68 <aiPrintNetworkInfo+0x140>
}
 8007b94:	bf00      	nop
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	0800fca0 	.word	0x0800fca0
 8007ba0:	0800fcbc 	.word	0x0800fcbc
 8007ba4:	0800fcd8 	.word	0x0800fcd8
 8007ba8:	0800fcf4 	.word	0x0800fcf4
 8007bac:	0800fd10 	.word	0x0800fd10
 8007bb0:	0800fd2c 	.word	0x0800fd2c
 8007bb4:	0800fd50 	.word	0x0800fd50
 8007bb8:	0800fd54 	.word	0x0800fd54
 8007bbc:	0800fd70 	.word	0x0800fd70
 8007bc0:	0800fd94 	.word	0x0800fd94
 8007bc4:	0800fdb8 	.word	0x0800fdb8
 8007bc8:	0800fdd4 	.word	0x0800fdd4
 8007bcc:	0800fe00 	.word	0x0800fe00
 8007bd0:	0800fe2c 	.word	0x0800fe2c
 8007bd4:	0800fe4c 	.word	0x0800fe4c
 8007bd8:	0800fe50 	.word	0x0800fe50

08007bdc <aiBootstrap>:

static int aiBootstrap(const char *nn_name, const int idx)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b092      	sub	sp, #72	; 0x48
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
    ai_error err;
    ai_u32 ext_addr, sz;

    /* Creating the network */
    printf("Creating instance for \"%s\"..\r\n", nn_name);
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	4868      	ldr	r0, [pc, #416]	; (8007d8c <aiBootstrap+0x1b0>)
 8007bea:	f006 f949 	bl	800de80 <iprintf>
    err = ai_mnetwork_create(nn_name, &net_exec_ctx[idx].handle, NULL);
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	011b      	lsls	r3, r3, #4
 8007bf4:	1a9b      	subs	r3, r3, r2
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	4a65      	ldr	r2, [pc, #404]	; (8007d90 <aiBootstrap+0x1b4>)
 8007bfa:	4413      	add	r3, r2
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 ff37 	bl	8008a74 <ai_mnetwork_create>
 8007c06:	4603      	mov	r3, r0
 8007c08:	647b      	str	r3, [r7, #68]	; 0x44
    if (err.type) {
 8007c0a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d006      	beq.n	8007c20 <aiBootstrap+0x44>
        aiLogErr(err, "ai_mnetwork_create");
 8007c12:	4960      	ldr	r1, [pc, #384]	; (8007d94 <aiBootstrap+0x1b8>)
 8007c14:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007c16:	f7ff fcef 	bl	80075f8 <aiLogErr>
        return -1;
 8007c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c1e:	e0b0      	b.n	8007d82 <aiBootstrap+0x1a6>
    }

    /* Initialize the instance */
    printf("Initializing..\r\n");
 8007c20:	485d      	ldr	r0, [pc, #372]	; (8007d98 <aiBootstrap+0x1bc>)
 8007c22:	f006 f9a1 	bl	800df68 <puts>
#if !defined(AI_MNETWORK_DATA_ACTIVATIONS_INT_SIZE)
    const ai_network_params params = {
            AI_BUFFER_NULL(NULL),
            AI_BUFFER_NULL(activations) };
#else
    ai_network_params params = {
 8007c26:	f107 030c 	add.w	r3, r7, #12
 8007c2a:	2230      	movs	r2, #48	; 0x30
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f005 fc39 	bl	800d4a6 <memset>
 8007c34:	4b59      	ldr	r3, [pc, #356]	; (8007d9c <aiBootstrap+0x1c0>)
 8007c36:	60fb      	str	r3, [r7, #12]
 8007c38:	4b58      	ldr	r3, [pc, #352]	; (8007d9c <aiBootstrap+0x1c0>)
 8007c3a:	627b      	str	r3, [r7, #36]	; 0x24
            AI_BUFFER_NULL(NULL),
            AI_BUFFER_NULL(NULL) };

    if (ai_mnetwork_get_ext_data_activations(net_exec_ctx[idx].handle, &ext_addr, &sz) == 0) {
 8007c3c:	4954      	ldr	r1, [pc, #336]	; (8007d90 <aiBootstrap+0x1b4>)
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	4613      	mov	r3, r2
 8007c42:	011b      	lsls	r3, r3, #4
 8007c44:	1a9b      	subs	r3, r3, r2
 8007c46:	00db      	lsls	r3, r3, #3
 8007c48:	440b      	add	r3, r1
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007c50:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8007c54:	4618      	mov	r0, r3
 8007c56:	f001 f843 	bl	8008ce0 <ai_mnetwork_get_ext_data_activations>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10a      	bne.n	8007c76 <aiBootstrap+0x9a>
        if (ext_addr == 0xFFFFFFFF) {
 8007c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c66:	d104      	bne.n	8007c72 <aiBootstrap+0x96>
            params.activations.data = (ai_handle)activations;
 8007c68:	4b4d      	ldr	r3, [pc, #308]	; (8007da0 <aiBootstrap+0x1c4>)
 8007c6a:	637b      	str	r3, [r7, #52]	; 0x34
            ext_addr = (ai_u32)activations;
 8007c6c:	4b4c      	ldr	r3, [pc, #304]	; (8007da0 <aiBootstrap+0x1c4>)
 8007c6e:	643b      	str	r3, [r7, #64]	; 0x40
 8007c70:	e001      	b.n	8007c76 <aiBootstrap+0x9a>
        }
        else {
            params.activations.data = (ai_handle)ext_addr;
 8007c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c74:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }
#endif

    if (!ai_mnetwork_init(net_exec_ctx[idx].handle, &params)) {
 8007c76:	4946      	ldr	r1, [pc, #280]	; (8007d90 <aiBootstrap+0x1b4>)
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	011b      	lsls	r3, r3, #4
 8007c7e:	1a9b      	subs	r3, r3, r2
 8007c80:	00db      	lsls	r3, r3, #3
 8007c82:	440b      	add	r3, r1
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f107 020c 	add.w	r2, r7, #12
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 ffba 	bl	8008c06 <ai_mnetwork_init>
 8007c92:	4603      	mov	r3, r0
 8007c94:	f083 0301 	eor.w	r3, r3, #1
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d027      	beq.n	8007cee <aiBootstrap+0x112>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].handle);
 8007c9e:	493c      	ldr	r1, [pc, #240]	; (8007d90 <aiBootstrap+0x1b4>)
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	011b      	lsls	r3, r3, #4
 8007ca6:	1a9b      	subs	r3, r3, r2
 8007ca8:	00db      	lsls	r3, r3, #3
 8007caa:	440b      	add	r3, r1
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f000 ff89 	bl	8008bc6 <ai_mnetwork_get_error>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	647b      	str	r3, [r7, #68]	; 0x44
        aiLogErr(err, "ai_mnetwork_init");
 8007cb8:	493a      	ldr	r1, [pc, #232]	; (8007da4 <aiBootstrap+0x1c8>)
 8007cba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007cbc:	f7ff fc9c 	bl	80075f8 <aiLogErr>
        ai_mnetwork_destroy(net_exec_ctx[idx].handle);
 8007cc0:	4933      	ldr	r1, [pc, #204]	; (8007d90 <aiBootstrap+0x1b4>)
 8007cc2:	683a      	ldr	r2, [r7, #0]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	1a9b      	subs	r3, r3, r2
 8007cca:	00db      	lsls	r3, r3, #3
 8007ccc:	440b      	add	r3, r1
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f000 ff3b 	bl	8008b4c <ai_mnetwork_destroy>
        net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8007cd6:	492e      	ldr	r1, [pc, #184]	; (8007d90 <aiBootstrap+0x1b4>)
 8007cd8:	683a      	ldr	r2, [r7, #0]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	011b      	lsls	r3, r3, #4
 8007cde:	1a9b      	subs	r3, r3, r2
 8007ce0:	00db      	lsls	r3, r3, #3
 8007ce2:	440b      	add	r3, r1
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	601a      	str	r2, [r3, #0]
        return -4;
 8007ce8:	f06f 0303 	mvn.w	r3, #3
 8007cec:	e049      	b.n	8007d82 <aiBootstrap+0x1a6>
    }

    /* Query the created network to get relevant info from it */
    if (ai_mnetwork_get_info(net_exec_ctx[idx].handle, &net_exec_ctx[idx].report)) {
 8007cee:	4928      	ldr	r1, [pc, #160]	; (8007d90 <aiBootstrap+0x1b4>)
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	011b      	lsls	r3, r3, #4
 8007cf6:	1a9b      	subs	r3, r3, r2
 8007cf8:	00db      	lsls	r3, r3, #3
 8007cfa:	440b      	add	r3, r1
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	683a      	ldr	r2, [r7, #0]
 8007d00:	4613      	mov	r3, r2
 8007d02:	011b      	lsls	r3, r3, #4
 8007d04:	1a9b      	subs	r3, r3, r2
 8007d06:	00db      	lsls	r3, r3, #3
 8007d08:	4a21      	ldr	r2, [pc, #132]	; (8007d90 <aiBootstrap+0x1b4>)
 8007d0a:	4413      	add	r3, r2
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	4619      	mov	r1, r3
 8007d10:	f000 ff3e 	bl	8008b90 <ai_mnetwork_get_info>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00c      	beq.n	8007d34 <aiBootstrap+0x158>
        aiPrintNetworkInfo(&net_exec_ctx[idx].report);
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	1a9b      	subs	r3, r3, r2
 8007d22:	00db      	lsls	r3, r3, #3
 8007d24:	4a1a      	ldr	r2, [pc, #104]	; (8007d90 <aiBootstrap+0x1b4>)
 8007d26:	4413      	add	r3, r2
 8007d28:	3304      	adds	r3, #4
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff fe7c 	bl	8007a28 <aiPrintNetworkInfo>
        ai_mnetwork_destroy(net_exec_ctx[idx].handle);
        net_exec_ctx[idx].handle = AI_HANDLE_NULL;
        return -2;
    }

    return 0;
 8007d30:	2300      	movs	r3, #0
 8007d32:	e026      	b.n	8007d82 <aiBootstrap+0x1a6>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].handle);
 8007d34:	4916      	ldr	r1, [pc, #88]	; (8007d90 <aiBootstrap+0x1b4>)
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	1a9b      	subs	r3, r3, r2
 8007d3e:	00db      	lsls	r3, r3, #3
 8007d40:	440b      	add	r3, r1
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f000 ff3e 	bl	8008bc6 <ai_mnetwork_get_error>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	647b      	str	r3, [r7, #68]	; 0x44
        aiLogErr(err, "ai_mnetwork_get_info");
 8007d4e:	4916      	ldr	r1, [pc, #88]	; (8007da8 <aiBootstrap+0x1cc>)
 8007d50:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007d52:	f7ff fc51 	bl	80075f8 <aiLogErr>
        ai_mnetwork_destroy(net_exec_ctx[idx].handle);
 8007d56:	490e      	ldr	r1, [pc, #56]	; (8007d90 <aiBootstrap+0x1b4>)
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	011b      	lsls	r3, r3, #4
 8007d5e:	1a9b      	subs	r3, r3, r2
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	440b      	add	r3, r1
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 fef0 	bl	8008b4c <ai_mnetwork_destroy>
        net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8007d6c:	4908      	ldr	r1, [pc, #32]	; (8007d90 <aiBootstrap+0x1b4>)
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	4613      	mov	r3, r2
 8007d72:	011b      	lsls	r3, r3, #4
 8007d74:	1a9b      	subs	r3, r3, r2
 8007d76:	00db      	lsls	r3, r3, #3
 8007d78:	440b      	add	r3, r1
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]
        return -2;
 8007d7e:	f06f 0301 	mvn.w	r3, #1
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3748      	adds	r7, #72	; 0x48
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	0800fe54 	.word	0x0800fe54
 8007d90:	24000964 	.word	0x24000964
 8007d94:	0800fe74 	.word	0x0800fe74
 8007d98:	0800fe88 	.word	0x0800fe88
 8007d9c:	40000040 	.word	0x40000040
 8007da0:	240009dc 	.word	0x240009dc
 8007da4:	0800fe98 	.word	0x0800fe98
 8007da8:	0800feac 	.word	0x0800feac

08007dac <aiInit>:

static int aiInit(void)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
    const char *nn_name;
    int idx;

    printf("\r\nAI Network (AI platform API %d.%d.%d)...\r\n",
 8007db2:	2300      	movs	r3, #0
 8007db4:	2201      	movs	r2, #1
 8007db6:	2101      	movs	r1, #1
 8007db8:	4812      	ldr	r0, [pc, #72]	; (8007e04 <aiInit+0x58>)
 8007dba:	f006 f861 	bl	800de80 <iprintf>
            AI_PLATFORM_API_MAJOR,
            AI_PLATFORM_API_MINOR,
            AI_PLATFORM_API_MICRO);

    /* Discover and init the embedded network */
    idx = 0;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	607b      	str	r3, [r7, #4]
    do {
        nn_name = ai_mnetwork_find(NULL, idx);
 8007dc2:	6879      	ldr	r1, [r7, #4]
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	f000 fe25 	bl	8008a14 <ai_mnetwork_find>
 8007dca:	6038      	str	r0, [r7, #0]
        if (nn_name) {
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00d      	beq.n	8007dee <aiInit+0x42>
            printf("\r\nFound the network \"%s\"\r\n", nn_name);
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	480c      	ldr	r0, [pc, #48]	; (8007e08 <aiInit+0x5c>)
 8007dd6:	f006 f853 	bl	800de80 <iprintf>
            if (aiBootstrap(nn_name, idx))
 8007dda:	6879      	ldr	r1, [r7, #4]
 8007ddc:	6838      	ldr	r0, [r7, #0]
 8007dde:	f7ff fefd 	bl	8007bdc <aiBootstrap>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <aiInit+0x42>
                return -1;
 8007de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dec:	e006      	b.n	8007dfc <aiInit+0x50>
        }
        idx++;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	3301      	adds	r3, #1
 8007df2:	607b      	str	r3, [r7, #4]
    } while (nn_name);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1e3      	bne.n	8007dc2 <aiInit+0x16>

    return 0;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	0800fec4 	.word	0x0800fec4
 8007e08:	0800fef4 	.word	0x0800fef4

08007e0c <aiSystemPerformanceInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiSystemPerformanceInit(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
    printf("\r\n#\r\n");
 8007e10:	4810      	ldr	r0, [pc, #64]	; (8007e54 <aiSystemPerformanceInit+0x48>)
 8007e12:	f006 f8a9 	bl	800df68 <puts>
    printf("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_,
 8007e16:	2300      	movs	r3, #0
 8007e18:	2205      	movs	r2, #5
 8007e1a:	490f      	ldr	r1, [pc, #60]	; (8007e58 <aiSystemPerformanceInit+0x4c>)
 8007e1c:	480f      	ldr	r0, [pc, #60]	; (8007e5c <aiSystemPerformanceInit+0x50>)
 8007e1e:	f006 f82f 	bl	800de80 <iprintf>
            _APP_VERSION_MINOR_ );
    printf("#\r\n");
 8007e22:	480f      	ldr	r0, [pc, #60]	; (8007e60 <aiSystemPerformanceInit+0x54>)
 8007e24:	f006 f8a0 	bl	800df68 <puts>

#if defined(__GNUC__)
    printf("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8007e28:	2301      	movs	r3, #1
 8007e2a:	2203      	movs	r2, #3
 8007e2c:	2107      	movs	r1, #7
 8007e2e:	480d      	ldr	r0, [pc, #52]	; (8007e64 <aiSystemPerformanceInit+0x58>)
 8007e30:	f006 f826 	bl	800de80 <iprintf>
    );
#elif defined (__CC_ARM)
    printf("Compiled with MDK-ARM Keil %d\r\n", __ARMCC_VERSION);
#endif

    crcIpInit();
 8007e34:	f7ff f83c 	bl	8006eb0 <crcIpInit>
    logDeviceConf();
 8007e38:	f7ff fb0a 	bl	8007450 <logDeviceConf>
    cyclesCounterInit();
 8007e3c:	f7ff f886 	bl	8006f4c <cyclesCounterInit>

    aiInit();
 8007e40:	f7ff ffb4 	bl	8007dac <aiInit>

    srand(3); /* deterministic outcome */
 8007e44:	2003      	movs	r0, #3
 8007e46:	f006 f897 	bl	800df78 <srand>

    dwtReset();
 8007e4a:	f7ff f867 	bl	8006f1c <dwtReset>
    return 0;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	08010484 	.word	0x08010484
 8007e58:	0801048c 	.word	0x0801048c
 8007e5c:	080104b0 	.word	0x080104b0
 8007e60:	080104c0 	.word	0x080104c0
 8007e64:	080104c4 	.word	0x080104c4

08007e68 <aiSystemPerformanceProcess>:

int aiSystemPerformanceProcess(void)
{
 8007e68:	b5b0      	push	{r4, r5, r7, lr}
 8007e6a:	f5ad 6d4b 	sub.w	sp, sp, #3248	; 0xcb0
 8007e6e:	af00      	add	r7, sp, #0
	int idx = 0;
 8007e70:	2300      	movs	r3, #0
 8007e72:	f8c7 3ca0 	str.w	r3, [r7, #3232]	; 0xca0
	int batch = 0;
 8007e76:	2300      	movs	r3, #0
 8007e78:	f8c7 3c9c 	str.w	r3, [r7, #3228]	; 0xc9c
	printf("idx: %d\n", idx);
 8007e7c:	f8d7 1ca0 	ldr.w	r1, [r7, #3232]	; 0xca0
 8007e80:	48cd      	ldr	r0, [pc, #820]	; (80081b8 <aiSystemPerformanceProcess+0x350>)
 8007e82:	f005 fffd 	bl	800de80 <iprintf>

	ai_buffer ai_input[AI_MNETWORK_IN_NUM];
	ai_buffer ai_output[AI_MNETWORK_OUT_NUM];

	float input[784] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4549019607843137, 0.49019607843137253, 0.6705882352941176, 1.0, 1.0, 0.5882352941176471, 0.36470588235294116, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6627450980392157, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.8549019607843137, 0.11764705882352941, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6627450980392157, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.8352941176470589, 0.5568627450980392, 0.6901960784313725, 0.9921568627450981, 0.9921568627450981, 0.47843137254901963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20392156862745098, 0.9803921568627451, 0.9921568627450981, 0.8235294117647058, 0.12549019607843137, 0.047058823529411764, 0.0, 0.023529411764705882, 0.807843137254902, 0.9921568627450981, 0.5490196078431373, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.30196078431372547, 0.984313725490196, 0.8235294117647058, 0.09803921568627451, 0.0, 0.0, 0.0, 0.47843137254901963, 0.9725490196078431, 0.9921568627450981, 0.2549019607843137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12156862745098039, 0.07058823529411765, 0.0, 0.0, 0.0, 0.0, 0.8196078431372549, 0.9921568627450981, 0.9921568627450981, 0.2549019607843137, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4588235294117647, 0.9686274509803922, 0.9921568627450981, 0.7764705882352941, 0.0392156862745098, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2980392156862745, 0.9686274509803922, 0.9921568627450981, 0.9058823529411765, 0.24705882352941178, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5019607843137255, 0.9921568627450981, 0.9921568627450981, 0.5647058823529412, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6901960784313725, 0.9647058823529412, 0.9921568627450981, 0.6235294117647059, 0.047058823529411764, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09803921568627451, 0.9176470588235294, 0.9921568627450981, 0.9137254901960784, 0.13725490196078433, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7764705882352941, 0.9921568627450981, 0.9921568627450981, 0.5529411764705883, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3058823529411765, 0.9725490196078431, 0.9921568627450981, 0.7411764705882353, 0.047058823529411764, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07450980392156863, 0.7843137254901961, 0.9921568627450981, 0.9921568627450981, 0.5529411764705883, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5254901960784314, 0.9921568627450981, 0.9921568627450981, 0.6784313725490196, 0.047058823529411764, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9725490196078431, 0.9921568627450981, 0.9921568627450981, 0.09803921568627451, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9725490196078431, 0.9921568627450981, 0.9921568627450981, 0.16862745098039217, 0.0784313725490196, 0.0784313725490196, 0.0784313725490196, 0.0784313725490196, 0.0196078431372549, 0.0, 0.0196078431372549, 0.0784313725490196, 0.0784313725490196, 0.1450980392156863, 0.5882352941176471, 0.5882352941176471, 0.5882352941176471, 0.5764705882352941, 0.0392156862745098, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9725490196078431, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.6588235294117647, 0.5607843137254902, 0.6509803921568628, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.4823529411764706, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6823529411764706, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.9764705882352941, 0.9686274509803922, 0.9686274509803922, 0.6627450980392157, 0.4588235294117647, 0.4588235294117647, 0.2235294117647059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4627450980392157, 0.4823529411764706, 0.4823529411764706, 0.4823529411764706, 0.6509803921568628, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981, 0.6078431372549019, 0.4823529411764706, 0.4823529411764706, 0.1607843137254902, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 8007e86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 8007e90:	461a      	mov	r2, r3
 8007e92:	2100      	movs	r1, #0
 8007e94:	f005 fb07 	bl	800d4a6 <memset>
 8007e98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007e9c:	4ac7      	ldr	r2, [pc, #796]	; (80081bc <aiSystemPerformanceProcess+0x354>)
 8007e9e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 8007ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ea6:	4ac6      	ldr	r2, [pc, #792]	; (80081c0 <aiSystemPerformanceProcess+0x358>)
 8007ea8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
 8007eac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007eb0:	4ac4      	ldr	r2, [pc, #784]	; (80081c4 <aiSystemPerformanceProcess+0x35c>)
 8007eb2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8007eb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007eba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007ebe:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 8007ec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ec6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007eca:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
 8007ece:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ed2:	4abd      	ldr	r2, [pc, #756]	; (80081c8 <aiSystemPerformanceProcess+0x360>)
 8007ed4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 8007ed8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007edc:	4abb      	ldr	r2, [pc, #748]	; (80081cc <aiSystemPerformanceProcess+0x364>)
 8007ede:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
 8007ee2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ee6:	4aba      	ldr	r2, [pc, #744]	; (80081d0 <aiSystemPerformanceProcess+0x368>)
 8007ee8:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
 8007eec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ef0:	4ab8      	ldr	r2, [pc, #736]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 8007ef2:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
 8007ef6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007efa:	4ab6      	ldr	r2, [pc, #728]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 8007efc:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
 8007f00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f04:	4ab3      	ldr	r2, [pc, #716]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 8007f06:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
 8007f0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f0e:	4ab1      	ldr	r2, [pc, #708]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 8007f10:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
 8007f14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f18:	4aae      	ldr	r2, [pc, #696]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 8007f1a:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
 8007f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f22:	4aac      	ldr	r2, [pc, #688]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 8007f24:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 8007f28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f2c:	4aaa      	ldr	r2, [pc, #680]	; (80081d8 <aiSystemPerformanceProcess+0x370>)
 8007f2e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8007f32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f36:	4aa9      	ldr	r2, [pc, #676]	; (80081dc <aiSystemPerformanceProcess+0x374>)
 8007f38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007f3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f40:	4aa3      	ldr	r2, [pc, #652]	; (80081d0 <aiSystemPerformanceProcess+0x368>)
 8007f42:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 8007f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f4a:	4aa2      	ldr	r2, [pc, #648]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 8007f4c:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 8007f50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f54:	4a9f      	ldr	r2, [pc, #636]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 8007f56:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 8007f5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f5e:	4a9d      	ldr	r2, [pc, #628]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 8007f60:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 8007f64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f68:	4a9d      	ldr	r2, [pc, #628]	; (80081e0 <aiSystemPerformanceProcess+0x378>)
 8007f6a:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 8007f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f72:	4a9c      	ldr	r2, [pc, #624]	; (80081e4 <aiSystemPerformanceProcess+0x37c>)
 8007f74:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 8007f78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f7c:	4a9a      	ldr	r2, [pc, #616]	; (80081e8 <aiSystemPerformanceProcess+0x380>)
 8007f7e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 8007f82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f86:	4a93      	ldr	r2, [pc, #588]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 8007f88:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 8007f8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f90:	4a90      	ldr	r2, [pc, #576]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 8007f92:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
 8007f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f9a:	4a94      	ldr	r2, [pc, #592]	; (80081ec <aiSystemPerformanceProcess+0x384>)
 8007f9c:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
 8007fa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fa4:	4a92      	ldr	r2, [pc, #584]	; (80081f0 <aiSystemPerformanceProcess+0x388>)
 8007fa6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 8007faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fae:	4a91      	ldr	r2, [pc, #580]	; (80081f4 <aiSystemPerformanceProcess+0x38c>)
 8007fb0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
 8007fb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fb8:	4a86      	ldr	r2, [pc, #536]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 8007fba:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 8007fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fc2:	4a8d      	ldr	r2, [pc, #564]	; (80081f8 <aiSystemPerformanceProcess+0x390>)
 8007fc4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 8007fc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fcc:	4a8b      	ldr	r2, [pc, #556]	; (80081fc <aiSystemPerformanceProcess+0x394>)
 8007fce:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
 8007fd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fd6:	4a8a      	ldr	r2, [pc, #552]	; (8008200 <aiSystemPerformanceProcess+0x398>)
 8007fd8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
 8007fdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fe0:	4a88      	ldr	r2, [pc, #544]	; (8008204 <aiSystemPerformanceProcess+0x39c>)
 8007fe2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
 8007fe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fea:	4a87      	ldr	r2, [pc, #540]	; (8008208 <aiSystemPerformanceProcess+0x3a0>)
 8007fec:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
 8007ff0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ff4:	4a77      	ldr	r2, [pc, #476]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 8007ff6:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
 8007ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ffe:	4a83      	ldr	r2, [pc, #524]	; (800820c <aiSystemPerformanceProcess+0x3a4>)
 8008000:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
 8008004:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008008:	4a81      	ldr	r2, [pc, #516]	; (8008210 <aiSystemPerformanceProcess+0x3a8>)
 800800a:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
 800800e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008012:	4a80      	ldr	r2, [pc, #512]	; (8008214 <aiSystemPerformanceProcess+0x3ac>)
 8008014:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
 8008018:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800801c:	4a76      	ldr	r2, [pc, #472]	; (80081f8 <aiSystemPerformanceProcess+0x390>)
 800801e:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334
 8008022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008026:	4a7c      	ldr	r2, [pc, #496]	; (8008218 <aiSystemPerformanceProcess+0x3b0>)
 8008028:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
 800802c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008030:	4a6e      	ldr	r2, [pc, #440]	; (80081ec <aiSystemPerformanceProcess+0x384>)
 8008032:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 8008036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800803a:	4a78      	ldr	r2, [pc, #480]	; (800821c <aiSystemPerformanceProcess+0x3b4>)
 800803c:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
 8008040:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008044:	4a63      	ldr	r2, [pc, #396]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 8008046:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 800804a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800804e:	4a74      	ldr	r2, [pc, #464]	; (8008220 <aiSystemPerformanceProcess+0x3b8>)
 8008050:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
 8008054:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008058:	4a72      	ldr	r2, [pc, #456]	; (8008224 <aiSystemPerformanceProcess+0x3bc>)
 800805a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
 800805e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008062:	4a71      	ldr	r2, [pc, #452]	; (8008228 <aiSystemPerformanceProcess+0x3c0>)
 8008064:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
 8008068:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800806c:	4a6f      	ldr	r2, [pc, #444]	; (800822c <aiSystemPerformanceProcess+0x3c4>)
 800806e:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 8008072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008076:	4a57      	ldr	r2, [pc, #348]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 8008078:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
 800807c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008080:	4a54      	ldr	r2, [pc, #336]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 8008082:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
 8008086:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800808a:	4a65      	ldr	r2, [pc, #404]	; (8008220 <aiSystemPerformanceProcess+0x3b8>)
 800808c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
 8008090:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008094:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8008098:	4a65      	ldr	r2, [pc, #404]	; (8008230 <aiSystemPerformanceProcess+0x3c8>)
 800809a:	601a      	str	r2, [r3, #0]
 800809c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080a0:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80080a4:	4a63      	ldr	r2, [pc, #396]	; (8008234 <aiSystemPerformanceProcess+0x3cc>)
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080ac:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 80080b0:	4a48      	ldr	r2, [pc, #288]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080b8:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 80080bc:	4a5e      	ldr	r2, [pc, #376]	; (8008238 <aiSystemPerformanceProcess+0x3d0>)
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080c4:	f203 4334 	addw	r3, r3, #1076	; 0x434
 80080c8:	4a5c      	ldr	r2, [pc, #368]	; (800823c <aiSystemPerformanceProcess+0x3d4>)
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080d0:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80080d4:	4a5a      	ldr	r2, [pc, #360]	; (8008240 <aiSystemPerformanceProcess+0x3d8>)
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080dc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80080e0:	4a54      	ldr	r2, [pc, #336]	; (8008234 <aiSystemPerformanceProcess+0x3cc>)
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080e8:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80080ec:	4a39      	ldr	r2, [pc, #228]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 80080ee:	601a      	str	r2, [r3, #0]
 80080f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080f4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80080f8:	4a52      	ldr	r2, [pc, #328]	; (8008244 <aiSystemPerformanceProcess+0x3dc>)
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008100:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8008104:	4a50      	ldr	r2, [pc, #320]	; (8008248 <aiSystemPerformanceProcess+0x3e0>)
 8008106:	601a      	str	r2, [r3, #0]
 8008108:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800810c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008110:	4a4e      	ldr	r2, [pc, #312]	; (800824c <aiSystemPerformanceProcess+0x3e4>)
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008118:	f203 5304 	addw	r3, r3, #1284	; 0x504
 800811c:	4a2d      	ldr	r2, [pc, #180]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008124:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8008128:	4a2a      	ldr	r2, [pc, #168]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 800812a:	601a      	str	r2, [r3, #0]
 800812c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008130:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8008134:	4a46      	ldr	r2, [pc, #280]	; (8008250 <aiSystemPerformanceProcess+0x3e8>)
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800813c:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 8008140:	4a29      	ldr	r2, [pc, #164]	; (80081e8 <aiSystemPerformanceProcess+0x380>)
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008148:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 800814c:	4a41      	ldr	r2, [pc, #260]	; (8008254 <aiSystemPerformanceProcess+0x3ec>)
 800814e:	601a      	str	r2, [r3, #0]
 8008150:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008154:	f203 5374 	addw	r3, r3, #1396	; 0x574
 8008158:	4a1e      	ldr	r2, [pc, #120]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008160:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8008164:	4a3c      	ldr	r2, [pc, #240]	; (8008258 <aiSystemPerformanceProcess+0x3f0>)
 8008166:	601a      	str	r2, [r3, #0]
 8008168:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800816c:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8008170:	4a23      	ldr	r2, [pc, #140]	; (8008200 <aiSystemPerformanceProcess+0x398>)
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008178:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 800817c:	4a26      	ldr	r2, [pc, #152]	; (8008218 <aiSystemPerformanceProcess+0x3b0>)
 800817e:	601a      	str	r2, [r3, #0]
 8008180:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008184:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8008188:	4a34      	ldr	r2, [pc, #208]	; (800825c <aiSystemPerformanceProcess+0x3f4>)
 800818a:	601a      	str	r2, [r3, #0]
 800818c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008190:	f503 63bc 	add.w	r3, r3, #1504	; 0x5e0
 8008194:	4a0f      	ldr	r2, [pc, #60]	; (80081d4 <aiSystemPerformanceProcess+0x36c>)
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800819c:	f203 53e4 	addw	r3, r3, #1508	; 0x5e4
 80081a0:	4a2f      	ldr	r2, [pc, #188]	; (8008260 <aiSystemPerformanceProcess+0x3f8>)
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081a8:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 80081ac:	4a2d      	ldr	r2, [pc, #180]	; (8008264 <aiSystemPerformanceProcess+0x3fc>)
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081b4:	e058      	b.n	8008268 <aiSystemPerformanceProcess+0x400>
 80081b6:	bf00      	nop
 80081b8:	080104e4 	.word	0x080104e4
 80081bc:	3ee8e8e9 	.word	0x3ee8e8e9
 80081c0:	3efafafb 	.word	0x3efafafb
 80081c4:	3f2babac 	.word	0x3f2babac
 80081c8:	3f169697 	.word	0x3f169697
 80081cc:	3ebababb 	.word	0x3ebababb
 80081d0:	3f29a9aa 	.word	0x3f29a9aa
 80081d4:	3f7dfdfe 	.word	0x3f7dfdfe
 80081d8:	3f5adadb 	.word	0x3f5adadb
 80081dc:	3df0f0f1 	.word	0x3df0f0f1
 80081e0:	3f55d5d6 	.word	0x3f55d5d6
 80081e4:	3f0e8e8f 	.word	0x3f0e8e8f
 80081e8:	3f30b0b1 	.word	0x3f30b0b1
 80081ec:	3ef4f4f5 	.word	0x3ef4f4f5
 80081f0:	3e50d0d1 	.word	0x3e50d0d1
 80081f4:	3f7afafb 	.word	0x3f7afafb
 80081f8:	3f52d2d3 	.word	0x3f52d2d3
 80081fc:	3e008081 	.word	0x3e008081
 8008200:	3d40c0c1 	.word	0x3d40c0c1
 8008204:	3cc0c0c1 	.word	0x3cc0c0c1
 8008208:	3f4ececf 	.word	0x3f4ececf
 800820c:	3f0c8c8d 	.word	0x3f0c8c8d
 8008210:	3e9a9a9b 	.word	0x3e9a9a9b
 8008214:	3f7bfbfc 	.word	0x3f7bfbfc
 8008218:	3dc8c8c9 	.word	0x3dc8c8c9
 800821c:	3f78f8f9 	.word	0x3f78f8f9
 8008220:	3e828283 	.word	0x3e828283
 8008224:	3df8f8f9 	.word	0x3df8f8f9
 8008228:	3d909091 	.word	0x3d909091
 800822c:	3f51d1d2 	.word	0x3f51d1d2
 8008230:	3eeaeaeb 	.word	0x3eeaeaeb
 8008234:	3f77f7f8 	.word	0x3f77f7f8
 8008238:	3f46c6c7 	.word	0x3f46c6c7
 800823c:	3d20a0a1 	.word	0x3d20a0a1
 8008240:	3e989899 	.word	0x3e989899
 8008244:	3f67e7e8 	.word	0x3f67e7e8
 8008248:	3e7cfcfd 	.word	0x3e7cfcfd
 800824c:	3f008081 	.word	0x3f008081
 8008250:	3f109091 	.word	0x3f109091
 8008254:	3f76f6f7 	.word	0x3f76f6f7
 8008258:	3f1f9fa0 	.word	0x3f1f9fa0
 800825c:	3f6aeaeb 	.word	0x3f6aeaeb
 8008260:	3f69e9ea 	.word	0x3f69e9ea
 8008264:	3e0c8c8d 	.word	0x3e0c8c8d
 8008268:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 800826c:	4abe      	ldr	r2, [pc, #760]	; (8008568 <aiSystemPerformanceProcess+0x700>)
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008274:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8008278:	4abc      	ldr	r2, [pc, #752]	; (800856c <aiSystemPerformanceProcess+0x704>)
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008280:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8008284:	4ab9      	ldr	r2, [pc, #740]	; (800856c <aiSystemPerformanceProcess+0x704>)
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800828c:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8008290:	4ab7      	ldr	r2, [pc, #732]	; (8008570 <aiSystemPerformanceProcess+0x708>)
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008298:	f203 63b4 	addw	r3, r3, #1716	; 0x6b4
 800829c:	4ab5      	ldr	r2, [pc, #724]	; (8008574 <aiSystemPerformanceProcess+0x70c>)
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082a4:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 80082a8:	4ab3      	ldr	r2, [pc, #716]	; (8008578 <aiSystemPerformanceProcess+0x710>)
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082b0:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 80082b4:	4aad      	ldr	r2, [pc, #692]	; (800856c <aiSystemPerformanceProcess+0x704>)
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082bc:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80082c0:	4aae      	ldr	r2, [pc, #696]	; (800857c <aiSystemPerformanceProcess+0x714>)
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082c8:	f203 63c4 	addw	r3, r3, #1732	; 0x6c4
 80082cc:	4aac      	ldr	r2, [pc, #688]	; (8008580 <aiSystemPerformanceProcess+0x718>)
 80082ce:	601a      	str	r2, [r3, #0]
 80082d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082d4:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80082d8:	4aaa      	ldr	r2, [pc, #680]	; (8008584 <aiSystemPerformanceProcess+0x71c>)
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082e0:	f203 7324 	addw	r3, r3, #1828	; 0x724
 80082e4:	4aa8      	ldr	r2, [pc, #672]	; (8008588 <aiSystemPerformanceProcess+0x720>)
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082ec:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 80082f0:	4a9e      	ldr	r2, [pc, #632]	; (800856c <aiSystemPerformanceProcess+0x704>)
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082f8:	f203 732c 	addw	r3, r3, #1836	; 0x72c
 80082fc:	4a9b      	ldr	r2, [pc, #620]	; (800856c <aiSystemPerformanceProcess+0x704>)
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008304:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 8008308:	4a99      	ldr	r2, [pc, #612]	; (8008570 <aiSystemPerformanceProcess+0x708>)
 800830a:	601a      	str	r2, [r3, #0]
 800830c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008310:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8008314:	4a9d      	ldr	r2, [pc, #628]	; (800858c <aiSystemPerformanceProcess+0x724>)
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800831c:	f203 7394 	addw	r3, r3, #1940	; 0x794
 8008320:	4a92      	ldr	r2, [pc, #584]	; (800856c <aiSystemPerformanceProcess+0x704>)
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008328:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 800832c:	4a8f      	ldr	r2, [pc, #572]	; (800856c <aiSystemPerformanceProcess+0x704>)
 800832e:	601a      	str	r2, [r3, #0]
 8008330:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008334:	f203 739c 	addw	r3, r3, #1948	; 0x79c
 8008338:	4a95      	ldr	r2, [pc, #596]	; (8008590 <aiSystemPerformanceProcess+0x728>)
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008340:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 8008344:	4a8e      	ldr	r2, [pc, #568]	; (8008580 <aiSystemPerformanceProcess+0x718>)
 8008346:	601a      	str	r2, [r3, #0]
 8008348:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800834c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008350:	4a89      	ldr	r2, [pc, #548]	; (8008578 <aiSystemPerformanceProcess+0x710>)
 8008352:	601a      	str	r2, [r3, #0]
 8008354:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008358:	f603 0304 	addw	r3, r3, #2052	; 0x804
 800835c:	4a83      	ldr	r2, [pc, #524]	; (800856c <aiSystemPerformanceProcess+0x704>)
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008364:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8008368:	4a80      	ldr	r2, [pc, #512]	; (800856c <aiSystemPerformanceProcess+0x704>)
 800836a:	601a      	str	r2, [r3, #0]
 800836c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008370:	f603 030c 	addw	r3, r3, #2060	; 0x80c
 8008374:	4a87      	ldr	r2, [pc, #540]	; (8008594 <aiSystemPerformanceProcess+0x72c>)
 8008376:	601a      	str	r2, [r3, #0]
 8008378:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800837c:	f503 6307 	add.w	r3, r3, #2160	; 0x870
 8008380:	4a7d      	ldr	r2, [pc, #500]	; (8008578 <aiSystemPerformanceProcess+0x710>)
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008388:	f603 0374 	addw	r3, r3, #2164	; 0x874
 800838c:	4a77      	ldr	r2, [pc, #476]	; (800856c <aiSystemPerformanceProcess+0x704>)
 800838e:	601a      	str	r2, [r3, #0]
 8008390:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008394:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8008398:	4a74      	ldr	r2, [pc, #464]	; (800856c <aiSystemPerformanceProcess+0x704>)
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80083a0:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 80083a4:	4a7c      	ldr	r2, [pc, #496]	; (8008598 <aiSystemPerformanceProcess+0x730>)
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80083ac:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 80083b0:	4a7a      	ldr	r2, [pc, #488]	; (800859c <aiSystemPerformanceProcess+0x734>)
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80083b8:	f603 0384 	addw	r3, r3, #2180	; 0x884
 80083bc:	4a77      	ldr	r2, [pc, #476]	; (800859c <aiSystemPerformanceProcess+0x734>)
 80083be:	601a      	str	r2, [r3, #0]
 80083c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80083c4:	f603 0388 	addw	r3, r3, #2184	; 0x888
 80083c8:	4a74      	ldr	r2, [pc, #464]	; (800859c <aiSystemPerformanceProcess+0x734>)
 80083ca:	601a      	str	r2, [r3, #0]
 80083cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80083d0:	f603 038c 	addw	r3, r3, #2188	; 0x88c
 80083d4:	4a71      	ldr	r2, [pc, #452]	; (800859c <aiSystemPerformanceProcess+0x734>)
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80083dc:	f503 6309 	add.w	r3, r3, #2192	; 0x890
 80083e0:	4a6f      	ldr	r2, [pc, #444]	; (80085a0 <aiSystemPerformanceProcess+0x738>)
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80083e8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80083ec:	4a6c      	ldr	r2, [pc, #432]	; (80085a0 <aiSystemPerformanceProcess+0x738>)
 80083ee:	601a      	str	r2, [r3, #0]
 80083f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80083f4:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 80083f8:	4a68      	ldr	r2, [pc, #416]	; (800859c <aiSystemPerformanceProcess+0x734>)
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008400:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8008404:	4a65      	ldr	r2, [pc, #404]	; (800859c <aiSystemPerformanceProcess+0x734>)
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800840c:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4
 8008410:	4a64      	ldr	r2, [pc, #400]	; (80085a4 <aiSystemPerformanceProcess+0x73c>)
 8008412:	601a      	str	r2, [r3, #0]
 8008414:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008418:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 800841c:	4a62      	ldr	r2, [pc, #392]	; (80085a8 <aiSystemPerformanceProcess+0x740>)
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008424:	f603 03ac 	addw	r3, r3, #2220	; 0x8ac
 8008428:	4a5f      	ldr	r2, [pc, #380]	; (80085a8 <aiSystemPerformanceProcess+0x740>)
 800842a:	601a      	str	r2, [r3, #0]
 800842c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008430:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8008434:	4a5c      	ldr	r2, [pc, #368]	; (80085a8 <aiSystemPerformanceProcess+0x740>)
 8008436:	601a      	str	r2, [r3, #0]
 8008438:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800843c:	f603 03b4 	addw	r3, r3, #2228	; 0x8b4
 8008440:	4a5a      	ldr	r2, [pc, #360]	; (80085ac <aiSystemPerformanceProcess+0x744>)
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008448:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 800844c:	4a58      	ldr	r2, [pc, #352]	; (80085b0 <aiSystemPerformanceProcess+0x748>)
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008454:	f503 630e 	add.w	r3, r3, #2272	; 0x8e0
 8008458:	4a47      	ldr	r2, [pc, #284]	; (8008578 <aiSystemPerformanceProcess+0x710>)
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008460:	f603 03e4 	addw	r3, r3, #2276	; 0x8e4
 8008464:	4a41      	ldr	r2, [pc, #260]	; (800856c <aiSystemPerformanceProcess+0x704>)
 8008466:	601a      	str	r2, [r3, #0]
 8008468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800846c:	f603 03e8 	addw	r3, r3, #2280	; 0x8e8
 8008470:	4a3e      	ldr	r2, [pc, #248]	; (800856c <aiSystemPerformanceProcess+0x704>)
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008478:	f603 03ec 	addw	r3, r3, #2284	; 0x8ec
 800847c:	4a3b      	ldr	r2, [pc, #236]	; (800856c <aiSystemPerformanceProcess+0x704>)
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008484:	f503 630f 	add.w	r3, r3, #2288	; 0x8f0
 8008488:	4a38      	ldr	r2, [pc, #224]	; (800856c <aiSystemPerformanceProcess+0x704>)
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008490:	f603 03f4 	addw	r3, r3, #2292	; 0x8f4
 8008494:	4a35      	ldr	r2, [pc, #212]	; (800856c <aiSystemPerformanceProcess+0x704>)
 8008496:	601a      	str	r2, [r3, #0]
 8008498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800849c:	f603 03f8 	addw	r3, r3, #2296	; 0x8f8
 80084a0:	4a32      	ldr	r2, [pc, #200]	; (800856c <aiSystemPerformanceProcess+0x704>)
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084a8:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 80084ac:	4a2f      	ldr	r2, [pc, #188]	; (800856c <aiSystemPerformanceProcess+0x704>)
 80084ae:	601a      	str	r2, [r3, #0]
 80084b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b8:	4a3e      	ldr	r2, [pc, #248]	; (80085b4 <aiSystemPerformanceProcess+0x74c>)
 80084ba:	601a      	str	r2, [r3, #0]
 80084bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084c0:	f603 1304 	addw	r3, r3, #2308	; 0x904
 80084c4:	4a3c      	ldr	r2, [pc, #240]	; (80085b8 <aiSystemPerformanceProcess+0x750>)
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084cc:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80084d0:	4a3a      	ldr	r2, [pc, #232]	; (80085bc <aiSystemPerformanceProcess+0x754>)
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084d8:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 80084dc:	4a23      	ldr	r2, [pc, #140]	; (800856c <aiSystemPerformanceProcess+0x704>)
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084e4:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 80084e8:	4a20      	ldr	r2, [pc, #128]	; (800856c <aiSystemPerformanceProcess+0x704>)
 80084ea:	601a      	str	r2, [r3, #0]
 80084ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084f0:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80084f4:	4a1d      	ldr	r2, [pc, #116]	; (800856c <aiSystemPerformanceProcess+0x704>)
 80084f6:	601a      	str	r2, [r3, #0]
 80084f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084fc:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8008500:	4a1a      	ldr	r2, [pc, #104]	; (800856c <aiSystemPerformanceProcess+0x704>)
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008508:	f603 131c 	addw	r3, r3, #2332	; 0x91c
 800850c:	4a17      	ldr	r2, [pc, #92]	; (800856c <aiSystemPerformanceProcess+0x704>)
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008514:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 8008518:	4a14      	ldr	r2, [pc, #80]	; (800856c <aiSystemPerformanceProcess+0x704>)
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008520:	f603 1324 	addw	r3, r3, #2340	; 0x924
 8008524:	4a11      	ldr	r2, [pc, #68]	; (800856c <aiSystemPerformanceProcess+0x704>)
 8008526:	601a      	str	r2, [r3, #0]
 8008528:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800852c:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8008530:	4a23      	ldr	r2, [pc, #140]	; (80085c0 <aiSystemPerformanceProcess+0x758>)
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008538:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 800853c:	4a21      	ldr	r2, [pc, #132]	; (80085c4 <aiSystemPerformanceProcess+0x75c>)
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008544:	f603 1354 	addw	r3, r3, #2388	; 0x954
 8008548:	4a08      	ldr	r2, [pc, #32]	; (800856c <aiSystemPerformanceProcess+0x704>)
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008550:	f603 1358 	addw	r3, r3, #2392	; 0x958
 8008554:	4a05      	ldr	r2, [pc, #20]	; (800856c <aiSystemPerformanceProcess+0x704>)
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800855c:	f603 135c 	addw	r3, r3, #2396	; 0x95c
 8008560:	4a02      	ldr	r2, [pc, #8]	; (800856c <aiSystemPerformanceProcess+0x704>)
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	e030      	b.n	80085c8 <aiSystemPerformanceProcess+0x760>
 8008566:	bf00      	nop
 8008568:	3f46c6c7 	.word	0x3f46c6c7
 800856c:	3f7dfdfe 	.word	0x3f7dfdfe
 8008570:	3f0d8d8e 	.word	0x3f0d8d8e
 8008574:	3e9c9c9d 	.word	0x3e9c9c9d
 8008578:	3f78f8f9 	.word	0x3f78f8f9
 800857c:	3f3dbdbe 	.word	0x3f3dbdbe
 8008580:	3d40c0c1 	.word	0x3d40c0c1
 8008584:	3d989899 	.word	0x3d989899
 8008588:	3f48c8c9 	.word	0x3f48c8c9
 800858c:	3f068687 	.word	0x3f068687
 8008590:	3f2dadae 	.word	0x3f2dadae
 8008594:	3dc8c8c9 	.word	0x3dc8c8c9
 8008598:	3e2cacad 	.word	0x3e2cacad
 800859c:	3da0a0a1 	.word	0x3da0a0a1
 80085a0:	3ca0a0a1 	.word	0x3ca0a0a1
 80085a4:	3e149495 	.word	0x3e149495
 80085a8:	3f169697 	.word	0x3f169697
 80085ac:	3f139394 	.word	0x3f139394
 80085b0:	3d20a0a1 	.word	0x3d20a0a1
 80085b4:	3f28a8a9 	.word	0x3f28a8a9
 80085b8:	3f0f8f90 	.word	0x3f0f8f90
 80085bc:	3f26a6a7 	.word	0x3f26a6a7
 80085c0:	3ef6f6f7 	.word	0x3ef6f6f7
 80085c4:	3f2eaeaf 	.word	0x3f2eaeaf
 80085c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085cc:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 80085d0:	4aab      	ldr	r2, [pc, #684]	; (8008880 <aiSystemPerformanceProcess+0xa18>)
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085d8:	f603 1364 	addw	r3, r3, #2404	; 0x964
 80085dc:	4aa8      	ldr	r2, [pc, #672]	; (8008880 <aiSystemPerformanceProcess+0xa18>)
 80085de:	601a      	str	r2, [r3, #0]
 80085e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085e4:	f603 1368 	addw	r3, r3, #2408	; 0x968
 80085e8:	4aa5      	ldr	r2, [pc, #660]	; (8008880 <aiSystemPerformanceProcess+0xa18>)
 80085ea:	601a      	str	r2, [r3, #0]
 80085ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085f0:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80085f4:	4aa2      	ldr	r2, [pc, #648]	; (8008880 <aiSystemPerformanceProcess+0xa18>)
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085fc:	f503 6317 	add.w	r3, r3, #2416	; 0x970
 8008600:	4a9f      	ldr	r2, [pc, #636]	; (8008880 <aiSystemPerformanceProcess+0xa18>)
 8008602:	601a      	str	r2, [r3, #0]
 8008604:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008608:	f603 1374 	addw	r3, r3, #2420	; 0x974
 800860c:	4a9c      	ldr	r2, [pc, #624]	; (8008880 <aiSystemPerformanceProcess+0xa18>)
 800860e:	601a      	str	r2, [r3, #0]
 8008610:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008614:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8008618:	4a99      	ldr	r2, [pc, #612]	; (8008880 <aiSystemPerformanceProcess+0xa18>)
 800861a:	601a      	str	r2, [r3, #0]
 800861c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008620:	f603 137c 	addw	r3, r3, #2428	; 0x97c
 8008624:	4a96      	ldr	r2, [pc, #600]	; (8008880 <aiSystemPerformanceProcess+0xa18>)
 8008626:	601a      	str	r2, [r3, #0]
 8008628:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800862c:	f503 6318 	add.w	r3, r3, #2432	; 0x980
 8008630:	4a94      	ldr	r2, [pc, #592]	; (8008884 <aiSystemPerformanceProcess+0xa1c>)
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008638:	f603 1384 	addw	r3, r3, #2436	; 0x984
 800863c:	4a92      	ldr	r2, [pc, #584]	; (8008888 <aiSystemPerformanceProcess+0xa20>)
 800863e:	601a      	str	r2, [r3, #0]
 8008640:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008644:	f603 1388 	addw	r3, r3, #2440	; 0x988
 8008648:	4a8f      	ldr	r2, [pc, #572]	; (8008888 <aiSystemPerformanceProcess+0xa20>)
 800864a:	601a      	str	r2, [r3, #0]
 800864c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008650:	f603 138c 	addw	r3, r3, #2444	; 0x98c
 8008654:	4a8d      	ldr	r2, [pc, #564]	; (800888c <aiSystemPerformanceProcess+0xa24>)
 8008656:	601a      	str	r2, [r3, #0]
 8008658:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800865c:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 8008660:	4a8b      	ldr	r2, [pc, #556]	; (8008890 <aiSystemPerformanceProcess+0xa28>)
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008668:	f603 1394 	addw	r3, r3, #2452	; 0x994
 800866c:	4a88      	ldr	r2, [pc, #544]	; (8008890 <aiSystemPerformanceProcess+0xa28>)
 800866e:	601a      	str	r2, [r3, #0]
 8008670:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008674:	f603 1398 	addw	r3, r3, #2456	; 0x998
 8008678:	4a86      	ldr	r2, [pc, #536]	; (8008894 <aiSystemPerformanceProcess+0xa2c>)
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008680:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8008684:	4a84      	ldr	r2, [pc, #528]	; (8008898 <aiSystemPerformanceProcess+0xa30>)
 8008686:	601a      	str	r2, [r3, #0]
 8008688:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800868c:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 8008690:	4a82      	ldr	r2, [pc, #520]	; (800889c <aiSystemPerformanceProcess+0xa34>)
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008698:	f603 13cc 	addw	r3, r3, #2508	; 0x9cc
 800869c:	4a7f      	ldr	r2, [pc, #508]	; (800889c <aiSystemPerformanceProcess+0xa34>)
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086a4:	f503 631d 	add.w	r3, r3, #2512	; 0x9d0
 80086a8:	4a7c      	ldr	r2, [pc, #496]	; (800889c <aiSystemPerformanceProcess+0xa34>)
 80086aa:	601a      	str	r2, [r3, #0]
 80086ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086b0:	f603 13d4 	addw	r3, r3, #2516	; 0x9d4
 80086b4:	4a7a      	ldr	r2, [pc, #488]	; (80088a0 <aiSystemPerformanceProcess+0xa38>)
 80086b6:	601a      	str	r2, [r3, #0]
 80086b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086bc:	f603 13d8 	addw	r3, r3, #2520	; 0x9d8
 80086c0:	4a6f      	ldr	r2, [pc, #444]	; (8008880 <aiSystemPerformanceProcess+0xa18>)
 80086c2:	601a      	str	r2, [r3, #0]
 80086c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086c8:	f603 13dc 	addw	r3, r3, #2524	; 0x9dc
 80086cc:	4a6c      	ldr	r2, [pc, #432]	; (8008880 <aiSystemPerformanceProcess+0xa18>)
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086d4:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 80086d8:	4a69      	ldr	r2, [pc, #420]	; (8008880 <aiSystemPerformanceProcess+0xa18>)
 80086da:	601a      	str	r2, [r3, #0]
 80086dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086e0:	f603 13e4 	addw	r3, r3, #2532	; 0x9e4
 80086e4:	4a6f      	ldr	r2, [pc, #444]	; (80088a4 <aiSystemPerformanceProcess+0xa3c>)
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086ec:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 80086f0:	4a6a      	ldr	r2, [pc, #424]	; (800889c <aiSystemPerformanceProcess+0xa34>)
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086f8:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 80086fc:	4a67      	ldr	r2, [pc, #412]	; (800889c <aiSystemPerformanceProcess+0xa34>)
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008704:	f503 631f 	add.w	r3, r3, #2544	; 0x9f0
 8008708:	4a67      	ldr	r2, [pc, #412]	; (80088a8 <aiSystemPerformanceProcess+0xa40>)
 800870a:	601a      	str	r2, [r3, #0]
	ai_float output[10] = {0};
 800870c:	463b      	mov	r3, r7
 800870e:	4618      	mov	r0, r3
 8008710:	2328      	movs	r3, #40	; 0x28
 8008712:	461a      	mov	r2, r3
 8008714:	2100      	movs	r1, #0
 8008716:	f004 fec6 	bl	800d4a6 <memset>

	ai_input[0] = net_exec_ctx[idx].report.inputs[0];
 800871a:	4964      	ldr	r1, [pc, #400]	; (80088ac <aiSystemPerformanceProcess+0xa44>)
 800871c:	f8d7 2ca0 	ldr.w	r2, [r7, #3232]	; 0xca0
 8008720:	4613      	mov	r3, r2
 8008722:	011b      	lsls	r3, r3, #4
 8008724:	1a9b      	subs	r3, r3, r2
 8008726:	00db      	lsls	r3, r3, #3
 8008728:	440b      	add	r3, r1
 800872a:	3338      	adds	r3, #56	; 0x38
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f507 6448 	add.w	r4, r7, #3200	; 0xc80
 8008732:	461d      	mov	r5, r3
 8008734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008738:	e895 0003 	ldmia.w	r5, {r0, r1}
 800873c:	e884 0003 	stmia.w	r4, {r0, r1}
	ai_input[0].data = AI_HANDLE_PTR(input);
 8008740:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008744:	f8c7 3c90 	str.w	r3, [r7, #3216]	; 0xc90
	ai_input[0].n_batches = 1;
 8008748:	2301      	movs	r3, #1
 800874a:	f8a7 3c84 	strh.w	r3, [r7, #3204]	; 0xc84
	printf("ai_input[0].n_batches : %d", ai_input[0].n_batches);
 800874e:	f8b7 3c84 	ldrh.w	r3, [r7, #3204]	; 0xc84
 8008752:	4619      	mov	r1, r3
 8008754:	4856      	ldr	r0, [pc, #344]	; (80088b0 <aiSystemPerformanceProcess+0xa48>)
 8008756:	f005 fb93 	bl	800de80 <iprintf>
	printf("AI buffer size : %d.\r\n", AI_BUFFER_SIZE(&ai_input[0]));
 800875a:	f8b7 3c88 	ldrh.w	r3, [r7, #3208]	; 0xc88
 800875e:	f8b7 2c86 	ldrh.w	r2, [r7, #3206]	; 0xc86
 8008762:	fb02 f303 	mul.w	r3, r2, r3
 8008766:	461a      	mov	r2, r3
 8008768:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 800876c:	fb03 f302 	mul.w	r3, r3, r2
 8008770:	4619      	mov	r1, r3
 8008772:	4850      	ldr	r0, [pc, #320]	; (80088b4 <aiSystemPerformanceProcess+0xa4c>)
 8008774:	f005 fb84 	bl	800de80 <iprintf>
	ai_output[0] = net_exec_ctx[idx].report.outputs[0];
 8008778:	494c      	ldr	r1, [pc, #304]	; (80088ac <aiSystemPerformanceProcess+0xa44>)
 800877a:	f8d7 2ca0 	ldr.w	r2, [r7, #3232]	; 0xca0
 800877e:	4613      	mov	r3, r2
 8008780:	011b      	lsls	r3, r3, #4
 8008782:	1a9b      	subs	r3, r3, r2
 8008784:	00db      	lsls	r3, r3, #3
 8008786:	440b      	add	r3, r1
 8008788:	333c      	adds	r3, #60	; 0x3c
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f607 4468 	addw	r4, r7, #3176	; 0xc68
 8008790:	461d      	mov	r5, r3
 8008792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008796:	e895 0003 	ldmia.w	r5, {r0, r1}
 800879a:	e884 0003 	stmia.w	r4, {r0, r1}
	ai_output[0].data = AI_HANDLE_PTR(output);
 800879e:	463b      	mov	r3, r7
 80087a0:	f8c7 3c78 	str.w	r3, [r7, #3192]	; 0xc78
	ai_output[0].n_batches = 1;
 80087a4:	2301      	movs	r3, #1
 80087a6:	f8a7 3c6c 	strh.w	r3, [r7, #3180]	; 0xc6c

	batch = ai_mnetwork_run(net_exec_ctx[idx].handle, &ai_input[0], &ai_output[0]);
 80087aa:	4940      	ldr	r1, [pc, #256]	; (80088ac <aiSystemPerformanceProcess+0xa44>)
 80087ac:	f8d7 2ca0 	ldr.w	r2, [r7, #3232]	; 0xca0
 80087b0:	4613      	mov	r3, r2
 80087b2:	011b      	lsls	r3, r3, #4
 80087b4:	1a9b      	subs	r3, r3, r2
 80087b6:	00db      	lsls	r3, r3, #3
 80087b8:	440b      	add	r3, r1
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80087c0:	f507 6148 	add.w	r1, r7, #3200	; 0xc80
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 fa6f 	bl	8008ca8 <ai_mnetwork_run>
 80087ca:	f8c7 0c9c 	str.w	r0, [r7, #3228]	; 0xc9c
	printf("batch : %d \r\n", batch);
 80087ce:	f8d7 1c9c 	ldr.w	r1, [r7, #3228]	; 0xc9c
 80087d2:	4839      	ldr	r0, [pc, #228]	; (80088b8 <aiSystemPerformanceProcess+0xa50>)
 80087d4:	f005 fb54 	bl	800de80 <iprintf>

	int first_guess = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
	float first_prob = 0.;
 80087de:	f04f 0300 	mov.w	r3, #0
 80087e2:	f607 42a8 	addw	r2, r7, #3240	; 0xca8
 80087e6:	6013      	str	r3, [r2, #0]
	for(int i = 0; i <10; i++)
 80087e8:	2300      	movs	r3, #0
 80087ea:	f8c7 3ca4 	str.w	r3, [r7, #3236]	; 0xca4
 80087ee:	e021      	b.n	8008834 <aiSystemPerformanceProcess+0x9cc>
	{
		if (first_prob < output[i])
 80087f0:	463a      	mov	r2, r7
 80087f2:	f8d7 3ca4 	ldr.w	r3, [r7, #3236]	; 0xca4
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	4413      	add	r3, r2
 80087fa:	edd3 7a00 	vldr	s15, [r3]
 80087fe:	f607 43a8 	addw	r3, r7, #3240	; 0xca8
 8008802:	ed93 7a00 	vldr	s14, [r3]
 8008806:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800880a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800880e:	d50c      	bpl.n	800882a <aiSystemPerformanceProcess+0x9c2>
		{
			first_guess = i;
 8008810:	f8d7 3ca4 	ldr.w	r3, [r7, #3236]	; 0xca4
 8008814:	f8c7 3cac 	str.w	r3, [r7, #3244]	; 0xcac
			first_prob = output[i];
 8008818:	463a      	mov	r2, r7
 800881a:	f8d7 3ca4 	ldr.w	r3, [r7, #3236]	; 0xca4
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f607 42a8 	addw	r2, r7, #3240	; 0xca8
 8008828:	6013      	str	r3, [r2, #0]
	for(int i = 0; i <10; i++)
 800882a:	f8d7 3ca4 	ldr.w	r3, [r7, #3236]	; 0xca4
 800882e:	3301      	adds	r3, #1
 8008830:	f8c7 3ca4 	str.w	r3, [r7, #3236]	; 0xca4
 8008834:	f8d7 3ca4 	ldr.w	r3, [r7, #3236]	; 0xca4
 8008838:	2b09      	cmp	r3, #9
 800883a:	ddd9      	ble.n	80087f0 <aiSystemPerformanceProcess+0x988>
		}
	}

	int y_true = 2;
 800883c:	2302      	movs	r3, #2
 800883e:	f8c7 3c98 	str.w	r3, [r7, #3224]	; 0xc98
	printf("input: x_test[0]\r\n");
 8008842:	481e      	ldr	r0, [pc, #120]	; (80088bc <aiSystemPerformanceProcess+0xa54>)
 8008844:	f005 fb90 	bl	800df68 <puts>
	printf("y_true: %d\r\n", y_true);
 8008848:	f8d7 1c98 	ldr.w	r1, [r7, #3224]	; 0xc98
 800884c:	481c      	ldr	r0, [pc, #112]	; (80088c0 <aiSystemPerformanceProcess+0xa58>)
 800884e:	f005 fb17 	bl	800de80 <iprintf>
	printf("y_pred: %d, score: %f \r\n", first_guess, first_prob);
 8008852:	f607 43a8 	addw	r3, r7, #3240	; 0xca8
 8008856:	edd3 7a00 	vldr	s15, [r3]
 800885a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800885e:	ec53 2b17 	vmov	r2, r3, d7
 8008862:	f8d7 1cac 	ldr.w	r1, [r7, #3244]	; 0xcac
 8008866:	4817      	ldr	r0, [pc, #92]	; (80088c4 <aiSystemPerformanceProcess+0xa5c>)
 8008868:	f005 fb0a 	bl	800de80 <iprintf>
	printf("\r\n===========================\r\n\r\n\r\n");
 800886c:	4816      	ldr	r0, [pc, #88]	; (80088c8 <aiSystemPerformanceProcess+0xa60>)
 800886e:	f005 fb7b 	bl	800df68 <puts>
	return 0;
 8008872:	2300      	movs	r3, #0
//            }
//        }
//    } while (r==0);

//    return r;
}
 8008874:	4618      	mov	r0, r3
 8008876:	f507 674b 	add.w	r7, r7, #3248	; 0xcb0
 800887a:	46bd      	mov	sp, r7
 800887c:	bdb0      	pop	{r4, r5, r7, pc}
 800887e:	bf00      	nop
 8008880:	3f7dfdfe 	.word	0x3f7dfdfe
 8008884:	3f79f9fa 	.word	0x3f79f9fa
 8008888:	3f77f7f8 	.word	0x3f77f7f8
 800888c:	3f29a9aa 	.word	0x3f29a9aa
 8008890:	3eeaeaeb 	.word	0x3eeaeaeb
 8008894:	3e64e4e5 	.word	0x3e64e4e5
 8008898:	3eececed 	.word	0x3eececed
 800889c:	3ef6f6f7 	.word	0x3ef6f6f7
 80088a0:	3f26a6a7 	.word	0x3f26a6a7
 80088a4:	3f1b9b9c 	.word	0x3f1b9b9c
 80088a8:	3e24a4a5 	.word	0x3e24a4a5
 80088ac:	24000964 	.word	0x24000964
 80088b0:	080104f0 	.word	0x080104f0
 80088b4:	0801050c 	.word	0x0801050c
 80088b8:	08010524 	.word	0x08010524
 80088bc:	08010534 	.word	0x08010534
 80088c0:	08010548 	.word	0x08010548
 80088c4:	08010558 	.word	0x08010558
 80088c8:	08010574 	.word	0x08010574

080088cc <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	af00      	add	r7, sp, #0
    MX_UARTx_Init();
 80088d0:	f000 fbd2 	bl	8009078 <MX_USART3_UART_Init>
    aiSystemPerformanceInit();
 80088d4:	f7ff fa9a 	bl	8007e0c <aiSystemPerformanceInit>
    /* USER CODE BEGIN 0 */
    /* USER CODE END 0 */
}
 80088d8:	bf00      	nop
 80088da:	bd80      	pop	{r7, pc}

080088dc <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	af00      	add	r7, sp, #0
    aiSystemPerformanceProcess();
 80088e0:	f7ff fac2 	bl	8007e68 <aiSystemPerformanceProcess>
    HAL_Delay(1000); /* delay 1s */
 80088e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80088e8:	f7f7 ff64 	bl	80007b4 <HAL_Delay>
    /* USER CODE BEGIN 1 */
    /* USER CODE END 1 */
}
 80088ec:	bf00      	nop
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <ai_mnetwork_is_valid>:
AI_STATIC struct network_instance gnetworks[AI_MNETWORK_NUMBER] = {0};

AI_DECLARE_STATIC
ai_bool ai_mnetwork_is_valid(const char* name,
        const ai_network_entry_t *entry)
{
 80088f0:	b590      	push	{r4, r7, lr}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
    if (name && (strlen(entry->name) == strlen(name)) &&
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d01d      	beq.n	800893c <ai_mnetwork_is_valid+0x4c>
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4618      	mov	r0, r3
 8008906:	f7f7 fceb 	bl	80002e0 <strlen>
 800890a:	4604      	mov	r4, r0
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f7f7 fce7 	bl	80002e0 <strlen>
 8008912:	4603      	mov	r3, r0
 8008914:	429c      	cmp	r4, r3
 8008916:	d111      	bne.n	800893c <ai_mnetwork_is_valid+0x4c>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681c      	ldr	r4, [r3, #0]
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4618      	mov	r0, r3
 8008922:	f7f7 fcdd 	bl	80002e0 <strlen>
 8008926:	4603      	mov	r3, r0
 8008928:	461a      	mov	r2, r3
 800892a:	6879      	ldr	r1, [r7, #4]
 800892c:	4620      	mov	r0, r4
 800892e:	f005 fb9a 	bl	800e066 <strncmp>
 8008932:	4603      	mov	r3, r0
    if (name && (strlen(entry->name) == strlen(name)) &&
 8008934:	2b00      	cmp	r3, #0
 8008936:	d101      	bne.n	800893c <ai_mnetwork_is_valid+0x4c>
        return true;
 8008938:	2301      	movs	r3, #1
 800893a:	e000      	b.n	800893e <ai_mnetwork_is_valid+0x4e>
    return false;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	bd90      	pop	{r4, r7, pc}
	...

08008948 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8008950:	2300      	movs	r3, #0
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	e026      	b.n	80089a4 <ai_mnetwork_handle+0x5c>
        if ((inst) && (&gnetworks[i] == inst))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00b      	beq.n	8008974 <ai_mnetwork_handle+0x2c>
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	4613      	mov	r3, r2
 8008960:	00db      	lsls	r3, r3, #3
 8008962:	1a9b      	subs	r3, r3, r2
 8008964:	00db      	lsls	r3, r3, #3
 8008966:	4a14      	ldr	r2, [pc, #80]	; (80089b8 <ai_mnetwork_handle+0x70>)
 8008968:	4413      	add	r3, r2
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	429a      	cmp	r2, r3
 800896e:	d101      	bne.n	8008974 <ai_mnetwork_handle+0x2c>
            return inst;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	e01b      	b.n	80089ac <ai_mnetwork_handle+0x64>
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d111      	bne.n	800899e <ai_mnetwork_handle+0x56>
 800897a:	490f      	ldr	r1, [pc, #60]	; (80089b8 <ai_mnetwork_handle+0x70>)
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	4613      	mov	r3, r2
 8008980:	00db      	lsls	r3, r3, #3
 8008982:	1a9b      	subs	r3, r3, r2
 8008984:	00db      	lsls	r3, r3, #3
 8008986:	440b      	add	r3, r1
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d107      	bne.n	800899e <ai_mnetwork_handle+0x56>
            return &gnetworks[i];
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	4613      	mov	r3, r2
 8008992:	00db      	lsls	r3, r3, #3
 8008994:	1a9b      	subs	r3, r3, r2
 8008996:	00db      	lsls	r3, r3, #3
 8008998:	4a07      	ldr	r2, [pc, #28]	; (80089b8 <ai_mnetwork_handle+0x70>)
 800899a:	4413      	add	r3, r2
 800899c:	e006      	b.n	80089ac <ai_mnetwork_handle+0x64>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3301      	adds	r3, #1
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	ddd5      	ble.n	8008956 <ai_mnetwork_handle+0xe>
    }
    return NULL;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr
 80089b8:	2400186c 	.word	0x2400186c

080089bc <ai_mnetwork_release_handle>:

AI_DECLARE_STATIC
void ai_mnetwork_release_handle(struct network_instance *inst)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 80089c4:	2300      	movs	r3, #0
 80089c6:	60fb      	str	r3, [r7, #12]
 80089c8:	e019      	b.n	80089fe <ai_mnetwork_release_handle+0x42>
        if ((inst) && (&gnetworks[i] == inst)) {
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d013      	beq.n	80089f8 <ai_mnetwork_release_handle+0x3c>
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	4613      	mov	r3, r2
 80089d4:	00db      	lsls	r3, r3, #3
 80089d6:	1a9b      	subs	r3, r3, r2
 80089d8:	00db      	lsls	r3, r3, #3
 80089da:	4a0d      	ldr	r2, [pc, #52]	; (8008a10 <ai_mnetwork_release_handle+0x54>)
 80089dc:	4413      	add	r3, r2
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d109      	bne.n	80089f8 <ai_mnetwork_release_handle+0x3c>
            gnetworks[i].entry = NULL;
 80089e4:	490a      	ldr	r1, [pc, #40]	; (8008a10 <ai_mnetwork_release_handle+0x54>)
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	4613      	mov	r3, r2
 80089ea:	00db      	lsls	r3, r3, #3
 80089ec:	1a9b      	subs	r3, r3, r2
 80089ee:	00db      	lsls	r3, r3, #3
 80089f0:	440b      	add	r3, r1
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
            return;
 80089f6:	e005      	b.n	8008a04 <ai_mnetwork_release_handle+0x48>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	3301      	adds	r3, #1
 80089fc:	60fb      	str	r3, [r7, #12]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	dde2      	ble.n	80089ca <ai_mnetwork_release_handle+0xe>
        }
    }
}
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	2400186c 	.word	0x2400186c

08008a14 <ai_mnetwork_find>:

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8008a1e:	2300      	movs	r3, #0
 8008a20:	60fb      	str	r3, [r7, #12]
 8008a22:	e01c      	b.n	8008a5e <ai_mnetwork_find+0x4a>
        entry = &networks[i];
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	4613      	mov	r3, r2
 8008a28:	005b      	lsls	r3, r3, #1
 8008a2a:	4413      	add	r3, r2
 8008a2c:	015b      	lsls	r3, r3, #5
 8008a2e:	4a10      	ldr	r2, [pc, #64]	; (8008a70 <ai_mnetwork_find+0x5c>)
 8008a30:	4413      	add	r3, r2
 8008a32:	60bb      	str	r3, [r7, #8]
        if (ai_mnetwork_is_valid(name, entry))
 8008a34:	68b9      	ldr	r1, [r7, #8]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f7ff ff5a 	bl	80088f0 <ai_mnetwork_is_valid>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d002      	beq.n	8008a48 <ai_mnetwork_find+0x34>
            return entry->name;
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	e00e      	b.n	8008a66 <ai_mnetwork_find+0x52>
        else {
            if (!idx--)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	1e5a      	subs	r2, r3, #1
 8008a4c:	603a      	str	r2, [r7, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d102      	bne.n	8008a58 <ai_mnetwork_find+0x44>
                return entry->name;
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	e006      	b.n	8008a66 <ai_mnetwork_find+0x52>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	60fb      	str	r3, [r7, #12]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	dddf      	ble.n	8008a24 <ai_mnetwork_find+0x10>
        }
    }
    return NULL;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	08010620 	.word	0x08010620

08008a74 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b08a      	sub	sp, #40	; 0x28
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
 8008a80:	2300      	movs	r3, #0
 8008a82:	627b      	str	r3, [r7, #36]	; 0x24
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8008a84:	2000      	movs	r0, #0
 8008a86:	f7ff ff5f 	bl	8008948 <ai_mnetwork_handle>
 8008a8a:	61f8      	str	r0, [r7, #28]

    if (!inst) {
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d108      	bne.n	8008aa4 <ai_mnetwork_create+0x30>
        err.type = AI_ERROR_ALLOCATION_FAILED;
 8008a92:	2331      	movs	r3, #49	; 0x31
 8008a94:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2210      	movs	r2, #16
 8008a9a:	f362 231f 	bfi	r3, r2, #8, #24
 8008a9e:	617b      	str	r3, [r7, #20]
        return err;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	e04d      	b.n	8008b40 <ai_mnetwork_create+0xcc>
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	623b      	str	r3, [r7, #32]
 8008aa8:	e014      	b.n	8008ad4 <ai_mnetwork_create+0x60>
        entry = &networks[i];
 8008aaa:	6a3a      	ldr	r2, [r7, #32]
 8008aac:	4613      	mov	r3, r2
 8008aae:	005b      	lsls	r3, r3, #1
 8008ab0:	4413      	add	r3, r2
 8008ab2:	015b      	lsls	r3, r3, #5
 8008ab4:	4a24      	ldr	r2, [pc, #144]	; (8008b48 <ai_mnetwork_create+0xd4>)
 8008ab6:	4413      	add	r3, r2
 8008ab8:	61bb      	str	r3, [r7, #24]
        if (ai_mnetwork_is_valid(name, entry)) {
 8008aba:	69b9      	ldr	r1, [r7, #24]
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f7ff ff17 	bl	80088f0 <ai_mnetwork_is_valid>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d002      	beq.n	8008ace <ai_mnetwork_create+0x5a>
            found = entry;
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008acc:	e005      	b.n	8008ada <ai_mnetwork_create+0x66>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	623b      	str	r3, [r7, #32]
 8008ad4:	6a3b      	ldr	r3, [r7, #32]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	dde7      	ble.n	8008aaa <ai_mnetwork_create+0x36>
        }
    }

    if (!found) {
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d108      	bne.n	8008af2 <ai_mnetwork_create+0x7e>
        err.type = AI_ERROR_INVALID_PARAM;
 8008ae0:	2314      	movs	r3, #20
 8008ae2:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	2210      	movs	r2, #16
 8008ae8:	f362 231f 	bfi	r3, r2, #8, #24
 8008aec:	617b      	str	r3, [r7, #20]
        return err;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	e026      	b.n	8008b40 <ai_mnetwork_create+0xcc>
    }

    if (network_config == NULL)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d109      	bne.n	8008b0c <ai_mnetwork_create+0x98>
        err = found->ai_create(network, found->config);
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008afe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008b00:	4611      	mov	r1, r2
 8008b02:	68b8      	ldr	r0, [r7, #8]
 8008b04:	4798      	blx	r3
 8008b06:	4603      	mov	r3, r0
 8008b08:	617b      	str	r3, [r7, #20]
 8008b0a:	e006      	b.n	8008b1a <ai_mnetwork_create+0xa6>
    else
        err = found->ai_create(network, network_config);
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b10:	6879      	ldr	r1, [r7, #4]
 8008b12:	68b8      	ldr	r0, [r7, #8]
 8008b14:	4798      	blx	r3
 8008b16:	4603      	mov	r3, r0
 8008b18:	617b      	str	r3, [r7, #20]
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10c      	bne.n	8008b3e <ai_mnetwork_create+0xca>
 8008b24:	7d3b      	ldrb	r3, [r7, #20]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d109      	bne.n	8008b3e <ai_mnetwork_create+0xca>
        inst->entry = found;
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b2e:	601a      	str	r2, [r3, #0]
        inst->handle = *network;
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	605a      	str	r2, [r3, #4]
        *network = (ai_handle*)inst;
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	69fa      	ldr	r2, [r7, #28]
 8008b3c:	601a      	str	r2, [r3, #0]
    }

    return err;
 8008b3e:	697b      	ldr	r3, [r7, #20]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3728      	adds	r7, #40	; 0x28
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	08010620 	.word	0x08010620

08008b4c <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7ff fef7 	bl	8008948 <ai_mnetwork_handle>
 8008b5a:	60f8      	str	r0, [r7, #12]
    if (inn) {
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d011      	beq.n	8008b86 <ai_mnetwork_destroy+0x3a>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	6852      	ldr	r2, [r2, #4]
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	4798      	blx	r3
 8008b70:	60b8      	str	r0, [r7, #8]
        if (hdl != inn->handle) {
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d004      	beq.n	8008b86 <ai_mnetwork_destroy+0x3a>
            ai_mnetwork_release_handle(inn);
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f7ff ff1d 	bl	80089bc <ai_mnetwork_release_handle>
            network = AI_HANDLE_NULL;
 8008b82:	2300      	movs	r3, #0
 8008b84:	607b      	str	r3, [r7, #4]
        }
    }
    return network;
 8008b86:	687b      	ldr	r3, [r7, #4]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <ai_mnetwork_get_info>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_info(ai_handle network, ai_network_report* report)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7ff fed4 	bl	8008948 <ai_mnetwork_handle>
 8008ba0:	60f8      	str	r0, [r7, #12]
    if (inn)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d009      	beq.n	8008bbc <ai_mnetwork_get_info+0x2c>
        return inn->entry->ai_get_info(inn->handle, report);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	6852      	ldr	r2, [r2, #4]
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	4798      	blx	r3
 8008bb8:	4603      	mov	r3, r0
 8008bba:	e000      	b.n	8008bbe <ai_mnetwork_get_info+0x2e>
    else
        return false;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b084      	sub	sp, #16
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
 8008bce:	2314      	movs	r3, #20
 8008bd0:	723b      	strb	r3, [r7, #8]
    err.code = AI_ERROR_CODE_NETWORK;
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2210      	movs	r2, #16
 8008bd6:	f362 231f 	bfi	r3, r2, #8, #24
 8008bda:	60bb      	str	r3, [r7, #8]

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff feb3 	bl	8008948 <ai_mnetwork_handle>
 8008be2:	60f8      	str	r0, [r7, #12]
    if (inn)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d008      	beq.n	8008bfc <ai_mnetwork_get_error+0x36>
        return inn->entry->ai_get_error(inn->handle);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	6852      	ldr	r2, [r2, #4]
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	4798      	blx	r3
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	e000      	b.n	8008bfe <ai_mnetwork_get_error+0x38>
    else
        return err;
 8008bfc:	68bb      	ldr	r3, [r7, #8]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network, const ai_network_params* params)
{
 8008c06:	b5b0      	push	{r4, r5, r7, lr}
 8008c08:	b090      	sub	sp, #64	; 0x40
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    ai_network_params par;

    /* TODO: adding check ai_buffer activations/weights shape coherence */

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7ff fe99 	bl	8008948 <ai_mnetwork_handle>
 8008c16:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (inn) {
 8008c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d03f      	beq.n	8008c9e <ai_mnetwork_init+0x98>
        par = inn->entry->params;
 8008c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f107 040c 	add.w	r4, r7, #12
 8008c26:	1d1d      	adds	r5, r3, #4
 8008c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008c34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (params->activations.n_batches)
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	8b9b      	ldrh	r3, [r3, #28]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00b      	beq.n	8008c58 <ai_mnetwork_init+0x52>
            par.activations = params->activations;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8008c46:	f103 0518 	add.w	r5, r3, #24
 8008c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008c52:	e884 0003 	stmia.w	r4, {r0, r1}
 8008c56:	e002      	b.n	8008c5e <ai_mnetwork_init+0x58>
        else
            par.activations.data = params->activations.data;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5c:	637b      	str	r3, [r7, #52]	; 0x34
        if (params->params.n_batches)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	889b      	ldrh	r3, [r3, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00a      	beq.n	8008c7c <ai_mnetwork_init+0x76>
            par.params = params->params;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	f107 040c 	add.w	r4, r7, #12
 8008c6c:	461d      	mov	r5, r3
 8008c6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c72:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008c76:	e884 0003 	stmia.w	r4, {r0, r1}
 8008c7a:	e005      	b.n	8008c88 <ai_mnetwork_init+0x82>
        else
            par.params.data = inn->entry->ai_data_weights_get_default();
 8008c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c82:	4798      	blx	r3
 8008c84:	4603      	mov	r3, r0
 8008c86:	61fb      	str	r3, [r7, #28]
        return inn->entry->ai_init(inn->handle, &par);
 8008c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c90:	6852      	ldr	r2, [r2, #4]
 8008c92:	f107 010c 	add.w	r1, r7, #12
 8008c96:	4610      	mov	r0, r2
 8008c98:	4798      	blx	r3
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	e000      	b.n	8008ca0 <ai_mnetwork_init+0x9a>
    }
    else
        return false;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3740      	adds	r7, #64	; 0x40
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bdb0      	pop	{r4, r5, r7, pc}

08008ca8 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f7ff fe47 	bl	8008948 <ai_mnetwork_handle>
 8008cba:	6178      	str	r0, [r7, #20]
    if (inn)
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d009      	beq.n	8008cd6 <ai_mnetwork_run+0x2e>
        return inn->entry->ai_run(inn->handle, input, output);
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	6850      	ldr	r0, [r2, #4]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	68b9      	ldr	r1, [r7, #8]
 8008cd0:	4798      	blx	r3
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	e000      	b.n	8008cd8 <ai_mnetwork_run+0x30>
    else
        return 0;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3718      	adds	r7, #24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <ai_mnetwork_get_ext_data_activations>:

 AI_API_ENTRY
int ai_mnetwork_get_ext_data_activations(ai_handle network,
         ai_u32 *add,
         ai_u32 *size)
 {
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f7ff fe2b 	bl	8008948 <ai_mnetwork_handle>
 8008cf2:	6178      	str	r0, [r7, #20]
     if (inn && add && size) {
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d011      	beq.n	8008d1e <ai_mnetwork_get_ext_data_activations+0x3e>
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00e      	beq.n	8008d1e <ai_mnetwork_get_ext_data_activations+0x3e>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00b      	beq.n	8008d1e <ai_mnetwork_get_ext_data_activations+0x3e>
         *add = inn->entry->extActBufferStartAddr;
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	601a      	str	r2, [r3, #0]
         *size = inn->entry->actBufferSize;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	601a      	str	r2, [r3, #0]
         return 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	e001      	b.n	8008d22 <ai_mnetwork_get_ext_data_activations+0x42>
     }
     else
         return -1;
 8008d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 }
 8008d22:	4618      	mov	r0, r3
 8008d24:	3718      	adds	r7, #24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
	...

08008d2c <SCB_EnableICache>:
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008d30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008d34:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008d38:	4b0b      	ldr	r3, [pc, #44]	; (8008d68 <SCB_EnableICache+0x3c>)
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8008d40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008d44:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8008d48:	4b07      	ldr	r3, [pc, #28]	; (8008d68 <SCB_EnableICache+0x3c>)
 8008d4a:	695b      	ldr	r3, [r3, #20]
 8008d4c:	4a06      	ldr	r2, [pc, #24]	; (8008d68 <SCB_EnableICache+0x3c>)
 8008d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008d54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008d58:	f3bf 8f6f 	isb	sy
}
 8008d5c:	bf00      	nop
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	e000ed00 	.word	0xe000ed00

08008d6c <SCB_EnableDCache>:
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8008d72:	4b1d      	ldr	r3, [pc, #116]	; (8008de8 <SCB_EnableDCache+0x7c>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8008d7a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8008d7e:	4b1a      	ldr	r3, [pc, #104]	; (8008de8 <SCB_EnableDCache+0x7c>)
 8008d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d84:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	0b5b      	lsrs	r3, r3, #13
 8008d8a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008d8e:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	08db      	lsrs	r3, r3, #3
 8008d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d98:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	015a      	lsls	r2, r3, #5
 8008d9e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8008da2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008da8:	490f      	ldr	r1, [pc, #60]	; (8008de8 <SCB_EnableDCache+0x7c>)
 8008daa:	4313      	orrs	r3, r2
 8008dac:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	1e5a      	subs	r2, r3, #1
 8008db4:	60ba      	str	r2, [r7, #8]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1ef      	bne.n	8008d9a <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	1e5a      	subs	r2, r3, #1
 8008dbe:	60fa      	str	r2, [r7, #12]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1e5      	bne.n	8008d90 <SCB_EnableDCache+0x24>
 8008dc4:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008dc8:	4b07      	ldr	r3, [pc, #28]	; (8008de8 <SCB_EnableDCache+0x7c>)
 8008dca:	695b      	ldr	r3, [r3, #20]
 8008dcc:	4a06      	ldr	r2, [pc, #24]	; (8008de8 <SCB_EnableDCache+0x7c>)
 8008dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dd2:	6153      	str	r3, [r2, #20]
 8008dd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008dd8:	f3bf 8f6f 	isb	sy
}
 8008ddc:	bf00      	nop
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	e000ed00 	.word	0xe000ed00

08008dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8008df0:	f7ff ff9c 	bl	8008d2c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8008df4:	f7ff ffba 	bl	8008d6c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008df8:	f7f7 fc4a 	bl	8000690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008dfc:	f000 f810 	bl	8008e20 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008e00:	f000 f9b8 	bl	8009174 <MX_GPIO_Init>
  MX_CRC_Init();
 8008e04:	f000 f8c4 	bl	8008f90 <MX_CRC_Init>
  MX_ETH_Init();
 8008e08:	f000 f8e4 	bl	8008fd4 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8008e0c:	f000 f980 	bl	8009110 <MX_USB_OTG_FS_PCD_Init>
  MX_X_CUBE_AI_Init();
 8008e10:	f7ff fd5c 	bl	80088cc <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
//  while (1)
//  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8008e14:	f7ff fd62 	bl	80088dc <MX_X_CUBE_AI_Process>
 8008e18:	2300      	movs	r3, #0
    /* USER CODE BEGIN 3 */
//  }
  /* USER CODE END 3 */
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	bd80      	pop	{r7, pc}
	...

08008e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b0cc      	sub	sp, #304	; 0x130
 8008e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008e26:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008e2a:	224c      	movs	r2, #76	; 0x4c
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f004 fb39 	bl	800d4a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008e34:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008e38:	2220      	movs	r2, #32
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f004 fb32 	bl	800d4a6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008e42:	f107 0308 	add.w	r3, r7, #8
 8008e46:	4618      	mov	r0, r3
 8008e48:	23bc      	movs	r3, #188	; 0xbc
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	f004 fb2a 	bl	800d4a6 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8008e52:	2002      	movs	r0, #2
 8008e54:	f7f8 fdfe 	bl	8001a54 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008e58:	1d3b      	adds	r3, r7, #4
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	4b49      	ldr	r3, [pc, #292]	; (8008f84 <SystemClock_Config+0x164>)
 8008e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e62:	4a48      	ldr	r2, [pc, #288]	; (8008f84 <SystemClock_Config+0x164>)
 8008e64:	f023 0301 	bic.w	r3, r3, #1
 8008e68:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e6a:	4b46      	ldr	r3, [pc, #280]	; (8008f84 <SystemClock_Config+0x164>)
 8008e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6e:	f003 0201 	and.w	r2, r3, #1
 8008e72:	1d3b      	adds	r3, r7, #4
 8008e74:	601a      	str	r2, [r3, #0]
 8008e76:	4b44      	ldr	r3, [pc, #272]	; (8008f88 <SystemClock_Config+0x168>)
 8008e78:	699b      	ldr	r3, [r3, #24]
 8008e7a:	4a43      	ldr	r2, [pc, #268]	; (8008f88 <SystemClock_Config+0x168>)
 8008e7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e80:	6193      	str	r3, [r2, #24]
 8008e82:	4b41      	ldr	r3, [pc, #260]	; (8008f88 <SystemClock_Config+0x168>)
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8008e8a:	1d3b      	adds	r3, r7, #4
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	1d3b      	adds	r3, r7, #4
 8008e90:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8008e92:	bf00      	nop
 8008e94:	4b3c      	ldr	r3, [pc, #240]	; (8008f88 <SystemClock_Config+0x168>)
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ea0:	d1f8      	bne.n	8008e94 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8008ea8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8008eac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8008ec2:	2318      	movs	r3, #24
 8008ec4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8008ec8:	2302      	movs	r3, #2
 8008eca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008ece:	2304      	movs	r3, #4
 8008ed0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8008eda:	230c      	movs	r3, #12
 8008edc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008eec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7f8 fdf9 	bl	8001ae8 <HAL_RCC_OscConfig>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d001      	beq.n	8008f00 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8008efc:	f000 f9ee 	bl	80092dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008f00:	233f      	movs	r3, #63	; 0x3f
 8008f02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008f06:	2303      	movs	r3, #3
 8008f08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8008f12:	2300      	movs	r3, #0
 8008f14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8008f24:	2300      	movs	r3, #0
 8008f26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008f30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008f34:	2101      	movs	r1, #1
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7f9 f9ae 	bl	8002298 <HAL_RCC_ClockConfig>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d001      	beq.n	8008f46 <SystemClock_Config+0x126>
  {
    Error_Handler();
 8008f42:	f000 f9cb 	bl	80092dc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8008f46:	f107 0308 	add.w	r3, r7, #8
 8008f4a:	4a10      	ldr	r2, [pc, #64]	; (8008f8c <SystemClock_Config+0x16c>)
 8008f4c:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008f4e:	f107 0308 	add.w	r3, r7, #8
 8008f52:	2200      	movs	r2, #0
 8008f54:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8008f56:	f107 0308 	add.w	r3, r7, #8
 8008f5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008f62:	f107 0308 	add.w	r3, r7, #8
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7f9 fd1a 	bl	80029a0 <HAL_RCCEx_PeriphCLKConfig>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d001      	beq.n	8008f76 <SystemClock_Config+0x156>
  {
    Error_Handler();
 8008f72:	f000 f9b3 	bl	80092dc <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8008f76:	f7f8 fda7 	bl	8001ac8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8008f7a:	bf00      	nop
 8008f7c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	58000400 	.word	0x58000400
 8008f88:	58024800 	.word	0x58024800
 8008f8c:	00040002 	.word	0x00040002

08008f90 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8008f94:	4b0d      	ldr	r3, [pc, #52]	; (8008fcc <MX_CRC_Init+0x3c>)
 8008f96:	4a0e      	ldr	r2, [pc, #56]	; (8008fd0 <MX_CRC_Init+0x40>)
 8008f98:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8008f9a:	4b0c      	ldr	r3, [pc, #48]	; (8008fcc <MX_CRC_Init+0x3c>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8008fa0:	4b0a      	ldr	r3, [pc, #40]	; (8008fcc <MX_CRC_Init+0x3c>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8008fa6:	4b09      	ldr	r3, [pc, #36]	; (8008fcc <MX_CRC_Init+0x3c>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8008fac:	4b07      	ldr	r3, [pc, #28]	; (8008fcc <MX_CRC_Init+0x3c>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8008fb2:	4b06      	ldr	r3, [pc, #24]	; (8008fcc <MX_CRC_Init+0x3c>)
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008fb8:	4804      	ldr	r0, [pc, #16]	; (8008fcc <MX_CRC_Init+0x3c>)
 8008fba:	f7f7 fd39 	bl	8000a30 <HAL_CRC_Init>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8008fc4:	f000 f98a 	bl	80092dc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8008fc8:	bf00      	nop
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	24001df4 	.word	0x24001df4
 8008fd0:	58024c00 	.word	0x58024c00

08008fd4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8008fd8:	4b22      	ldr	r3, [pc, #136]	; (8009064 <MX_ETH_Init+0x90>)
 8008fda:	4a23      	ldr	r2, [pc, #140]	; (8009068 <MX_ETH_Init+0x94>)
 8008fdc:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8008fde:	4b21      	ldr	r3, [pc, #132]	; (8009064 <MX_ETH_Init+0x90>)
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8008fe6:	4b1f      	ldr	r3, [pc, #124]	; (8009064 <MX_ETH_Init+0x90>)
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	3301      	adds	r3, #1
 8008fec:	2280      	movs	r2, #128	; 0x80
 8008fee:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8008ff0:	4b1c      	ldr	r3, [pc, #112]	; (8009064 <MX_ETH_Init+0x90>)
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	3302      	adds	r3, #2
 8008ff6:	22e1      	movs	r2, #225	; 0xe1
 8008ff8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8008ffa:	4b1a      	ldr	r3, [pc, #104]	; (8009064 <MX_ETH_Init+0x90>)
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	3303      	adds	r3, #3
 8009000:	2200      	movs	r2, #0
 8009002:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8009004:	4b17      	ldr	r3, [pc, #92]	; (8009064 <MX_ETH_Init+0x90>)
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	3304      	adds	r3, #4
 800900a:	2200      	movs	r2, #0
 800900c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800900e:	4b15      	ldr	r3, [pc, #84]	; (8009064 <MX_ETH_Init+0x90>)
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	3305      	adds	r3, #5
 8009014:	2200      	movs	r2, #0
 8009016:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009018:	4b12      	ldr	r3, [pc, #72]	; (8009064 <MX_ETH_Init+0x90>)
 800901a:	2201      	movs	r2, #1
 800901c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800901e:	4b11      	ldr	r3, [pc, #68]	; (8009064 <MX_ETH_Init+0x90>)
 8009020:	4a12      	ldr	r2, [pc, #72]	; (800906c <MX_ETH_Init+0x98>)
 8009022:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009024:	4b0f      	ldr	r3, [pc, #60]	; (8009064 <MX_ETH_Init+0x90>)
 8009026:	4a12      	ldr	r2, [pc, #72]	; (8009070 <MX_ETH_Init+0x9c>)
 8009028:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800902a:	4b0e      	ldr	r3, [pc, #56]	; (8009064 <MX_ETH_Init+0x90>)
 800902c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009030:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8009032:	480c      	ldr	r0, [pc, #48]	; (8009064 <MX_ETH_Init+0x90>)
 8009034:	f7f7 fde6 	bl	8000c04 <HAL_ETH_Init>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d001      	beq.n	8009042 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 800903e:	f000 f94d 	bl	80092dc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009042:	2234      	movs	r2, #52	; 0x34
 8009044:	2100      	movs	r1, #0
 8009046:	480b      	ldr	r0, [pc, #44]	; (8009074 <MX_ETH_Init+0xa0>)
 8009048:	f004 fa2d 	bl	800d4a6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800904c:	4b09      	ldr	r3, [pc, #36]	; (8009074 <MX_ETH_Init+0xa0>)
 800904e:	2221      	movs	r2, #33	; 0x21
 8009050:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009052:	4b08      	ldr	r3, [pc, #32]	; (8009074 <MX_ETH_Init+0xa0>)
 8009054:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009058:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800905a:	4b06      	ldr	r3, [pc, #24]	; (8009074 <MX_ETH_Init+0xa0>)
 800905c:	2200      	movs	r2, #0
 800905e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8009060:	bf00      	nop
 8009062:	bd80      	pop	{r7, pc}
 8009064:	24001e18 	.word	0x24001e18
 8009068:	40028000 	.word	0x40028000
 800906c:	240008dc 	.word	0x240008dc
 8009070:	2400087c 	.word	0x2400087c
 8009074:	24001e88 	.word	0x24001e88

08009078 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800907c:	4b22      	ldr	r3, [pc, #136]	; (8009108 <MX_USART3_UART_Init+0x90>)
 800907e:	4a23      	ldr	r2, [pc, #140]	; (800910c <MX_USART3_UART_Init+0x94>)
 8009080:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8009082:	4b21      	ldr	r3, [pc, #132]	; (8009108 <MX_USART3_UART_Init+0x90>)
 8009084:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009088:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800908a:	4b1f      	ldr	r3, [pc, #124]	; (8009108 <MX_USART3_UART_Init+0x90>)
 800908c:	2200      	movs	r2, #0
 800908e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009090:	4b1d      	ldr	r3, [pc, #116]	; (8009108 <MX_USART3_UART_Init+0x90>)
 8009092:	2200      	movs	r2, #0
 8009094:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009096:	4b1c      	ldr	r3, [pc, #112]	; (8009108 <MX_USART3_UART_Init+0x90>)
 8009098:	2200      	movs	r2, #0
 800909a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800909c:	4b1a      	ldr	r3, [pc, #104]	; (8009108 <MX_USART3_UART_Init+0x90>)
 800909e:	220c      	movs	r2, #12
 80090a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80090a2:	4b19      	ldr	r3, [pc, #100]	; (8009108 <MX_USART3_UART_Init+0x90>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80090a8:	4b17      	ldr	r3, [pc, #92]	; (8009108 <MX_USART3_UART_Init+0x90>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80090ae:	4b16      	ldr	r3, [pc, #88]	; (8009108 <MX_USART3_UART_Init+0x90>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80090b4:	4b14      	ldr	r3, [pc, #80]	; (8009108 <MX_USART3_UART_Init+0x90>)
 80090b6:	2200      	movs	r2, #0
 80090b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80090ba:	4b13      	ldr	r3, [pc, #76]	; (8009108 <MX_USART3_UART_Init+0x90>)
 80090bc:	2200      	movs	r2, #0
 80090be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80090c0:	4811      	ldr	r0, [pc, #68]	; (8009108 <MX_USART3_UART_Init+0x90>)
 80090c2:	f7fa ff5d 	bl	8003f80 <HAL_UART_Init>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d001      	beq.n	80090d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80090cc:	f000 f906 	bl	80092dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80090d0:	2100      	movs	r1, #0
 80090d2:	480d      	ldr	r0, [pc, #52]	; (8009108 <MX_USART3_UART_Init+0x90>)
 80090d4:	f7fd fb5d 	bl	8006792 <HAL_UARTEx_SetTxFifoThreshold>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80090de:	f000 f8fd 	bl	80092dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80090e2:	2100      	movs	r1, #0
 80090e4:	4808      	ldr	r0, [pc, #32]	; (8009108 <MX_USART3_UART_Init+0x90>)
 80090e6:	f7fd fb92 	bl	800680e <HAL_UARTEx_SetRxFifoThreshold>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80090f0:	f000 f8f4 	bl	80092dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80090f4:	4804      	ldr	r0, [pc, #16]	; (8009108 <MX_USART3_UART_Init+0x90>)
 80090f6:	f7fd fb13 	bl	8006720 <HAL_UARTEx_DisableFifoMode>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d001      	beq.n	8009104 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8009100:	f000 f8ec 	bl	80092dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8009104:	bf00      	nop
 8009106:	bd80      	pop	{r7, pc}
 8009108:	24001960 	.word	0x24001960
 800910c:	40004800 	.word	0x40004800

08009110 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009114:	4b15      	ldr	r3, [pc, #84]	; (800916c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8009116:	4a16      	ldr	r2, [pc, #88]	; (8009170 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8009118:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800911a:	4b14      	ldr	r3, [pc, #80]	; (800916c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800911c:	2209      	movs	r2, #9
 800911e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009120:	4b12      	ldr	r3, [pc, #72]	; (800916c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8009122:	2202      	movs	r2, #2
 8009124:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009126:	4b11      	ldr	r3, [pc, #68]	; (800916c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8009128:	2200      	movs	r2, #0
 800912a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800912c:	4b0f      	ldr	r3, [pc, #60]	; (800916c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800912e:	2202      	movs	r2, #2
 8009130:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8009132:	4b0e      	ldr	r3, [pc, #56]	; (800916c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8009134:	2201      	movs	r2, #1
 8009136:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009138:	4b0c      	ldr	r3, [pc, #48]	; (800916c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800913a:	2200      	movs	r2, #0
 800913c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800913e:	4b0b      	ldr	r3, [pc, #44]	; (800916c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8009140:	2200      	movs	r2, #0
 8009142:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8009144:	4b09      	ldr	r3, [pc, #36]	; (800916c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8009146:	2201      	movs	r2, #1
 8009148:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800914a:	4b08      	ldr	r3, [pc, #32]	; (800916c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800914c:	2201      	movs	r2, #1
 800914e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009150:	4b06      	ldr	r3, [pc, #24]	; (800916c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8009152:	2200      	movs	r2, #0
 8009154:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009156:	4805      	ldr	r0, [pc, #20]	; (800916c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8009158:	f7f8 fb33 	bl	80017c2 <HAL_PCD_Init>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8009162:	f000 f8bb 	bl	80092dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8009166:	bf00      	nop
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	240019ec 	.word	0x240019ec
 8009170:	40080000 	.word	0x40080000

08009174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b08c      	sub	sp, #48	; 0x30
 8009178:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800917a:	f107 031c 	add.w	r3, r7, #28
 800917e:	2200      	movs	r2, #0
 8009180:	601a      	str	r2, [r3, #0]
 8009182:	605a      	str	r2, [r3, #4]
 8009184:	609a      	str	r2, [r3, #8]
 8009186:	60da      	str	r2, [r3, #12]
 8009188:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800918a:	4b4f      	ldr	r3, [pc, #316]	; (80092c8 <MX_GPIO_Init+0x154>)
 800918c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009190:	4a4d      	ldr	r2, [pc, #308]	; (80092c8 <MX_GPIO_Init+0x154>)
 8009192:	f043 0304 	orr.w	r3, r3, #4
 8009196:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800919a:	4b4b      	ldr	r3, [pc, #300]	; (80092c8 <MX_GPIO_Init+0x154>)
 800919c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091a0:	f003 0304 	and.w	r3, r3, #4
 80091a4:	61bb      	str	r3, [r7, #24]
 80091a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80091a8:	4b47      	ldr	r3, [pc, #284]	; (80092c8 <MX_GPIO_Init+0x154>)
 80091aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091ae:	4a46      	ldr	r2, [pc, #280]	; (80092c8 <MX_GPIO_Init+0x154>)
 80091b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80091b8:	4b43      	ldr	r3, [pc, #268]	; (80092c8 <MX_GPIO_Init+0x154>)
 80091ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091c2:	617b      	str	r3, [r7, #20]
 80091c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80091c6:	4b40      	ldr	r3, [pc, #256]	; (80092c8 <MX_GPIO_Init+0x154>)
 80091c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091cc:	4a3e      	ldr	r2, [pc, #248]	; (80092c8 <MX_GPIO_Init+0x154>)
 80091ce:	f043 0301 	orr.w	r3, r3, #1
 80091d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80091d6:	4b3c      	ldr	r3, [pc, #240]	; (80092c8 <MX_GPIO_Init+0x154>)
 80091d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091dc:	f003 0301 	and.w	r3, r3, #1
 80091e0:	613b      	str	r3, [r7, #16]
 80091e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80091e4:	4b38      	ldr	r3, [pc, #224]	; (80092c8 <MX_GPIO_Init+0x154>)
 80091e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091ea:	4a37      	ldr	r2, [pc, #220]	; (80092c8 <MX_GPIO_Init+0x154>)
 80091ec:	f043 0302 	orr.w	r3, r3, #2
 80091f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80091f4:	4b34      	ldr	r3, [pc, #208]	; (80092c8 <MX_GPIO_Init+0x154>)
 80091f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091fa:	f003 0302 	and.w	r3, r3, #2
 80091fe:	60fb      	str	r3, [r7, #12]
 8009200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009202:	4b31      	ldr	r3, [pc, #196]	; (80092c8 <MX_GPIO_Init+0x154>)
 8009204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009208:	4a2f      	ldr	r2, [pc, #188]	; (80092c8 <MX_GPIO_Init+0x154>)
 800920a:	f043 0308 	orr.w	r3, r3, #8
 800920e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009212:	4b2d      	ldr	r3, [pc, #180]	; (80092c8 <MX_GPIO_Init+0x154>)
 8009214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009218:	f003 0308 	and.w	r3, r3, #8
 800921c:	60bb      	str	r3, [r7, #8]
 800921e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009220:	4b29      	ldr	r3, [pc, #164]	; (80092c8 <MX_GPIO_Init+0x154>)
 8009222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009226:	4a28      	ldr	r2, [pc, #160]	; (80092c8 <MX_GPIO_Init+0x154>)
 8009228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800922c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009230:	4b25      	ldr	r3, [pc, #148]	; (80092c8 <MX_GPIO_Init+0x154>)
 8009232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800923a:	607b      	str	r3, [r7, #4]
 800923c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800923e:	2200      	movs	r2, #0
 8009240:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8009244:	4821      	ldr	r0, [pc, #132]	; (80092cc <MX_GPIO_Init+0x158>)
 8009246:	f7f8 faa3 	bl	8001790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800924a:	2200      	movs	r2, #0
 800924c:	2140      	movs	r1, #64	; 0x40
 800924e:	4820      	ldr	r0, [pc, #128]	; (80092d0 <MX_GPIO_Init+0x15c>)
 8009250:	f7f8 fa9e 	bl	8001790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8009254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800925a:	4b1e      	ldr	r3, [pc, #120]	; (80092d4 <MX_GPIO_Init+0x160>)
 800925c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800925e:	2300      	movs	r3, #0
 8009260:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8009262:	f107 031c 	add.w	r3, r7, #28
 8009266:	4619      	mov	r1, r3
 8009268:	481b      	ldr	r0, [pc, #108]	; (80092d8 <MX_GPIO_Init+0x164>)
 800926a:	f7f8 f8e1 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800926e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8009272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009274:	2301      	movs	r3, #1
 8009276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009278:	2300      	movs	r3, #0
 800927a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800927c:	2300      	movs	r3, #0
 800927e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009280:	f107 031c 	add.w	r3, r7, #28
 8009284:	4619      	mov	r1, r3
 8009286:	4811      	ldr	r0, [pc, #68]	; (80092cc <MX_GPIO_Init+0x158>)
 8009288:	f7f8 f8d2 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800928c:	2340      	movs	r3, #64	; 0x40
 800928e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009290:	2301      	movs	r3, #1
 8009292:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009294:	2300      	movs	r3, #0
 8009296:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009298:	2300      	movs	r3, #0
 800929a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800929c:	f107 031c 	add.w	r3, r7, #28
 80092a0:	4619      	mov	r1, r3
 80092a2:	480b      	ldr	r0, [pc, #44]	; (80092d0 <MX_GPIO_Init+0x15c>)
 80092a4:	f7f8 f8c4 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80092a8:	2380      	movs	r3, #128	; 0x80
 80092aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80092ac:	2300      	movs	r3, #0
 80092ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092b0:	2300      	movs	r3, #0
 80092b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80092b4:	f107 031c 	add.w	r3, r7, #28
 80092b8:	4619      	mov	r1, r3
 80092ba:	4805      	ldr	r0, [pc, #20]	; (80092d0 <MX_GPIO_Init+0x15c>)
 80092bc:	f7f8 f8b8 	bl	8001430 <HAL_GPIO_Init>

}
 80092c0:	bf00      	nop
 80092c2:	3730      	adds	r7, #48	; 0x30
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	58024400 	.word	0x58024400
 80092cc:	58020400 	.word	0x58020400
 80092d0:	58021800 	.word	0x58021800
 80092d4:	11110000 	.word	0x11110000
 80092d8:	58020800 	.word	0x58020800

080092dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80092dc:	b480      	push	{r7}
 80092de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80092e0:	bf00      	nop
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
	...

080092ec <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	3303      	adds	r3, #3
 80092fc:	f023 0303 	bic.w	r3, r3, #3
 8009300:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    conv2_scratch0_array.data = AI_PTR(activations + 2896);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
 8009308:	4a1d      	ldr	r2, [pc, #116]	; (8009380 <network_configure_activations+0x94>)
 800930a:	6093      	str	r3, [r2, #8]
    conv2_scratch0_array.data_start = AI_PTR(activations + 2896);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
 8009312:	4a1b      	ldr	r2, [pc, #108]	; (8009380 <network_configure_activations+0x94>)
 8009314:	60d3      	str	r3, [r2, #12]
    conv1_scratch0_array.data = AI_PTR(activations + 2896);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
 800931c:	4a19      	ldr	r2, [pc, #100]	; (8009384 <network_configure_activations+0x98>)
 800931e:	6093      	str	r3, [r2, #8]
    conv1_scratch0_array.data_start = AI_PTR(activations + 2896);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
 8009326:	4a17      	ldr	r2, [pc, #92]	; (8009384 <network_configure_activations+0x98>)
 8009328:	60d3      	str	r3, [r2, #12]
    input_0_output_array.data = AI_PTR(NULL);
 800932a:	4b17      	ldr	r3, [pc, #92]	; (8009388 <network_configure_activations+0x9c>)
 800932c:	2200      	movs	r2, #0
 800932e:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8009330:	4b15      	ldr	r3, [pc, #84]	; (8009388 <network_configure_activations+0x9c>)
 8009332:	2200      	movs	r2, #0
 8009334:	60da      	str	r2, [r3, #12]
    conv1_output_array.data = AI_PTR(activations + 192);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	33c0      	adds	r3, #192	; 0xc0
 800933a:	4a14      	ldr	r2, [pc, #80]	; (800938c <network_configure_activations+0xa0>)
 800933c:	6093      	str	r3, [r2, #8]
    conv1_output_array.data_start = AI_PTR(activations + 192);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	33c0      	adds	r3, #192	; 0xc0
 8009342:	4a12      	ldr	r2, [pc, #72]	; (800938c <network_configure_activations+0xa0>)
 8009344:	60d3      	str	r3, [r2, #12]
    conv2_output_array.data = AI_PTR(activations + 0);
 8009346:	4a12      	ldr	r2, [pc, #72]	; (8009390 <network_configure_activations+0xa4>)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6093      	str	r3, [r2, #8]
    conv2_output_array.data_start = AI_PTR(activations + 0);
 800934c:	4a10      	ldr	r2, [pc, #64]	; (8009390 <network_configure_activations+0xa4>)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(activations + 800);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8009358:	4a0e      	ldr	r2, [pc, #56]	; (8009394 <network_configure_activations+0xa8>)
 800935a:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(activations + 800);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8009362:	4a0c      	ldr	r2, [pc, #48]	; (8009394 <network_configure_activations+0xa8>)
 8009364:	60d3      	str	r3, [r2, #12]
    dense_nl_output_array.data = AI_PTR(NULL);
 8009366:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <network_configure_activations+0xac>)
 8009368:	2200      	movs	r2, #0
 800936a:	609a      	str	r2, [r3, #8]
    dense_nl_output_array.data_start = AI_PTR(NULL);
 800936c:	4b0a      	ldr	r3, [pc, #40]	; (8009398 <network_configure_activations+0xac>)
 800936e:	2200      	movs	r2, #0
 8009370:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8009372:	2301      	movs	r3, #1
}
 8009374:	4618      	mov	r0, r3
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	24000068 	.word	0x24000068
 8009384:	24000078 	.word	0x24000078
 8009388:	240000e8 	.word	0x240000e8
 800938c:	240000f8 	.word	0x240000f8
 8009390:	24000108 	.word	0x24000108
 8009394:	24000118 	.word	0x24000118
 8009398:	24000128 	.word	0x24000128

0800939c <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80093ac:	4b2f      	ldr	r3, [pc, #188]	; (800946c <network_configure_weights+0xd0>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093b4:	4a2d      	ldr	r2, [pc, #180]	; (800946c <network_configure_weights+0xd0>)
 80093b6:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights + 9344);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f503 5312 	add.w	r3, r3, #9344	; 0x2480
 80093be:	4a2b      	ldr	r2, [pc, #172]	; (800946c <network_configure_weights+0xd0>)
 80093c0:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights + 9344);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f503 5312 	add.w	r3, r3, #9344	; 0x2480
 80093c8:	4a28      	ldr	r2, [pc, #160]	; (800946c <network_configure_weights+0xd0>)
 80093ca:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80093cc:	4b28      	ldr	r3, [pc, #160]	; (8009470 <network_configure_weights+0xd4>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093d4:	4a26      	ldr	r2, [pc, #152]	; (8009470 <network_configure_weights+0xd4>)
 80093d6:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights + 1344);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 80093de:	4a24      	ldr	r2, [pc, #144]	; (8009470 <network_configure_weights+0xd4>)
 80093e0:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights + 1344);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 80093e8:	4a21      	ldr	r2, [pc, #132]	; (8009470 <network_configure_weights+0xd4>)
 80093ea:	60d3      	str	r3, [r2, #12]
    conv2_bias_array.format |= AI_FMT_FLAG_CONST;
 80093ec:	4b21      	ldr	r3, [pc, #132]	; (8009474 <network_configure_weights+0xd8>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093f4:	4a1f      	ldr	r2, [pc, #124]	; (8009474 <network_configure_weights+0xd8>)
 80093f6:	6013      	str	r3, [r2, #0]
    conv2_bias_array.data = AI_PTR(weights + 1312);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80093fe:	4a1d      	ldr	r2, [pc, #116]	; (8009474 <network_configure_weights+0xd8>)
 8009400:	6093      	str	r3, [r2, #8]
    conv2_bias_array.data_start = AI_PTR(weights + 1312);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8009408:	4a1a      	ldr	r2, [pc, #104]	; (8009474 <network_configure_weights+0xd8>)
 800940a:	60d3      	str	r3, [r2, #12]
    conv2_weights_array.format |= AI_FMT_FLAG_CONST;
 800940c:	4b1a      	ldr	r3, [pc, #104]	; (8009478 <network_configure_weights+0xdc>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009414:	4a18      	ldr	r2, [pc, #96]	; (8009478 <network_configure_weights+0xdc>)
 8009416:	6013      	str	r3, [r2, #0]
    conv2_weights_array.data = AI_PTR(weights + 160);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	33a0      	adds	r3, #160	; 0xa0
 800941c:	4a16      	ldr	r2, [pc, #88]	; (8009478 <network_configure_weights+0xdc>)
 800941e:	6093      	str	r3, [r2, #8]
    conv2_weights_array.data_start = AI_PTR(weights + 160);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	33a0      	adds	r3, #160	; 0xa0
 8009424:	4a14      	ldr	r2, [pc, #80]	; (8009478 <network_configure_weights+0xdc>)
 8009426:	60d3      	str	r3, [r2, #12]
    conv1_bias_array.format |= AI_FMT_FLAG_CONST;
 8009428:	4b14      	ldr	r3, [pc, #80]	; (800947c <network_configure_weights+0xe0>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009430:	4a12      	ldr	r2, [pc, #72]	; (800947c <network_configure_weights+0xe0>)
 8009432:	6013      	str	r3, [r2, #0]
    conv1_bias_array.data = AI_PTR(weights + 144);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	3390      	adds	r3, #144	; 0x90
 8009438:	4a10      	ldr	r2, [pc, #64]	; (800947c <network_configure_weights+0xe0>)
 800943a:	6093      	str	r3, [r2, #8]
    conv1_bias_array.data_start = AI_PTR(weights + 144);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	3390      	adds	r3, #144	; 0x90
 8009440:	4a0e      	ldr	r2, [pc, #56]	; (800947c <network_configure_weights+0xe0>)
 8009442:	60d3      	str	r3, [r2, #12]
    conv1_weights_array.format |= AI_FMT_FLAG_CONST;
 8009444:	4b0e      	ldr	r3, [pc, #56]	; (8009480 <network_configure_weights+0xe4>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800944c:	4a0c      	ldr	r2, [pc, #48]	; (8009480 <network_configure_weights+0xe4>)
 800944e:	6013      	str	r3, [r2, #0]
    conv1_weights_array.data = AI_PTR(weights + 0);
 8009450:	4a0b      	ldr	r2, [pc, #44]	; (8009480 <network_configure_weights+0xe4>)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6093      	str	r3, [r2, #8]
    conv1_weights_array.data_start = AI_PTR(weights + 0);
 8009456:	4a0a      	ldr	r2, [pc, #40]	; (8009480 <network_configure_weights+0xe4>)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800945c:	2301      	movs	r3, #1
}
 800945e:	4618      	mov	r0, r3
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	24000088 	.word	0x24000088
 8009470:	24000098 	.word	0x24000098
 8009474:	240000a8 	.word	0x240000a8
 8009478:	240000b8 	.word	0x240000b8
 800947c:	240000c8 	.word	0x240000c8
 8009480:	240000d8 	.word	0x240000d8

08009484 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b0a0      	sub	sp, #128	; 0x80
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 fd50 	bl	8009f34 <ai_platform_context_acquire>
 8009494:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d04c      	beq.n	8009536 <ai_network_get_info+0xb2>
 800949c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d049      	beq.n	8009536 <ai_network_get_info+0xb2>
  {
    ai_network_report r = {
 80094a2:	f107 0308 	add.w	r3, r7, #8
 80094a6:	2274      	movs	r2, #116	; 0x74
 80094a8:	2100      	movs	r1, #0
 80094aa:	4618      	mov	r0, r3
 80094ac:	f003 fffb 	bl	800d4a6 <memset>
 80094b0:	4b23      	ldr	r3, [pc, #140]	; (8009540 <ai_network_get_info+0xbc>)
 80094b2:	60bb      	str	r3, [r7, #8]
 80094b4:	4b23      	ldr	r3, [pc, #140]	; (8009544 <ai_network_get_info+0xc0>)
 80094b6:	60fb      	str	r3, [r7, #12]
 80094b8:	4b23      	ldr	r3, [pc, #140]	; (8009548 <ai_network_get_info+0xc4>)
 80094ba:	613b      	str	r3, [r7, #16]
 80094bc:	4b23      	ldr	r3, [pc, #140]	; (800954c <ai_network_get_info+0xc8>)
 80094be:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 80094c0:	f000 fbc4 	bl	8009c4c <ai_platform_runtime_get_revision>
 80094c4:	4603      	mov	r3, r0
    ai_network_report r = {
 80094c6:	61bb      	str	r3, [r7, #24]
 80094c8:	f000 fc0e 	bl	8009ce8 <ai_platform_runtime_get_version>
 80094cc:	4603      	mov	r3, r0
 80094ce:	61fb      	str	r3, [r7, #28]
 80094d0:	4b1f      	ldr	r3, [pc, #124]	; (8009550 <ai_network_get_info+0xcc>)
 80094d2:	623b      	str	r3, [r7, #32]
 80094d4:	2305      	movs	r3, #5
 80094d6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80094da:	2301      	movs	r3, #1
 80094dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80094e0:	2301      	movs	r3, #1
 80094e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80094e6:	2301      	movs	r3, #1
 80094e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80094ec:	2303      	movs	r3, #3
 80094ee:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80094f2:	f000 fc5b 	bl	8009dac <ai_platform_api_get_version>
 80094f6:	4603      	mov	r3, r0
 80094f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094fa:	f000 fcb9 	bl	8009e70 <ai_platform_interface_api_get_version>
 80094fe:	4603      	mov	r3, r0
 8009500:	633b      	str	r3, [r7, #48]	; 0x30
 8009502:	4b14      	ldr	r3, [pc, #80]	; (8009554 <ai_network_get_info+0xd0>)
 8009504:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if ( !ai_platform_api_get_network_report(network, &r) ) return false;
 8009506:	f107 0308 	add.w	r3, r7, #8
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fdf1 	bl	800a0f4 <ai_platform_api_get_network_report>
 8009512:	4603      	mov	r3, r0
 8009514:	f083 0301 	eor.w	r3, r3, #1
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <ai_network_get_info+0x9e>
 800951e:	2300      	movs	r3, #0
 8009520:	e00a      	b.n	8009538 <ai_network_get_info+0xb4>

    *report = r;
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	4618      	mov	r0, r3
 8009526:	f107 0308 	add.w	r3, r7, #8
 800952a:	2274      	movs	r2, #116	; 0x74
 800952c:	4619      	mov	r1, r3
 800952e:	f003 ffaf 	bl	800d490 <memcpy>
    return true;
 8009532:	2301      	movs	r3, #1
 8009534:	e000      	b.n	8009538 <ai_network_get_info+0xb4>
  }

  return false;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3780      	adds	r7, #128	; 0x80
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	080105b0 	.word	0x080105b0
 8009544:	080105b8 	.word	0x080105b8
 8009548:	080105dc 	.word	0x080105dc
 800954c:	080105f8 	.word	0x080105f8
 8009550:	08010610 	.word	0x08010610
 8009554:	00010baa 	.word	0x00010baa

08009558 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fd39 	bl	8009fd8 <ai_platform_network_get_error>
 8009566:	4603      	mov	r3, r0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af02      	add	r7, sp, #8
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800957a:	2300      	movs	r3, #0
 800957c:	9301      	str	r3, [sp, #4]
 800957e:	2303      	movs	r3, #3
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	2301      	movs	r3, #1
 8009584:	4a04      	ldr	r2, [pc, #16]	; (8009598 <ai_network_create+0x28>)
 8009586:	6839      	ldr	r1, [r7, #0]
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f001 f841 	bl	800a610 <ai_platform_network_create>
 800958e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8009590:	4618      	mov	r0, r3
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	24000008 	.word	0x24000008

0800959c <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f001 f8b7 	bl	800a718 <ai_platform_network_destroy>
 80095aa:	4603      	mov	r3, r0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80095be:	6839      	ldr	r1, [r7, #0]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f001 f933 	bl	800a82c <ai_platform_network_init>
 80095c6:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d101      	bne.n	80095d2 <ai_network_init+0x1e>
 80095ce:	2300      	movs	r3, #0
 80095d0:	e02b      	b.n	800962a <ai_network_init+0x76>

  ai_bool ok = true;
 80095d2:	2301      	movs	r3, #1
 80095d4:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	4619      	mov	r1, r3
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f7ff fede 	bl	800939c <network_configure_weights>
 80095e0:	4603      	mov	r3, r0
 80095e2:	461a      	mov	r2, r3
 80095e4:	7afb      	ldrb	r3, [r7, #11]
 80095e6:	4013      	ands	r3, r2
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	bf14      	ite	ne
 80095ec:	2301      	movne	r3, #1
 80095ee:	2300      	moveq	r3, #0
 80095f0:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	3318      	adds	r3, #24
 80095f6:	4619      	mov	r1, r3
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f7ff fe77 	bl	80092ec <network_configure_activations>
 80095fe:	4603      	mov	r3, r0
 8009600:	461a      	mov	r2, r3
 8009602:	7afb      	ldrb	r3, [r7, #11]
 8009604:	4013      	ands	r3, r2
 8009606:	2b00      	cmp	r3, #0
 8009608:	bf14      	ite	ne
 800960a:	2301      	movne	r3, #1
 800960c:	2300      	moveq	r3, #0
 800960e:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f001 f9f3 	bl	800a9fc <ai_platform_network_post_init>
 8009616:	4603      	mov	r3, r0
 8009618:	461a      	mov	r2, r3
 800961a:	7afb      	ldrb	r3, [r7, #11]
 800961c:	4013      	ands	r3, r2
 800961e:	2b00      	cmp	r3, #0
 8009620:	bf14      	ite	ne
 8009622:	2301      	movne	r3, #1
 8009624:	2300      	moveq	r3, #0
 8009626:	72fb      	strb	r3, [r7, #11]

  return ok;
 8009628:	7afb      	ldrb	r3, [r7, #11]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b084      	sub	sp, #16
 8009636:	af00      	add	r7, sp, #0
 8009638:	60f8      	str	r0, [r7, #12]
 800963a:	60b9      	str	r1, [r7, #8]
 800963c:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	68b9      	ldr	r1, [r7, #8]
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f001 fa86 	bl	800ab54 <ai_platform_network_process>
 8009648:	4603      	mov	r3, r0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <ai_network_forward>:

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b082      	sub	sp, #8
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	6039      	str	r1, [r7, #0]
  return ai_platform_network_process(network, input, NULL);
 800965c:	2200      	movs	r2, #0
 800965e:	6839      	ldr	r1, [r7, #0]
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f001 fa77 	bl	800ab54 <ai_platform_network_process>
 8009666:	4603      	mov	r3, r0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 8009670:	b480      	push	{r7}
 8009672:	af00      	add	r7, sp, #0
    0xf7, 0x24, 0xbe, 0x0d, 0xf3, 0xc9, 0xbd, 0xcc, 0xfe,
    0x82, 0x3c, 0xf5, 0xf5, 0x6a, 0xbd, 0xfd, 0x41, 0x6f,
    0xbd, 0xbc, 0xc7, 0x20, 0x3c, 0x9b, 0xb9, 0xd0, 0x3d
  };

  return AI_HANDLE_PTR(s_network_weights);
 8009674:	4b02      	ldr	r3, [pc, #8]	; (8009680 <ai_network_data_weights_get+0x10>)

}
 8009676:	4618      	mov	r0, r3
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	080106a0 	.word	0x080106a0

08009684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800968a:	4b0a      	ldr	r3, [pc, #40]	; (80096b4 <HAL_MspInit+0x30>)
 800968c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009690:	4a08      	ldr	r2, [pc, #32]	; (80096b4 <HAL_MspInit+0x30>)
 8009692:	f043 0302 	orr.w	r3, r3, #2
 8009696:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800969a:	4b06      	ldr	r3, [pc, #24]	; (80096b4 <HAL_MspInit+0x30>)
 800969c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80096a0:	f003 0302 	and.w	r3, r3, #2
 80096a4:	607b      	str	r3, [r7, #4]
 80096a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	58024400 	.word	0x58024400

080096b8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a0b      	ldr	r2, [pc, #44]	; (80096f4 <HAL_CRC_MspInit+0x3c>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d10e      	bne.n	80096e8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80096ca:	4b0b      	ldr	r3, [pc, #44]	; (80096f8 <HAL_CRC_MspInit+0x40>)
 80096cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096d0:	4a09      	ldr	r2, [pc, #36]	; (80096f8 <HAL_CRC_MspInit+0x40>)
 80096d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80096da:	4b07      	ldr	r3, [pc, #28]	; (80096f8 <HAL_CRC_MspInit+0x40>)
 80096dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096e4:	60fb      	str	r3, [r7, #12]
 80096e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80096e8:	bf00      	nop
 80096ea:	3714      	adds	r7, #20
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr
 80096f4:	58024c00 	.word	0x58024c00
 80096f8:	58024400 	.word	0x58024400

080096fc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b08e      	sub	sp, #56	; 0x38
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009708:	2200      	movs	r2, #0
 800970a:	601a      	str	r2, [r3, #0]
 800970c:	605a      	str	r2, [r3, #4]
 800970e:	609a      	str	r2, [r3, #8]
 8009710:	60da      	str	r2, [r3, #12]
 8009712:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a59      	ldr	r2, [pc, #356]	; (8009880 <HAL_ETH_MspInit+0x184>)
 800971a:	4293      	cmp	r3, r2
 800971c:	f040 80ab 	bne.w	8009876 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8009720:	4b58      	ldr	r3, [pc, #352]	; (8009884 <HAL_ETH_MspInit+0x188>)
 8009722:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009726:	4a57      	ldr	r2, [pc, #348]	; (8009884 <HAL_ETH_MspInit+0x188>)
 8009728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800972c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009730:	4b54      	ldr	r3, [pc, #336]	; (8009884 <HAL_ETH_MspInit+0x188>)
 8009732:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800973a:	623b      	str	r3, [r7, #32]
 800973c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800973e:	4b51      	ldr	r3, [pc, #324]	; (8009884 <HAL_ETH_MspInit+0x188>)
 8009740:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009744:	4a4f      	ldr	r2, [pc, #316]	; (8009884 <HAL_ETH_MspInit+0x188>)
 8009746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800974a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800974e:	4b4d      	ldr	r3, [pc, #308]	; (8009884 <HAL_ETH_MspInit+0x188>)
 8009750:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009758:	61fb      	str	r3, [r7, #28]
 800975a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800975c:	4b49      	ldr	r3, [pc, #292]	; (8009884 <HAL_ETH_MspInit+0x188>)
 800975e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009762:	4a48      	ldr	r2, [pc, #288]	; (8009884 <HAL_ETH_MspInit+0x188>)
 8009764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009768:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800976c:	4b45      	ldr	r3, [pc, #276]	; (8009884 <HAL_ETH_MspInit+0x188>)
 800976e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009776:	61bb      	str	r3, [r7, #24]
 8009778:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800977a:	4b42      	ldr	r3, [pc, #264]	; (8009884 <HAL_ETH_MspInit+0x188>)
 800977c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009780:	4a40      	ldr	r2, [pc, #256]	; (8009884 <HAL_ETH_MspInit+0x188>)
 8009782:	f043 0304 	orr.w	r3, r3, #4
 8009786:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800978a:	4b3e      	ldr	r3, [pc, #248]	; (8009884 <HAL_ETH_MspInit+0x188>)
 800978c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009790:	f003 0304 	and.w	r3, r3, #4
 8009794:	617b      	str	r3, [r7, #20]
 8009796:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009798:	4b3a      	ldr	r3, [pc, #232]	; (8009884 <HAL_ETH_MspInit+0x188>)
 800979a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800979e:	4a39      	ldr	r2, [pc, #228]	; (8009884 <HAL_ETH_MspInit+0x188>)
 80097a0:	f043 0301 	orr.w	r3, r3, #1
 80097a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80097a8:	4b36      	ldr	r3, [pc, #216]	; (8009884 <HAL_ETH_MspInit+0x188>)
 80097aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	613b      	str	r3, [r7, #16]
 80097b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80097b6:	4b33      	ldr	r3, [pc, #204]	; (8009884 <HAL_ETH_MspInit+0x188>)
 80097b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097bc:	4a31      	ldr	r2, [pc, #196]	; (8009884 <HAL_ETH_MspInit+0x188>)
 80097be:	f043 0302 	orr.w	r3, r3, #2
 80097c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80097c6:	4b2f      	ldr	r3, [pc, #188]	; (8009884 <HAL_ETH_MspInit+0x188>)
 80097c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097cc:	f003 0302 	and.w	r3, r3, #2
 80097d0:	60fb      	str	r3, [r7, #12]
 80097d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80097d4:	4b2b      	ldr	r3, [pc, #172]	; (8009884 <HAL_ETH_MspInit+0x188>)
 80097d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097da:	4a2a      	ldr	r2, [pc, #168]	; (8009884 <HAL_ETH_MspInit+0x188>)
 80097dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80097e4:	4b27      	ldr	r3, [pc, #156]	; (8009884 <HAL_ETH_MspInit+0x188>)
 80097e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ee:	60bb      	str	r3, [r7, #8]
 80097f0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80097f2:	2332      	movs	r3, #50	; 0x32
 80097f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097f6:	2302      	movs	r3, #2
 80097f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097fa:	2300      	movs	r3, #0
 80097fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097fe:	2300      	movs	r3, #0
 8009800:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009802:	230b      	movs	r3, #11
 8009804:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800980a:	4619      	mov	r1, r3
 800980c:	481e      	ldr	r0, [pc, #120]	; (8009888 <HAL_ETH_MspInit+0x18c>)
 800980e:	f7f7 fe0f 	bl	8001430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8009812:	2386      	movs	r3, #134	; 0x86
 8009814:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009816:	2302      	movs	r3, #2
 8009818:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800981a:	2300      	movs	r3, #0
 800981c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800981e:	2300      	movs	r3, #0
 8009820:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009822:	230b      	movs	r3, #11
 8009824:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800982a:	4619      	mov	r1, r3
 800982c:	4817      	ldr	r0, [pc, #92]	; (800988c <HAL_ETH_MspInit+0x190>)
 800982e:	f7f7 fdff 	bl	8001430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8009832:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009838:	2302      	movs	r3, #2
 800983a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800983c:	2300      	movs	r3, #0
 800983e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009840:	2300      	movs	r3, #0
 8009842:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009844:	230b      	movs	r3, #11
 8009846:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8009848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800984c:	4619      	mov	r1, r3
 800984e:	4810      	ldr	r0, [pc, #64]	; (8009890 <HAL_ETH_MspInit+0x194>)
 8009850:	f7f7 fdee 	bl	8001430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8009854:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800985a:	2302      	movs	r3, #2
 800985c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800985e:	2300      	movs	r3, #0
 8009860:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009862:	2300      	movs	r3, #0
 8009864:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009866:	230b      	movs	r3, #11
 8009868:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800986a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800986e:	4619      	mov	r1, r3
 8009870:	4808      	ldr	r0, [pc, #32]	; (8009894 <HAL_ETH_MspInit+0x198>)
 8009872:	f7f7 fddd 	bl	8001430 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8009876:	bf00      	nop
 8009878:	3738      	adds	r7, #56	; 0x38
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	40028000 	.word	0x40028000
 8009884:	58024400 	.word	0x58024400
 8009888:	58020800 	.word	0x58020800
 800988c:	58020000 	.word	0x58020000
 8009890:	58020400 	.word	0x58020400
 8009894:	58021800 	.word	0x58021800

08009898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b08a      	sub	sp, #40	; 0x28
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098a0:	f107 0314 	add.w	r3, r7, #20
 80098a4:	2200      	movs	r2, #0
 80098a6:	601a      	str	r2, [r3, #0]
 80098a8:	605a      	str	r2, [r3, #4]
 80098aa:	609a      	str	r2, [r3, #8]
 80098ac:	60da      	str	r2, [r3, #12]
 80098ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a1a      	ldr	r2, [pc, #104]	; (8009920 <HAL_UART_MspInit+0x88>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d12e      	bne.n	8009918 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80098ba:	4b1a      	ldr	r3, [pc, #104]	; (8009924 <HAL_UART_MspInit+0x8c>)
 80098bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80098c0:	4a18      	ldr	r2, [pc, #96]	; (8009924 <HAL_UART_MspInit+0x8c>)
 80098c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80098ca:	4b16      	ldr	r3, [pc, #88]	; (8009924 <HAL_UART_MspInit+0x8c>)
 80098cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80098d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098d4:	613b      	str	r3, [r7, #16]
 80098d6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80098d8:	4b12      	ldr	r3, [pc, #72]	; (8009924 <HAL_UART_MspInit+0x8c>)
 80098da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098de:	4a11      	ldr	r2, [pc, #68]	; (8009924 <HAL_UART_MspInit+0x8c>)
 80098e0:	f043 0308 	orr.w	r3, r3, #8
 80098e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80098e8:	4b0e      	ldr	r3, [pc, #56]	; (8009924 <HAL_UART_MspInit+0x8c>)
 80098ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098ee:	f003 0308 	and.w	r3, r3, #8
 80098f2:	60fb      	str	r3, [r7, #12]
 80098f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80098f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80098fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098fc:	2302      	movs	r3, #2
 80098fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009900:	2300      	movs	r3, #0
 8009902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009904:	2300      	movs	r3, #0
 8009906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009908:	2307      	movs	r3, #7
 800990a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800990c:	f107 0314 	add.w	r3, r7, #20
 8009910:	4619      	mov	r1, r3
 8009912:	4805      	ldr	r0, [pc, #20]	; (8009928 <HAL_UART_MspInit+0x90>)
 8009914:	f7f7 fd8c 	bl	8001430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8009918:	bf00      	nop
 800991a:	3728      	adds	r7, #40	; 0x28
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	40004800 	.word	0x40004800
 8009924:	58024400 	.word	0x58024400
 8009928:	58020c00 	.word	0x58020c00

0800992c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b08a      	sub	sp, #40	; 0x28
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009934:	f107 0314 	add.w	r3, r7, #20
 8009938:	2200      	movs	r2, #0
 800993a:	601a      	str	r2, [r3, #0]
 800993c:	605a      	str	r2, [r3, #4]
 800993e:	609a      	str	r2, [r3, #8]
 8009940:	60da      	str	r2, [r3, #12]
 8009942:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a21      	ldr	r2, [pc, #132]	; (80099d0 <HAL_PCD_MspInit+0xa4>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d13b      	bne.n	80099c6 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800994e:	4b21      	ldr	r3, [pc, #132]	; (80099d4 <HAL_PCD_MspInit+0xa8>)
 8009950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009954:	4a1f      	ldr	r2, [pc, #124]	; (80099d4 <HAL_PCD_MspInit+0xa8>)
 8009956:	f043 0301 	orr.w	r3, r3, #1
 800995a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800995e:	4b1d      	ldr	r3, [pc, #116]	; (80099d4 <HAL_PCD_MspInit+0xa8>)
 8009960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009964:	f003 0301 	and.w	r3, r3, #1
 8009968:	613b      	str	r3, [r7, #16]
 800996a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800996c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8009970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009972:	2302      	movs	r3, #2
 8009974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009976:	2300      	movs	r3, #0
 8009978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800997a:	2300      	movs	r3, #0
 800997c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800997e:	230a      	movs	r3, #10
 8009980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009982:	f107 0314 	add.w	r3, r7, #20
 8009986:	4619      	mov	r1, r3
 8009988:	4813      	ldr	r0, [pc, #76]	; (80099d8 <HAL_PCD_MspInit+0xac>)
 800998a:	f7f7 fd51 	bl	8001430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800998e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009994:	2300      	movs	r3, #0
 8009996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009998:	2300      	movs	r3, #0
 800999a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800999c:	f107 0314 	add.w	r3, r7, #20
 80099a0:	4619      	mov	r1, r3
 80099a2:	480d      	ldr	r0, [pc, #52]	; (80099d8 <HAL_PCD_MspInit+0xac>)
 80099a4:	f7f7 fd44 	bl	8001430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80099a8:	4b0a      	ldr	r3, [pc, #40]	; (80099d4 <HAL_PCD_MspInit+0xa8>)
 80099aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80099ae:	4a09      	ldr	r2, [pc, #36]	; (80099d4 <HAL_PCD_MspInit+0xa8>)
 80099b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80099b4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80099b8:	4b06      	ldr	r3, [pc, #24]	; (80099d4 <HAL_PCD_MspInit+0xa8>)
 80099ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80099be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099c2:	60fb      	str	r3, [r7, #12]
 80099c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80099c6:	bf00      	nop
 80099c8:	3728      	adds	r7, #40	; 0x28
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	40080000 	.word	0x40080000
 80099d4:	58024400 	.word	0x58024400
 80099d8:	58020000 	.word	0x58020000

080099dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80099dc:	b480      	push	{r7}
 80099de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80099e0:	bf00      	nop
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80099ea:	b480      	push	{r7}
 80099ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80099ee:	e7fe      	b.n	80099ee <HardFault_Handler+0x4>

080099f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80099f0:	b480      	push	{r7}
 80099f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80099f4:	e7fe      	b.n	80099f4 <MemManage_Handler+0x4>

080099f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80099f6:	b480      	push	{r7}
 80099f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80099fa:	e7fe      	b.n	80099fa <BusFault_Handler+0x4>

080099fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80099fc:	b480      	push	{r7}
 80099fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009a00:	e7fe      	b.n	8009a00 <UsageFault_Handler+0x4>

08009a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009a02:	b480      	push	{r7}
 8009a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009a06:	bf00      	nop
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009a10:	b480      	push	{r7}
 8009a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009a14:	bf00      	nop
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr

08009a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009a22:	bf00      	nop
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009a30:	f7f6 fea0 	bl	8000774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009a34:	bf00      	nop
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b086      	sub	sp, #24
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a44:	2300      	movs	r3, #0
 8009a46:	617b      	str	r3, [r7, #20]
 8009a48:	e00a      	b.n	8009a60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009a4a:	f3af 8000 	nop.w
 8009a4e:	4601      	mov	r1, r0
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	1c5a      	adds	r2, r3, #1
 8009a54:	60ba      	str	r2, [r7, #8]
 8009a56:	b2ca      	uxtb	r2, r1
 8009a58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	617b      	str	r3, [r7, #20]
 8009a60:	697a      	ldr	r2, [r7, #20]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	dbf0      	blt.n	8009a4a <_read+0x12>
	}

return len;
 8009a68:	687b      	ldr	r3, [r7, #4]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3718      	adds	r7, #24
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <_close>:
	}
	return len;
}

int _close(int file)
{
 8009a72:	b480      	push	{r7}
 8009a74:	b083      	sub	sp, #12
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
	return -1;
 8009a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	370c      	adds	r7, #12
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr

08009a8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009a8a:	b480      	push	{r7}
 8009a8c:	b083      	sub	sp, #12
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009a9a:	605a      	str	r2, [r3, #4]
	return 0;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <_isatty>:

int _isatty(int file)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b083      	sub	sp, #12
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
	return 1;
 8009ab2:	2301      	movs	r3, #1
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
	return 0;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3714      	adds	r7, #20
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
	...

08009adc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009ae4:	4b11      	ldr	r3, [pc, #68]	; (8009b2c <_sbrk+0x50>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d102      	bne.n	8009af2 <_sbrk+0x16>
		heap_end = &end;
 8009aec:	4b0f      	ldr	r3, [pc, #60]	; (8009b2c <_sbrk+0x50>)
 8009aee:	4a10      	ldr	r2, [pc, #64]	; (8009b30 <_sbrk+0x54>)
 8009af0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009af2:	4b0e      	ldr	r3, [pc, #56]	; (8009b2c <_sbrk+0x50>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009af8:	4b0c      	ldr	r3, [pc, #48]	; (8009b2c <_sbrk+0x50>)
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4413      	add	r3, r2
 8009b00:	466a      	mov	r2, sp
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d907      	bls.n	8009b16 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8009b06:	f003 fb17 	bl	800d138 <__errno>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	230c      	movs	r3, #12
 8009b0e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b14:	e006      	b.n	8009b24 <_sbrk+0x48>
	}

	heap_end += incr;
 8009b16:	4b05      	ldr	r3, [pc, #20]	; (8009b2c <_sbrk+0x50>)
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	4a03      	ldr	r2, [pc, #12]	; (8009b2c <_sbrk+0x50>)
 8009b20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009b22:	68fb      	ldr	r3, [r7, #12]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	24001950 	.word	0x24001950
 8009b30:	24001ec0 	.word	0x24001ec0

08009b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009b34:	b480      	push	{r7}
 8009b36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009b38:	4b29      	ldr	r3, [pc, #164]	; (8009be0 <SystemInit+0xac>)
 8009b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b3e:	4a28      	ldr	r2, [pc, #160]	; (8009be0 <SystemInit+0xac>)
 8009b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8009b48:	4b26      	ldr	r3, [pc, #152]	; (8009be4 <SystemInit+0xb0>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a25      	ldr	r2, [pc, #148]	; (8009be4 <SystemInit+0xb0>)
 8009b4e:	f043 0301 	orr.w	r3, r3, #1
 8009b52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009b54:	4b23      	ldr	r3, [pc, #140]	; (8009be4 <SystemInit+0xb0>)
 8009b56:	2200      	movs	r2, #0
 8009b58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8009b5a:	4b22      	ldr	r3, [pc, #136]	; (8009be4 <SystemInit+0xb0>)
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	4921      	ldr	r1, [pc, #132]	; (8009be4 <SystemInit+0xb0>)
 8009b60:	4b21      	ldr	r3, [pc, #132]	; (8009be8 <SystemInit+0xb4>)
 8009b62:	4013      	ands	r3, r2
 8009b64:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8009b66:	4b1f      	ldr	r3, [pc, #124]	; (8009be4 <SystemInit+0xb0>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8009b6c:	4b1d      	ldr	r3, [pc, #116]	; (8009be4 <SystemInit+0xb0>)
 8009b6e:	2200      	movs	r2, #0
 8009b70:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8009b72:	4b1c      	ldr	r3, [pc, #112]	; (8009be4 <SystemInit+0xb0>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8009b78:	4b1a      	ldr	r3, [pc, #104]	; (8009be4 <SystemInit+0xb0>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8009b7e:	4b19      	ldr	r3, [pc, #100]	; (8009be4 <SystemInit+0xb0>)
 8009b80:	2200      	movs	r2, #0
 8009b82:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8009b84:	4b17      	ldr	r3, [pc, #92]	; (8009be4 <SystemInit+0xb0>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8009b8a:	4b16      	ldr	r3, [pc, #88]	; (8009be4 <SystemInit+0xb0>)
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8009b90:	4b14      	ldr	r3, [pc, #80]	; (8009be4 <SystemInit+0xb0>)
 8009b92:	2200      	movs	r2, #0
 8009b94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8009b96:	4b13      	ldr	r3, [pc, #76]	; (8009be4 <SystemInit+0xb0>)
 8009b98:	2200      	movs	r2, #0
 8009b9a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8009b9c:	4b11      	ldr	r3, [pc, #68]	; (8009be4 <SystemInit+0xb0>)
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8009ba2:	4b10      	ldr	r3, [pc, #64]	; (8009be4 <SystemInit+0xb0>)
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009ba8:	4b0e      	ldr	r3, [pc, #56]	; (8009be4 <SystemInit+0xb0>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a0d      	ldr	r2, [pc, #52]	; (8009be4 <SystemInit+0xb0>)
 8009bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bb2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009bb4:	4b0b      	ldr	r3, [pc, #44]	; (8009be4 <SystemInit+0xb0>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8009bba:	4b0c      	ldr	r3, [pc, #48]	; (8009bec <SystemInit+0xb8>)
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	4b0c      	ldr	r3, [pc, #48]	; (8009bf0 <SystemInit+0xbc>)
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bc6:	d202      	bcs.n	8009bce <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8009bc8:	4b0a      	ldr	r3, [pc, #40]	; (8009bf4 <SystemInit+0xc0>)
 8009bca:	2201      	movs	r2, #1
 8009bcc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009bce:	4b04      	ldr	r3, [pc, #16]	; (8009be0 <SystemInit+0xac>)
 8009bd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009bd4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8009bd6:	bf00      	nop
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr
 8009be0:	e000ed00 	.word	0xe000ed00
 8009be4:	58024400 	.word	0x58024400
 8009be8:	eaf6ed7f 	.word	0xeaf6ed7f
 8009bec:	5c001000 	.word	0x5c001000
 8009bf0:	ffff0000 	.word	0xffff0000
 8009bf4:	51008108 	.word	0x51008108

08009bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009c30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009bfc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009bfe:	e003      	b.n	8009c08 <LoopCopyDataInit>

08009c00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009c00:	4b0c      	ldr	r3, [pc, #48]	; (8009c34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009c02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009c04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009c06:	3104      	adds	r1, #4

08009c08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009c08:	480b      	ldr	r0, [pc, #44]	; (8009c38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009c0a:	4b0c      	ldr	r3, [pc, #48]	; (8009c3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009c0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009c0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009c10:	d3f6      	bcc.n	8009c00 <CopyDataInit>
  ldr  r2, =_sbss
 8009c12:	4a0b      	ldr	r2, [pc, #44]	; (8009c40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009c14:	e002      	b.n	8009c1c <LoopFillZerobss>

08009c16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009c16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009c18:	f842 3b04 	str.w	r3, [r2], #4

08009c1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009c1c:	4b09      	ldr	r3, [pc, #36]	; (8009c44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009c1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009c20:	d3f9      	bcc.n	8009c16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009c22:	f7ff ff87 	bl	8009b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009c26:	f003 fc07 	bl	800d438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009c2a:	f7ff f8df 	bl	8008dec <main>
  bx  lr    
 8009c2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009c30:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8009c34:	08012f80 	.word	0x08012f80
  ldr  r0, =_sdata
 8009c38:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8009c3c:	2400087c 	.word	0x2400087c
  ldr  r2, =_sbss
 8009c40:	2400093c 	.word	0x2400093c
  ldr  r3, = _ebss
 8009c44:	24001ec0 	.word	0x24001ec0

08009c48 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009c48:	e7fe      	b.n	8009c48 <ADC3_IRQHandler>
	...

08009c4c <ai_platform_runtime_get_revision>:
 8009c4c:	4a1c      	ldr	r2, [pc, #112]	; (8009cc0 <ai_platform_runtime_get_revision+0x74>)
 8009c4e:	491d      	ldr	r1, [pc, #116]	; (8009cc4 <ai_platform_runtime_get_revision+0x78>)
 8009c50:	6813      	ldr	r3, [r2, #0]
 8009c52:	f023 0301 	bic.w	r3, r3, #1
 8009c56:	6013      	str	r3, [r2, #0]
 8009c58:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009c5c:	680b      	ldr	r3, [r1, #0]
 8009c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c62:	189a      	adds	r2, r3, r2
 8009c64:	2a01      	cmp	r2, #1
 8009c66:	d90c      	bls.n	8009c82 <ai_platform_runtime_get_revision+0x36>
 8009c68:	f240 4249 	movw	r2, #1097	; 0x449
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d008      	beq.n	8009c82 <ai_platform_runtime_get_revision+0x36>
 8009c70:	4b15      	ldr	r3, [pc, #84]	; (8009cc8 <ai_platform_runtime_get_revision+0x7c>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c78:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009c7c:	d010      	beq.n	8009ca0 <ai_platform_runtime_get_revision+0x54>
 8009c7e:	4813      	ldr	r0, [pc, #76]	; (8009ccc <ai_platform_runtime_get_revision+0x80>)
 8009c80:	4770      	bx	lr
 8009c82:	4b13      	ldr	r3, [pc, #76]	; (8009cd0 <ai_platform_runtime_get_revision+0x84>)
 8009c84:	2201      	movs	r2, #1
 8009c86:	4619      	mov	r1, r3
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	680b      	ldr	r3, [r1, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1fc      	bne.n	8009c8a <ai_platform_runtime_get_revision+0x3e>
 8009c90:	4b10      	ldr	r3, [pc, #64]	; (8009cd4 <ai_platform_runtime_get_revision+0x88>)
 8009c92:	4911      	ldr	r1, [pc, #68]	; (8009cd8 <ai_platform_runtime_get_revision+0x8c>)
 8009c94:	4a11      	ldr	r2, [pc, #68]	; (8009cdc <ai_platform_runtime_get_revision+0x90>)
 8009c96:	6019      	str	r1, [r3, #0]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d0ef      	beq.n	8009c7e <ai_platform_runtime_get_revision+0x32>
 8009c9e:	e7fe      	b.n	8009c9e <ai_platform_runtime_get_revision+0x52>
 8009ca0:	4b0f      	ldr	r3, [pc, #60]	; (8009ce0 <ai_platform_runtime_get_revision+0x94>)
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	601a      	str	r2, [r3, #0]
 8009ca8:	680b      	ldr	r3, [r1, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1fc      	bne.n	8009ca8 <ai_platform_runtime_get_revision+0x5c>
 8009cae:	4b0d      	ldr	r3, [pc, #52]	; (8009ce4 <ai_platform_runtime_get_revision+0x98>)
 8009cb0:	4909      	ldr	r1, [pc, #36]	; (8009cd8 <ai_platform_runtime_get_revision+0x8c>)
 8009cb2:	4a0a      	ldr	r2, [pc, #40]	; (8009cdc <ai_platform_runtime_get_revision+0x90>)
 8009cb4:	6019      	str	r1, [r3, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d0e0      	beq.n	8009c7e <ai_platform_runtime_get_revision+0x32>
 8009cbc:	e7fe      	b.n	8009cbc <ai_platform_runtime_get_revision+0x70>
 8009cbe:	bf00      	nop
 8009cc0:	e0002000 	.word	0xe0002000
 8009cc4:	e0042000 	.word	0xe0042000
 8009cc8:	5c001000 	.word	0x5c001000
 8009ccc:	08012b58 	.word	0x08012b58
 8009cd0:	40023008 	.word	0x40023008
 8009cd4:	40023000 	.word	0x40023000
 8009cd8:	f407a5c2 	.word	0xf407a5c2
 8009cdc:	b5e8b5cd 	.word	0xb5e8b5cd
 8009ce0:	58024c08 	.word	0x58024c08
 8009ce4:	58024c00 	.word	0x58024c00

08009ce8 <ai_platform_runtime_get_version>:
 8009ce8:	4a26      	ldr	r2, [pc, #152]	; (8009d84 <ai_platform_runtime_get_version+0x9c>)
 8009cea:	4927      	ldr	r1, [pc, #156]	; (8009d88 <ai_platform_runtime_get_version+0xa0>)
 8009cec:	6813      	ldr	r3, [r2, #0]
 8009cee:	f023 0301 	bic.w	r3, r3, #1
 8009cf2:	6013      	str	r3, [r2, #0]
 8009cf4:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009cf8:	680b      	ldr	r3, [r1, #0]
 8009cfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009cfe:	189a      	adds	r2, r3, r2
 8009d00:	2a01      	cmp	r2, #1
 8009d02:	d921      	bls.n	8009d48 <ai_platform_runtime_get_version+0x60>
 8009d04:	f240 4249 	movw	r2, #1097	; 0x449
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d01d      	beq.n	8009d48 <ai_platform_runtime_get_version+0x60>
 8009d0c:	4b1f      	ldr	r3, [pc, #124]	; (8009d8c <ai_platform_runtime_get_version+0xa4>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d14:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009d18:	d025      	beq.n	8009d66 <ai_platform_runtime_get_version+0x7e>
 8009d1a:	4b1d      	ldr	r3, [pc, #116]	; (8009d90 <ai_platform_runtime_get_version+0xa8>)
 8009d1c:	2000      	movs	r0, #0
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	b410      	push	{r4}
 8009d22:	b2dc      	uxtb	r4, r3
 8009d24:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009d28:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009d2c:	0e1b      	lsrs	r3, r3, #24
 8009d2e:	f364 0007 	bfi	r0, r4, #0, #8
 8009d32:	b083      	sub	sp, #12
 8009d34:	f361 200f 	bfi	r0, r1, #8, #8
 8009d38:	f362 4017 	bfi	r0, r2, #16, #8
 8009d3c:	f363 601f 	bfi	r0, r3, #24, #8
 8009d40:	b003      	add	sp, #12
 8009d42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d46:	4770      	bx	lr
 8009d48:	4b12      	ldr	r3, [pc, #72]	; (8009d94 <ai_platform_runtime_get_version+0xac>)
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	601a      	str	r2, [r3, #0]
 8009d50:	680b      	ldr	r3, [r1, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1fc      	bne.n	8009d50 <ai_platform_runtime_get_version+0x68>
 8009d56:	4b10      	ldr	r3, [pc, #64]	; (8009d98 <ai_platform_runtime_get_version+0xb0>)
 8009d58:	4910      	ldr	r1, [pc, #64]	; (8009d9c <ai_platform_runtime_get_version+0xb4>)
 8009d5a:	4a11      	ldr	r2, [pc, #68]	; (8009da0 <ai_platform_runtime_get_version+0xb8>)
 8009d5c:	6019      	str	r1, [r3, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d0da      	beq.n	8009d1a <ai_platform_runtime_get_version+0x32>
 8009d64:	e7fe      	b.n	8009d64 <ai_platform_runtime_get_version+0x7c>
 8009d66:	4b0f      	ldr	r3, [pc, #60]	; (8009da4 <ai_platform_runtime_get_version+0xbc>)
 8009d68:	2201      	movs	r2, #1
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	601a      	str	r2, [r3, #0]
 8009d6e:	680b      	ldr	r3, [r1, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d1fc      	bne.n	8009d6e <ai_platform_runtime_get_version+0x86>
 8009d74:	4b0c      	ldr	r3, [pc, #48]	; (8009da8 <ai_platform_runtime_get_version+0xc0>)
 8009d76:	4909      	ldr	r1, [pc, #36]	; (8009d9c <ai_platform_runtime_get_version+0xb4>)
 8009d78:	4a09      	ldr	r2, [pc, #36]	; (8009da0 <ai_platform_runtime_get_version+0xb8>)
 8009d7a:	6019      	str	r1, [r3, #0]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d0cb      	beq.n	8009d1a <ai_platform_runtime_get_version+0x32>
 8009d82:	e7fe      	b.n	8009d82 <ai_platform_runtime_get_version+0x9a>
 8009d84:	e0002000 	.word	0xe0002000
 8009d88:	e0042000 	.word	0xe0042000
 8009d8c:	5c001000 	.word	0x5c001000
 8009d90:	08012b5c 	.word	0x08012b5c
 8009d94:	40023008 	.word	0x40023008
 8009d98:	40023000 	.word	0x40023000
 8009d9c:	f407a5c2 	.word	0xf407a5c2
 8009da0:	b5e8b5cd 	.word	0xb5e8b5cd
 8009da4:	58024c08 	.word	0x58024c08
 8009da8:	58024c00 	.word	0x58024c00

08009dac <ai_platform_api_get_version>:
 8009dac:	4a26      	ldr	r2, [pc, #152]	; (8009e48 <ai_platform_api_get_version+0x9c>)
 8009dae:	4927      	ldr	r1, [pc, #156]	; (8009e4c <ai_platform_api_get_version+0xa0>)
 8009db0:	6813      	ldr	r3, [r2, #0]
 8009db2:	f023 0301 	bic.w	r3, r3, #1
 8009db6:	6013      	str	r3, [r2, #0]
 8009db8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009dbc:	680b      	ldr	r3, [r1, #0]
 8009dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009dc2:	189a      	adds	r2, r3, r2
 8009dc4:	2a01      	cmp	r2, #1
 8009dc6:	d921      	bls.n	8009e0c <ai_platform_api_get_version+0x60>
 8009dc8:	f240 4249 	movw	r2, #1097	; 0x449
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d01d      	beq.n	8009e0c <ai_platform_api_get_version+0x60>
 8009dd0:	4b1f      	ldr	r3, [pc, #124]	; (8009e50 <ai_platform_api_get_version+0xa4>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009dd8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009ddc:	d025      	beq.n	8009e2a <ai_platform_api_get_version+0x7e>
 8009dde:	4b1d      	ldr	r3, [pc, #116]	; (8009e54 <ai_platform_api_get_version+0xa8>)
 8009de0:	2000      	movs	r0, #0
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	b410      	push	{r4}
 8009de6:	b2dc      	uxtb	r4, r3
 8009de8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009dec:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009df0:	0e1b      	lsrs	r3, r3, #24
 8009df2:	f364 0007 	bfi	r0, r4, #0, #8
 8009df6:	b083      	sub	sp, #12
 8009df8:	f361 200f 	bfi	r0, r1, #8, #8
 8009dfc:	f362 4017 	bfi	r0, r2, #16, #8
 8009e00:	f363 601f 	bfi	r0, r3, #24, #8
 8009e04:	b003      	add	sp, #12
 8009e06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	4b12      	ldr	r3, [pc, #72]	; (8009e58 <ai_platform_api_get_version+0xac>)
 8009e0e:	2201      	movs	r2, #1
 8009e10:	4619      	mov	r1, r3
 8009e12:	601a      	str	r2, [r3, #0]
 8009e14:	680b      	ldr	r3, [r1, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1fc      	bne.n	8009e14 <ai_platform_api_get_version+0x68>
 8009e1a:	4b10      	ldr	r3, [pc, #64]	; (8009e5c <ai_platform_api_get_version+0xb0>)
 8009e1c:	4910      	ldr	r1, [pc, #64]	; (8009e60 <ai_platform_api_get_version+0xb4>)
 8009e1e:	4a11      	ldr	r2, [pc, #68]	; (8009e64 <ai_platform_api_get_version+0xb8>)
 8009e20:	6019      	str	r1, [r3, #0]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d0da      	beq.n	8009dde <ai_platform_api_get_version+0x32>
 8009e28:	e7fe      	b.n	8009e28 <ai_platform_api_get_version+0x7c>
 8009e2a:	4b0f      	ldr	r3, [pc, #60]	; (8009e68 <ai_platform_api_get_version+0xbc>)
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	4619      	mov	r1, r3
 8009e30:	601a      	str	r2, [r3, #0]
 8009e32:	680b      	ldr	r3, [r1, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1fc      	bne.n	8009e32 <ai_platform_api_get_version+0x86>
 8009e38:	4b0c      	ldr	r3, [pc, #48]	; (8009e6c <ai_platform_api_get_version+0xc0>)
 8009e3a:	4909      	ldr	r1, [pc, #36]	; (8009e60 <ai_platform_api_get_version+0xb4>)
 8009e3c:	4a09      	ldr	r2, [pc, #36]	; (8009e64 <ai_platform_api_get_version+0xb8>)
 8009e3e:	6019      	str	r1, [r3, #0]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d0cb      	beq.n	8009dde <ai_platform_api_get_version+0x32>
 8009e46:	e7fe      	b.n	8009e46 <ai_platform_api_get_version+0x9a>
 8009e48:	e0002000 	.word	0xe0002000
 8009e4c:	e0042000 	.word	0xe0042000
 8009e50:	5c001000 	.word	0x5c001000
 8009e54:	08012b60 	.word	0x08012b60
 8009e58:	40023008 	.word	0x40023008
 8009e5c:	40023000 	.word	0x40023000
 8009e60:	f407a5c2 	.word	0xf407a5c2
 8009e64:	b5e8b5cd 	.word	0xb5e8b5cd
 8009e68:	58024c08 	.word	0x58024c08
 8009e6c:	58024c00 	.word	0x58024c00

08009e70 <ai_platform_interface_api_get_version>:
 8009e70:	4a26      	ldr	r2, [pc, #152]	; (8009f0c <ai_platform_interface_api_get_version+0x9c>)
 8009e72:	4927      	ldr	r1, [pc, #156]	; (8009f10 <ai_platform_interface_api_get_version+0xa0>)
 8009e74:	6813      	ldr	r3, [r2, #0]
 8009e76:	f023 0301 	bic.w	r3, r3, #1
 8009e7a:	6013      	str	r3, [r2, #0]
 8009e7c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009e80:	680b      	ldr	r3, [r1, #0]
 8009e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009e86:	189a      	adds	r2, r3, r2
 8009e88:	2a01      	cmp	r2, #1
 8009e8a:	d921      	bls.n	8009ed0 <ai_platform_interface_api_get_version+0x60>
 8009e8c:	f240 4249 	movw	r2, #1097	; 0x449
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d01d      	beq.n	8009ed0 <ai_platform_interface_api_get_version+0x60>
 8009e94:	4b1f      	ldr	r3, [pc, #124]	; (8009f14 <ai_platform_interface_api_get_version+0xa4>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009e9c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009ea0:	d025      	beq.n	8009eee <ai_platform_interface_api_get_version+0x7e>
 8009ea2:	4b1d      	ldr	r3, [pc, #116]	; (8009f18 <ai_platform_interface_api_get_version+0xa8>)
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	b410      	push	{r4}
 8009eaa:	b2dc      	uxtb	r4, r3
 8009eac:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009eb0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009eb4:	0e1b      	lsrs	r3, r3, #24
 8009eb6:	f364 0007 	bfi	r0, r4, #0, #8
 8009eba:	b083      	sub	sp, #12
 8009ebc:	f361 200f 	bfi	r0, r1, #8, #8
 8009ec0:	f362 4017 	bfi	r0, r2, #16, #8
 8009ec4:	f363 601f 	bfi	r0, r3, #24, #8
 8009ec8:	b003      	add	sp, #12
 8009eca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ece:	4770      	bx	lr
 8009ed0:	4b12      	ldr	r3, [pc, #72]	; (8009f1c <ai_platform_interface_api_get_version+0xac>)
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	601a      	str	r2, [r3, #0]
 8009ed8:	680b      	ldr	r3, [r1, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1fc      	bne.n	8009ed8 <ai_platform_interface_api_get_version+0x68>
 8009ede:	4b10      	ldr	r3, [pc, #64]	; (8009f20 <ai_platform_interface_api_get_version+0xb0>)
 8009ee0:	4910      	ldr	r1, [pc, #64]	; (8009f24 <ai_platform_interface_api_get_version+0xb4>)
 8009ee2:	4a11      	ldr	r2, [pc, #68]	; (8009f28 <ai_platform_interface_api_get_version+0xb8>)
 8009ee4:	6019      	str	r1, [r3, #0]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d0da      	beq.n	8009ea2 <ai_platform_interface_api_get_version+0x32>
 8009eec:	e7fe      	b.n	8009eec <ai_platform_interface_api_get_version+0x7c>
 8009eee:	4b0f      	ldr	r3, [pc, #60]	; (8009f2c <ai_platform_interface_api_get_version+0xbc>)
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	601a      	str	r2, [r3, #0]
 8009ef6:	680b      	ldr	r3, [r1, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1fc      	bne.n	8009ef6 <ai_platform_interface_api_get_version+0x86>
 8009efc:	4b0c      	ldr	r3, [pc, #48]	; (8009f30 <ai_platform_interface_api_get_version+0xc0>)
 8009efe:	4909      	ldr	r1, [pc, #36]	; (8009f24 <ai_platform_interface_api_get_version+0xb4>)
 8009f00:	4a09      	ldr	r2, [pc, #36]	; (8009f28 <ai_platform_interface_api_get_version+0xb8>)
 8009f02:	6019      	str	r1, [r3, #0]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d0cb      	beq.n	8009ea2 <ai_platform_interface_api_get_version+0x32>
 8009f0a:	e7fe      	b.n	8009f0a <ai_platform_interface_api_get_version+0x9a>
 8009f0c:	e0002000 	.word	0xe0002000
 8009f10:	e0042000 	.word	0xe0042000
 8009f14:	5c001000 	.word	0x5c001000
 8009f18:	08012b64 	.word	0x08012b64
 8009f1c:	40023008 	.word	0x40023008
 8009f20:	40023000 	.word	0x40023000
 8009f24:	f407a5c2 	.word	0xf407a5c2
 8009f28:	b5e8b5cd 	.word	0xb5e8b5cd
 8009f2c:	58024c08 	.word	0x58024c08
 8009f30:	58024c00 	.word	0x58024c00

08009f34 <ai_platform_context_acquire>:
 8009f34:	b120      	cbz	r0, 8009f40 <ai_platform_context_acquire+0xc>
 8009f36:	4b1e      	ldr	r3, [pc, #120]	; (8009fb0 <ai_platform_context_acquire+0x7c>)
 8009f38:	6802      	ldr	r2, [r0, #0]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	bf18      	it	ne
 8009f3e:	2000      	movne	r0, #0
 8009f40:	4a1c      	ldr	r2, [pc, #112]	; (8009fb4 <ai_platform_context_acquire+0x80>)
 8009f42:	491d      	ldr	r1, [pc, #116]	; (8009fb8 <ai_platform_context_acquire+0x84>)
 8009f44:	6813      	ldr	r3, [r2, #0]
 8009f46:	f023 0301 	bic.w	r3, r3, #1
 8009f4a:	6013      	str	r3, [r2, #0]
 8009f4c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009f50:	680b      	ldr	r3, [r1, #0]
 8009f52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f56:	189a      	adds	r2, r3, r2
 8009f58:	2a01      	cmp	r2, #1
 8009f5a:	d90b      	bls.n	8009f74 <ai_platform_context_acquire+0x40>
 8009f5c:	f240 4249 	movw	r2, #1097	; 0x449
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d007      	beq.n	8009f74 <ai_platform_context_acquire+0x40>
 8009f64:	4b15      	ldr	r3, [pc, #84]	; (8009fbc <ai_platform_context_acquire+0x88>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f6c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009f70:	d00f      	beq.n	8009f92 <ai_platform_context_acquire+0x5e>
 8009f72:	4770      	bx	lr
 8009f74:	4b12      	ldr	r3, [pc, #72]	; (8009fc0 <ai_platform_context_acquire+0x8c>)
 8009f76:	2201      	movs	r2, #1
 8009f78:	4619      	mov	r1, r3
 8009f7a:	601a      	str	r2, [r3, #0]
 8009f7c:	680b      	ldr	r3, [r1, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1fc      	bne.n	8009f7c <ai_platform_context_acquire+0x48>
 8009f82:	4b10      	ldr	r3, [pc, #64]	; (8009fc4 <ai_platform_context_acquire+0x90>)
 8009f84:	4910      	ldr	r1, [pc, #64]	; (8009fc8 <ai_platform_context_acquire+0x94>)
 8009f86:	4a11      	ldr	r2, [pc, #68]	; (8009fcc <ai_platform_context_acquire+0x98>)
 8009f88:	6019      	str	r1, [r3, #0]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d0f0      	beq.n	8009f72 <ai_platform_context_acquire+0x3e>
 8009f90:	e7fe      	b.n	8009f90 <ai_platform_context_acquire+0x5c>
 8009f92:	4b0f      	ldr	r3, [pc, #60]	; (8009fd0 <ai_platform_context_acquire+0x9c>)
 8009f94:	2201      	movs	r2, #1
 8009f96:	4619      	mov	r1, r3
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	680b      	ldr	r3, [r1, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d1fc      	bne.n	8009f9a <ai_platform_context_acquire+0x66>
 8009fa0:	4b0c      	ldr	r3, [pc, #48]	; (8009fd4 <ai_platform_context_acquire+0xa0>)
 8009fa2:	4909      	ldr	r1, [pc, #36]	; (8009fc8 <ai_platform_context_acquire+0x94>)
 8009fa4:	4a09      	ldr	r2, [pc, #36]	; (8009fcc <ai_platform_context_acquire+0x98>)
 8009fa6:	6019      	str	r1, [r3, #0]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d0e1      	beq.n	8009f72 <ai_platform_context_acquire+0x3e>
 8009fae:	e7fe      	b.n	8009fae <ai_platform_context_acquire+0x7a>
 8009fb0:	a1c00100 	.word	0xa1c00100
 8009fb4:	e0002000 	.word	0xe0002000
 8009fb8:	e0042000 	.word	0xe0042000
 8009fbc:	5c001000 	.word	0x5c001000
 8009fc0:	40023008 	.word	0x40023008
 8009fc4:	40023000 	.word	0x40023000
 8009fc8:	f407a5c2 	.word	0xf407a5c2
 8009fcc:	b5e8b5cd 	.word	0xb5e8b5cd
 8009fd0:	58024c08 	.word	0x58024c08
 8009fd4:	58024c00 	.word	0x58024c00

08009fd8 <ai_platform_network_get_error>:
 8009fd8:	b118      	cbz	r0, 8009fe2 <ai_platform_network_get_error+0xa>
 8009fda:	4b3c      	ldr	r3, [pc, #240]	; (800a0cc <ai_platform_network_get_error+0xf4>)
 8009fdc:	6802      	ldr	r2, [r0, #0]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d02a      	beq.n	800a038 <ai_platform_network_get_error+0x60>
 8009fe2:	4a3b      	ldr	r2, [pc, #236]	; (800a0d0 <ai_platform_network_get_error+0xf8>)
 8009fe4:	493b      	ldr	r1, [pc, #236]	; (800a0d4 <ai_platform_network_get_error+0xfc>)
 8009fe6:	6813      	ldr	r3, [r2, #0]
 8009fe8:	f023 0301 	bic.w	r3, r3, #1
 8009fec:	6013      	str	r3, [r2, #0]
 8009fee:	680b      	ldr	r3, [r1, #0]
 8009ff0:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ff8:	185a      	adds	r2, r3, r1
 8009ffa:	2a01      	cmp	r2, #1
 8009ffc:	d90d      	bls.n	800a01a <ai_platform_network_get_error+0x42>
 8009ffe:	f240 4249 	movw	r2, #1097	; 0x449
 800a002:	4293      	cmp	r3, r2
 800a004:	d009      	beq.n	800a01a <ai_platform_network_get_error+0x42>
 800a006:	4b34      	ldr	r3, [pc, #208]	; (800a0d8 <ai_platform_network_get_error+0x100>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a00e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a012:	d02d      	beq.n	800a070 <ai_platform_network_get_error+0x98>
 800a014:	f241 0010 	movw	r0, #4112	; 0x1010
 800a018:	4770      	bx	lr
 800a01a:	4b30      	ldr	r3, [pc, #192]	; (800a0dc <ai_platform_network_get_error+0x104>)
 800a01c:	2201      	movs	r2, #1
 800a01e:	4619      	mov	r1, r3
 800a020:	601a      	str	r2, [r3, #0]
 800a022:	680b      	ldr	r3, [r1, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d1fc      	bne.n	800a022 <ai_platform_network_get_error+0x4a>
 800a028:	4b2d      	ldr	r3, [pc, #180]	; (800a0e0 <ai_platform_network_get_error+0x108>)
 800a02a:	492e      	ldr	r1, [pc, #184]	; (800a0e4 <ai_platform_network_get_error+0x10c>)
 800a02c:	4a2e      	ldr	r2, [pc, #184]	; (800a0e8 <ai_platform_network_get_error+0x110>)
 800a02e:	6019      	str	r1, [r3, #0]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4293      	cmp	r3, r2
 800a034:	d0ee      	beq.n	800a014 <ai_platform_network_get_error+0x3c>
 800a036:	e7fe      	b.n	800a036 <ai_platform_network_get_error+0x5e>
 800a038:	4a25      	ldr	r2, [pc, #148]	; (800a0d0 <ai_platform_network_get_error+0xf8>)
 800a03a:	4926      	ldr	r1, [pc, #152]	; (800a0d4 <ai_platform_network_get_error+0xfc>)
 800a03c:	6813      	ldr	r3, [r2, #0]
 800a03e:	f023 0301 	bic.w	r3, r3, #1
 800a042:	6013      	str	r3, [r2, #0]
 800a044:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800a048:	680b      	ldr	r3, [r1, #0]
 800a04a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a04e:	189a      	adds	r2, r3, r2
 800a050:	2a01      	cmp	r2, #1
 800a052:	d92b      	bls.n	800a0ac <ai_platform_network_get_error+0xd4>
 800a054:	f240 4249 	movw	r2, #1097	; 0x449
 800a058:	4293      	cmp	r3, r2
 800a05a:	d027      	beq.n	800a0ac <ai_platform_network_get_error+0xd4>
 800a05c:	4b1e      	ldr	r3, [pc, #120]	; (800a0d8 <ai_platform_network_get_error+0x100>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a064:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a068:	d011      	beq.n	800a08e <ai_platform_network_get_error+0xb6>
 800a06a:	3010      	adds	r0, #16
 800a06c:	f001 b824 	b.w	800b0b8 <core_get_error>
 800a070:	4b1e      	ldr	r3, [pc, #120]	; (800a0ec <ai_platform_network_get_error+0x114>)
 800a072:	2201      	movs	r2, #1
 800a074:	4619      	mov	r1, r3
 800a076:	601a      	str	r2, [r3, #0]
 800a078:	680b      	ldr	r3, [r1, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1fc      	bne.n	800a078 <ai_platform_network_get_error+0xa0>
 800a07e:	4b1c      	ldr	r3, [pc, #112]	; (800a0f0 <ai_platform_network_get_error+0x118>)
 800a080:	4918      	ldr	r1, [pc, #96]	; (800a0e4 <ai_platform_network_get_error+0x10c>)
 800a082:	4a19      	ldr	r2, [pc, #100]	; (800a0e8 <ai_platform_network_get_error+0x110>)
 800a084:	6019      	str	r1, [r3, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4293      	cmp	r3, r2
 800a08a:	d0c3      	beq.n	800a014 <ai_platform_network_get_error+0x3c>
 800a08c:	e7fe      	b.n	800a08c <ai_platform_network_get_error+0xb4>
 800a08e:	4b17      	ldr	r3, [pc, #92]	; (800a0ec <ai_platform_network_get_error+0x114>)
 800a090:	2201      	movs	r2, #1
 800a092:	4619      	mov	r1, r3
 800a094:	601a      	str	r2, [r3, #0]
 800a096:	680b      	ldr	r3, [r1, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d1fc      	bne.n	800a096 <ai_platform_network_get_error+0xbe>
 800a09c:	4b14      	ldr	r3, [pc, #80]	; (800a0f0 <ai_platform_network_get_error+0x118>)
 800a09e:	4911      	ldr	r1, [pc, #68]	; (800a0e4 <ai_platform_network_get_error+0x10c>)
 800a0a0:	4a11      	ldr	r2, [pc, #68]	; (800a0e8 <ai_platform_network_get_error+0x110>)
 800a0a2:	6019      	str	r1, [r3, #0]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d0df      	beq.n	800a06a <ai_platform_network_get_error+0x92>
 800a0aa:	e7fe      	b.n	800a0aa <ai_platform_network_get_error+0xd2>
 800a0ac:	4b0b      	ldr	r3, [pc, #44]	; (800a0dc <ai_platform_network_get_error+0x104>)
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	601a      	str	r2, [r3, #0]
 800a0b4:	680b      	ldr	r3, [r1, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1fc      	bne.n	800a0b4 <ai_platform_network_get_error+0xdc>
 800a0ba:	4b09      	ldr	r3, [pc, #36]	; (800a0e0 <ai_platform_network_get_error+0x108>)
 800a0bc:	4909      	ldr	r1, [pc, #36]	; (800a0e4 <ai_platform_network_get_error+0x10c>)
 800a0be:	4a0a      	ldr	r2, [pc, #40]	; (800a0e8 <ai_platform_network_get_error+0x110>)
 800a0c0:	6019      	str	r1, [r3, #0]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d0d0      	beq.n	800a06a <ai_platform_network_get_error+0x92>
 800a0c8:	e7fe      	b.n	800a0c8 <ai_platform_network_get_error+0xf0>
 800a0ca:	bf00      	nop
 800a0cc:	a1c00100 	.word	0xa1c00100
 800a0d0:	e0002000 	.word	0xe0002000
 800a0d4:	e0042000 	.word	0xe0042000
 800a0d8:	5c001000 	.word	0x5c001000
 800a0dc:	40023008 	.word	0x40023008
 800a0e0:	40023000 	.word	0x40023000
 800a0e4:	f407a5c2 	.word	0xf407a5c2
 800a0e8:	b5e8b5cd 	.word	0xb5e8b5cd
 800a0ec:	58024c08 	.word	0x58024c08
 800a0f0:	58024c00 	.word	0x58024c00

0800a0f4 <ai_platform_api_get_network_report>:
 800a0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	4605      	mov	r5, r0
 800a0fe:	b120      	cbz	r0, 800a10a <ai_platform_api_get_network_report+0x16>
 800a100:	4ba7      	ldr	r3, [pc, #668]	; (800a3a0 <ai_platform_api_get_network_report+0x2ac>)
 800a102:	6802      	ldr	r2, [r0, #0]
 800a104:	429a      	cmp	r2, r3
 800a106:	bf18      	it	ne
 800a108:	2500      	movne	r5, #0
 800a10a:	4aa6      	ldr	r2, [pc, #664]	; (800a3a4 <ai_platform_api_get_network_report+0x2b0>)
 800a10c:	f46f 668a 	mvn.w	r6, #1104	; 0x450
 800a110:	49a5      	ldr	r1, [pc, #660]	; (800a3a8 <ai_platform_api_get_network_report+0x2b4>)
 800a112:	6813      	ldr	r3, [r2, #0]
 800a114:	f023 0301 	bic.w	r3, r3, #1
 800a118:	6013      	str	r3, [r2, #0]
 800a11a:	680b      	ldr	r3, [r1, #0]
 800a11c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a120:	199a      	adds	r2, r3, r6
 800a122:	2a01      	cmp	r2, #1
 800a124:	f240 8090 	bls.w	800a248 <ai_platform_api_get_network_report+0x154>
 800a128:	f240 4249 	movw	r2, #1097	; 0x449
 800a12c:	4293      	cmp	r3, r2
 800a12e:	f000 808b 	beq.w	800a248 <ai_platform_api_get_network_report+0x154>
 800a132:	4b9e      	ldr	r3, [pc, #632]	; (800a3ac <ai_platform_api_get_network_report+0x2b8>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a13a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a13e:	d073      	beq.n	800a228 <ai_platform_api_get_network_report+0x134>
 800a140:	2d00      	cmp	r5, #0
 800a142:	f000 8091 	beq.w	800a268 <ai_platform_api_get_network_report+0x174>
 800a146:	fab4 f384 	clz	r3, r4
 800a14a:	095b      	lsrs	r3, r3, #5
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f040 808b 	bne.w	800a268 <ai_platform_api_get_network_report+0x174>
 800a152:	66e3      	str	r3, [r4, #108]	; 0x6c
 800a154:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800a156:	2a00      	cmp	r2, #0
 800a158:	f000 810f 	beq.w	800a37a <ai_platform_api_get_network_report+0x286>
 800a15c:	2301      	movs	r3, #1
 800a15e:	66e3      	str	r3, [r4, #108]	; 0x6c
 800a160:	68d3      	ldr	r3, [r2, #12]
 800a162:	b193      	cbz	r3, 800a18a <ai_platform_api_get_network_report+0x96>
 800a164:	429a      	cmp	r2, r3
 800a166:	d010      	beq.n	800a18a <ai_platform_api_get_network_report+0x96>
 800a168:	2202      	movs	r2, #2
 800a16a:	66e2      	str	r2, [r4, #108]	; 0x6c
 800a16c:	3201      	adds	r2, #1
 800a16e:	68d9      	ldr	r1, [r3, #12]
 800a170:	4299      	cmp	r1, r3
 800a172:	bf18      	it	ne
 800a174:	2900      	cmpne	r1, #0
 800a176:	460b      	mov	r3, r1
 800a178:	bf14      	ite	ne
 800a17a:	2001      	movne	r0, #1
 800a17c:	2000      	moveq	r0, #0
 800a17e:	2800      	cmp	r0, #0
 800a180:	d1f3      	bne.n	800a16a <ai_platform_api_get_network_report+0x76>
 800a182:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a184:	2b00      	cmp	r3, #0
 800a186:	f000 80f8 	beq.w	800a37a <ai_platform_api_get_network_report+0x286>
 800a18a:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f000 80e7 	beq.w	800a362 <ai_platform_api_get_network_report+0x26e>
 800a194:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800a196:	2f00      	cmp	r7, #0
 800a198:	f000 80e3 	beq.w	800a362 <ai_platform_api_get_network_report+0x26e>
 800a19c:	883b      	ldrh	r3, [r7, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f000 80df 	beq.w	800a362 <ai_platform_api_get_network_report+0x26e>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f000 80db 	beq.w	800a362 <ai_platform_api_get_network_report+0x26e>
 800a1ac:	681e      	ldr	r6, [r3, #0]
 800a1ae:	2e00      	cmp	r6, #0
 800a1b0:	f000 80d7 	beq.w	800a362 <ai_platform_api_get_network_report+0x26e>
 800a1b4:	f04f 0901 	mov.w	r9, #1
 800a1b8:	f04f 0800 	mov.w	r8, #0
 800a1bc:	464b      	mov	r3, r9
 800a1be:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800a1c2:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 800a1c6:	69b0      	ldr	r0, [r6, #24]
 800a1c8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a1cc:	6800      	ldr	r0, [r0, #0]
 800a1ce:	eb01 0a02 	add.w	sl, r1, r2
 800a1d2:	9303      	str	r3, [sp, #12]
 800a1d4:	f8dc b008 	ldr.w	fp, [ip, #8]
 800a1d8:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800a1dc:	f002 ff38 	bl	800d050 <ai_array_to_buffer_fmt>
 800a1e0:	9b03      	ldr	r3, [sp, #12]
 800a1e2:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 800a1e6:	5088      	str	r0, [r1, r2]
 800a1e8:	eb0b 0108 	add.w	r1, fp, r8
 800a1ec:	f8aa 3004 	strh.w	r3, [sl, #4]
 800a1f0:	68f2      	ldr	r2, [r6, #12]
 800a1f2:	68d2      	ldr	r2, [r2, #12]
 800a1f4:	f8aa 2006 	strh.w	r2, [sl, #6]
 800a1f8:	68f2      	ldr	r2, [r6, #12]
 800a1fa:	6892      	ldr	r2, [r2, #8]
 800a1fc:	f8aa 2008 	strh.w	r2, [sl, #8]
 800a200:	68f2      	ldr	r2, [r6, #12]
 800a202:	6852      	ldr	r2, [r2, #4]
 800a204:	f8ca 200c 	str.w	r2, [sl, #12]
 800a208:	69b2      	ldr	r2, [r6, #24]
 800a20a:	6892      	ldr	r2, [r2, #8]
 800a20c:	f8ca 2010 	str.w	r2, [sl, #16]
 800a210:	2900      	cmp	r1, #0
 800a212:	d02d      	beq.n	800a270 <ai_platform_api_get_network_report+0x17c>
 800a214:	2200      	movs	r2, #0
 800a216:	f84b 2008 	str.w	r2, [fp, r8]
 800a21a:	6832      	ldr	r2, [r6, #0]
 800a21c:	604a      	str	r2, [r1, #4]
 800a21e:	b33a      	cbz	r2, 800a270 <ai_platform_api_get_network_report+0x17c>
 800a220:	8852      	ldrh	r2, [r2, #2]
 800a222:	b32a      	cbz	r2, 800a270 <ai_platform_api_get_network_report+0x17c>
 800a224:	600b      	str	r3, [r1, #0]
 800a226:	e024      	b.n	800a272 <ai_platform_api_get_network_report+0x17e>
 800a228:	4b61      	ldr	r3, [pc, #388]	; (800a3b0 <ai_platform_api_get_network_report+0x2bc>)
 800a22a:	2201      	movs	r2, #1
 800a22c:	4619      	mov	r1, r3
 800a22e:	601a      	str	r2, [r3, #0]
 800a230:	680b      	ldr	r3, [r1, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1fc      	bne.n	800a230 <ai_platform_api_get_network_report+0x13c>
 800a236:	4b5f      	ldr	r3, [pc, #380]	; (800a3b4 <ai_platform_api_get_network_report+0x2c0>)
 800a238:	495f      	ldr	r1, [pc, #380]	; (800a3b8 <ai_platform_api_get_network_report+0x2c4>)
 800a23a:	4a60      	ldr	r2, [pc, #384]	; (800a3bc <ai_platform_api_get_network_report+0x2c8>)
 800a23c:	6019      	str	r1, [r3, #0]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4293      	cmp	r3, r2
 800a242:	f43f af7d 	beq.w	800a140 <ai_platform_api_get_network_report+0x4c>
 800a246:	e7fe      	b.n	800a246 <ai_platform_api_get_network_report+0x152>
 800a248:	4b5d      	ldr	r3, [pc, #372]	; (800a3c0 <ai_platform_api_get_network_report+0x2cc>)
 800a24a:	2201      	movs	r2, #1
 800a24c:	4619      	mov	r1, r3
 800a24e:	601a      	str	r2, [r3, #0]
 800a250:	680b      	ldr	r3, [r1, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1fc      	bne.n	800a250 <ai_platform_api_get_network_report+0x15c>
 800a256:	4b5b      	ldr	r3, [pc, #364]	; (800a3c4 <ai_platform_api_get_network_report+0x2d0>)
 800a258:	4957      	ldr	r1, [pc, #348]	; (800a3b8 <ai_platform_api_get_network_report+0x2c4>)
 800a25a:	4a58      	ldr	r2, [pc, #352]	; (800a3bc <ai_platform_api_get_network_report+0x2c8>)
 800a25c:	6019      	str	r1, [r3, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4293      	cmp	r3, r2
 800a262:	f43f af6d 	beq.w	800a140 <ai_platform_api_get_network_report+0x4c>
 800a266:	e7fe      	b.n	800a266 <ai_platform_api_get_network_report+0x172>
 800a268:	2000      	movs	r0, #0
 800a26a:	b005      	add	sp, #20
 800a26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a270:	2100      	movs	r1, #0
 800a272:	f8ca 1014 	str.w	r1, [sl, #20]
 800a276:	fa1f f289 	uxth.w	r2, r9
 800a27a:	8839      	ldrh	r1, [r7, #0]
 800a27c:	f108 0808 	add.w	r8, r8, #8
 800a280:	4589      	cmp	r9, r1
 800a282:	d207      	bcs.n	800a294 <ai_platform_api_get_network_report+0x1a0>
 800a284:	6879      	ldr	r1, [r7, #4]
 800a286:	b129      	cbz	r1, 800a294 <ai_platform_api_get_network_report+0x1a0>
 800a288:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 800a28c:	f109 0901 	add.w	r9, r9, #1
 800a290:	2e00      	cmp	r6, #0
 800a292:	d194      	bne.n	800a1be <ai_platform_api_get_network_report+0xca>
 800a294:	2a00      	cmp	r2, #0
 800a296:	d064      	beq.n	800a362 <ai_platform_api_get_network_report+0x26e>
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	8622      	strh	r2, [r4, #48]	; 0x30
 800a29e:	6363      	str	r3, [r4, #52]	; 0x34
 800a2a0:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d970      	bls.n	800a38a <ai_platform_api_get_network_report+0x296>
 800a2a8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800a2aa:	f117 0f0c 	cmn.w	r7, #12
 800a2ae:	d06c      	beq.n	800a38a <ai_platform_api_get_network_report+0x296>
 800a2b0:	89bb      	ldrh	r3, [r7, #12]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d069      	beq.n	800a38a <ai_platform_api_get_network_report+0x296>
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d066      	beq.n	800a38a <ai_platform_api_get_network_report+0x296>
 800a2bc:	681e      	ldr	r6, [r3, #0]
 800a2be:	2e00      	cmp	r6, #0
 800a2c0:	d063      	beq.n	800a38a <ai_platform_api_get_network_report+0x296>
 800a2c2:	f04f 0901 	mov.w	r9, #1
 800a2c6:	f04f 0800 	mov.w	r8, #0
 800a2ca:	464b      	mov	r3, r9
 800a2cc:	e01c      	b.n	800a308 <ai_platform_api_get_network_report+0x214>
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f84b 2008 	str.w	r2, [fp, r8]
 800a2d4:	6832      	ldr	r2, [r6, #0]
 800a2d6:	604a      	str	r2, [r1, #4]
 800a2d8:	2a00      	cmp	r2, #0
 800a2da:	d040      	beq.n	800a35e <ai_platform_api_get_network_report+0x26a>
 800a2dc:	8852      	ldrh	r2, [r2, #2]
 800a2de:	2a00      	cmp	r2, #0
 800a2e0:	d03d      	beq.n	800a35e <ai_platform_api_get_network_report+0x26a>
 800a2e2:	600b      	str	r3, [r1, #0]
 800a2e4:	f8ca 1014 	str.w	r1, [sl, #20]
 800a2e8:	fa1f f289 	uxth.w	r2, r9
 800a2ec:	89b9      	ldrh	r1, [r7, #12]
 800a2ee:	f108 0808 	add.w	r8, r8, #8
 800a2f2:	4589      	cmp	r9, r1
 800a2f4:	d268      	bcs.n	800a3c8 <ai_platform_api_get_network_report+0x2d4>
 800a2f6:	6939      	ldr	r1, [r7, #16]
 800a2f8:	2900      	cmp	r1, #0
 800a2fa:	d065      	beq.n	800a3c8 <ai_platform_api_get_network_report+0x2d4>
 800a2fc:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 800a300:	f109 0901 	add.w	r9, r9, #1
 800a304:	2e00      	cmp	r6, #0
 800a306:	d05f      	beq.n	800a3c8 <ai_platform_api_get_network_report+0x2d4>
 800a308:	f8d7 c014 	ldr.w	ip, [r7, #20]
 800a30c:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 800a310:	69b0      	ldr	r0, [r6, #24]
 800a312:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a316:	6800      	ldr	r0, [r0, #0]
 800a318:	eb01 0a02 	add.w	sl, r1, r2
 800a31c:	9303      	str	r3, [sp, #12]
 800a31e:	f8dc b008 	ldr.w	fp, [ip, #8]
 800a322:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800a326:	f002 fe93 	bl	800d050 <ai_array_to_buffer_fmt>
 800a32a:	9b03      	ldr	r3, [sp, #12]
 800a32c:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 800a330:	5088      	str	r0, [r1, r2]
 800a332:	eb0b 0108 	add.w	r1, fp, r8
 800a336:	f8aa 3004 	strh.w	r3, [sl, #4]
 800a33a:	68f2      	ldr	r2, [r6, #12]
 800a33c:	68d2      	ldr	r2, [r2, #12]
 800a33e:	f8aa 2006 	strh.w	r2, [sl, #6]
 800a342:	68f2      	ldr	r2, [r6, #12]
 800a344:	6892      	ldr	r2, [r2, #8]
 800a346:	f8aa 2008 	strh.w	r2, [sl, #8]
 800a34a:	68f2      	ldr	r2, [r6, #12]
 800a34c:	6852      	ldr	r2, [r2, #4]
 800a34e:	f8ca 200c 	str.w	r2, [sl, #12]
 800a352:	69b2      	ldr	r2, [r6, #24]
 800a354:	6892      	ldr	r2, [r2, #8]
 800a356:	f8ca 2010 	str.w	r2, [sl, #16]
 800a35a:	2900      	cmp	r1, #0
 800a35c:	d1b7      	bne.n	800a2ce <ai_platform_api_get_network_report+0x1da>
 800a35e:	2100      	movs	r1, #0
 800a360:	e7c0      	b.n	800a2e4 <ai_platform_api_get_network_report+0x1f0>
 800a362:	2600      	movs	r6, #0
 800a364:	f105 0010 	add.w	r0, r5, #16
 800a368:	2218      	movs	r2, #24
 800a36a:	2112      	movs	r1, #18
 800a36c:	8626      	strh	r6, [r4, #48]	; 0x30
 800a36e:	f000 fea9 	bl	800b0c4 <core_set_error>
 800a372:	4630      	mov	r0, r6
 800a374:	b005      	add	sp, #20
 800a376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37a:	f105 0010 	add.w	r0, r5, #16
 800a37e:	2218      	movs	r2, #24
 800a380:	2111      	movs	r1, #17
 800a382:	f000 fe9f 	bl	800b0c4 <core_set_error>
 800a386:	2000      	movs	r0, #0
 800a388:	e76f      	b.n	800a26a <ai_platform_api_get_network_report+0x176>
 800a38a:	2600      	movs	r6, #0
 800a38c:	f105 0010 	add.w	r0, r5, #16
 800a390:	2218      	movs	r2, #24
 800a392:	2113      	movs	r1, #19
 800a394:	8666      	strh	r6, [r4, #50]	; 0x32
 800a396:	f000 fe95 	bl	800b0c4 <core_set_error>
 800a39a:	4630      	mov	r0, r6
 800a39c:	e765      	b.n	800a26a <ai_platform_api_get_network_report+0x176>
 800a39e:	bf00      	nop
 800a3a0:	a1c00100 	.word	0xa1c00100
 800a3a4:	e0002000 	.word	0xe0002000
 800a3a8:	e0042000 	.word	0xe0042000
 800a3ac:	5c001000 	.word	0x5c001000
 800a3b0:	58024c08 	.word	0x58024c08
 800a3b4:	58024c00 	.word	0x58024c00
 800a3b8:	f407a5c2 	.word	0xf407a5c2
 800a3bc:	b5e8b5cd 	.word	0xb5e8b5cd
 800a3c0:	40023008 	.word	0x40023008
 800a3c4:	40023000 	.word	0x40023000
 800a3c8:	2a00      	cmp	r2, #0
 800a3ca:	d0de      	beq.n	800a38a <ai_platform_api_get_network_report+0x296>
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800a3d2:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
 800a3d6:	f105 0718 	add.w	r7, r5, #24
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	f104 0654 	add.w	r6, r4, #84	; 0x54
 800a3e0:	8662      	strh	r2, [r4, #50]	; 0x32
 800a3e2:	63a3      	str	r3, [r4, #56]	; 0x38
 800a3e4:	686b      	ldr	r3, [r5, #4]
 800a3e6:	4d80      	ldr	r5, [pc, #512]	; (800a5e8 <ai_platform_api_get_network_report+0x4f4>)
 800a3e8:	6723      	str	r3, [r4, #112]	; 0x70
 800a3ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a3ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a3f2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800a3f6:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 800a5f4 <ai_platform_api_get_network_report+0x500>
 800a3fa:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a3fe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a400:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a402:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a406:	e886 0003 	stmia.w	r6, {r0, r1}
 800a40a:	682b      	ldr	r3, [r5, #0]
 800a40c:	f023 0301 	bic.w	r3, r3, #1
 800a410:	602b      	str	r3, [r5, #0]
 800a412:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 800a416:	f8de 3000 	ldr.w	r3, [lr]
 800a41a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a41e:	195a      	adds	r2, r3, r5
 800a420:	2a01      	cmp	r2, #1
 800a422:	d966      	bls.n	800a4f2 <ai_platform_api_get_network_report+0x3fe>
 800a424:	f240 4249 	movw	r2, #1097	; 0x449
 800a428:	4293      	cmp	r3, r2
 800a42a:	d062      	beq.n	800a4f2 <ai_platform_api_get_network_report+0x3fe>
 800a42c:	4b6f      	ldr	r3, [pc, #444]	; (800a5ec <ai_platform_api_get_network_report+0x4f8>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a434:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a438:	f000 80c6 	beq.w	800a5c8 <ai_platform_api_get_network_report+0x4d4>
 800a43c:	4a6a      	ldr	r2, [pc, #424]	; (800a5e8 <ai_platform_api_get_network_report+0x4f4>)
 800a43e:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 800a442:	4b6b      	ldr	r3, [pc, #428]	; (800a5f0 <ai_platform_api_get_network_report+0x4fc>)
 800a444:	496b      	ldr	r1, [pc, #428]	; (800a5f4 <ai_platform_api_get_network_report+0x500>)
 800a446:	6123      	str	r3, [r4, #16]
 800a448:	6813      	ldr	r3, [r2, #0]
 800a44a:	f023 0301 	bic.w	r3, r3, #1
 800a44e:	6013      	str	r3, [r2, #0]
 800a450:	680b      	ldr	r3, [r1, #0]
 800a452:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a456:	181a      	adds	r2, r3, r0
 800a458:	2a01      	cmp	r2, #1
 800a45a:	f240 80a5 	bls.w	800a5a8 <ai_platform_api_get_network_report+0x4b4>
 800a45e:	f240 4249 	movw	r2, #1097	; 0x449
 800a462:	4293      	cmp	r3, r2
 800a464:	f000 80a0 	beq.w	800a5a8 <ai_platform_api_get_network_report+0x4b4>
 800a468:	4b60      	ldr	r3, [pc, #384]	; (800a5ec <ai_platform_api_get_network_report+0x4f8>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a470:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a474:	f000 8088 	beq.w	800a588 <ai_platform_api_get_network_report+0x494>
 800a478:	4a5b      	ldr	r2, [pc, #364]	; (800a5e8 <ai_platform_api_get_network_report+0x4f4>)
 800a47a:	f240 1305 	movw	r3, #261	; 0x105
 800a47e:	495d      	ldr	r1, [pc, #372]	; (800a5f4 <ai_platform_api_get_network_report+0x500>)
 800a480:	6163      	str	r3, [r4, #20]
 800a482:	6813      	ldr	r3, [r2, #0]
 800a484:	f023 0301 	bic.w	r3, r3, #1
 800a488:	6013      	str	r3, [r2, #0]
 800a48a:	680b      	ldr	r3, [r1, #0]
 800a48c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800a490:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a494:	185a      	adds	r2, r3, r1
 800a496:	2a01      	cmp	r2, #1
 800a498:	d967      	bls.n	800a56a <ai_platform_api_get_network_report+0x476>
 800a49a:	f240 4249 	movw	r2, #1097	; 0x449
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d063      	beq.n	800a56a <ai_platform_api_get_network_report+0x476>
 800a4a2:	4b52      	ldr	r3, [pc, #328]	; (800a5ec <ai_platform_api_get_network_report+0x4f8>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4aa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a4ae:	d04d      	beq.n	800a54c <ai_platform_api_get_network_report+0x458>
 800a4b0:	4a4d      	ldr	r2, [pc, #308]	; (800a5e8 <ai_platform_api_get_network_report+0x4f4>)
 800a4b2:	f240 1301 	movw	r3, #257	; 0x101
 800a4b6:	494f      	ldr	r1, [pc, #316]	; (800a5f4 <ai_platform_api_get_network_report+0x500>)
 800a4b8:	6263      	str	r3, [r4, #36]	; 0x24
 800a4ba:	6813      	ldr	r3, [r2, #0]
 800a4bc:	f023 0301 	bic.w	r3, r3, #1
 800a4c0:	6013      	str	r3, [r2, #0]
 800a4c2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800a4c6:	680b      	ldr	r3, [r1, #0]
 800a4c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4cc:	189a      	adds	r2, r3, r2
 800a4ce:	2a01      	cmp	r2, #1
 800a4d0:	d92d      	bls.n	800a52e <ai_platform_api_get_network_report+0x43a>
 800a4d2:	f240 4249 	movw	r2, #1097	; 0x449
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d029      	beq.n	800a52e <ai_platform_api_get_network_report+0x43a>
 800a4da:	4b44      	ldr	r3, [pc, #272]	; (800a5ec <ai_platform_api_get_network_report+0x4f8>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4e2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a4e6:	d013      	beq.n	800a510 <ai_platform_api_get_network_report+0x41c>
 800a4e8:	f240 4301 	movw	r3, #1025	; 0x401
 800a4ec:	2001      	movs	r0, #1
 800a4ee:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4f0:	e6bb      	b.n	800a26a <ai_platform_api_get_network_report+0x176>
 800a4f2:	4b41      	ldr	r3, [pc, #260]	; (800a5f8 <ai_platform_api_get_network_report+0x504>)
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	601a      	str	r2, [r3, #0]
 800a4fa:	680b      	ldr	r3, [r1, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d1fc      	bne.n	800a4fa <ai_platform_api_get_network_report+0x406>
 800a500:	4b3e      	ldr	r3, [pc, #248]	; (800a5fc <ai_platform_api_get_network_report+0x508>)
 800a502:	493f      	ldr	r1, [pc, #252]	; (800a600 <ai_platform_api_get_network_report+0x50c>)
 800a504:	4a3f      	ldr	r2, [pc, #252]	; (800a604 <ai_platform_api_get_network_report+0x510>)
 800a506:	6019      	str	r1, [r3, #0]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d096      	beq.n	800a43c <ai_platform_api_get_network_report+0x348>
 800a50e:	e7fe      	b.n	800a50e <ai_platform_api_get_network_report+0x41a>
 800a510:	4b3d      	ldr	r3, [pc, #244]	; (800a608 <ai_platform_api_get_network_report+0x514>)
 800a512:	2201      	movs	r2, #1
 800a514:	4619      	mov	r1, r3
 800a516:	601a      	str	r2, [r3, #0]
 800a518:	680b      	ldr	r3, [r1, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d1fc      	bne.n	800a518 <ai_platform_api_get_network_report+0x424>
 800a51e:	4b3b      	ldr	r3, [pc, #236]	; (800a60c <ai_platform_api_get_network_report+0x518>)
 800a520:	4937      	ldr	r1, [pc, #220]	; (800a600 <ai_platform_api_get_network_report+0x50c>)
 800a522:	4a38      	ldr	r2, [pc, #224]	; (800a604 <ai_platform_api_get_network_report+0x510>)
 800a524:	6019      	str	r1, [r3, #0]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4293      	cmp	r3, r2
 800a52a:	d0dd      	beq.n	800a4e8 <ai_platform_api_get_network_report+0x3f4>
 800a52c:	e7fe      	b.n	800a52c <ai_platform_api_get_network_report+0x438>
 800a52e:	4b32      	ldr	r3, [pc, #200]	; (800a5f8 <ai_platform_api_get_network_report+0x504>)
 800a530:	2201      	movs	r2, #1
 800a532:	4619      	mov	r1, r3
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	680b      	ldr	r3, [r1, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1fc      	bne.n	800a536 <ai_platform_api_get_network_report+0x442>
 800a53c:	4b2f      	ldr	r3, [pc, #188]	; (800a5fc <ai_platform_api_get_network_report+0x508>)
 800a53e:	4930      	ldr	r1, [pc, #192]	; (800a600 <ai_platform_api_get_network_report+0x50c>)
 800a540:	4a30      	ldr	r2, [pc, #192]	; (800a604 <ai_platform_api_get_network_report+0x510>)
 800a542:	6019      	str	r1, [r3, #0]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4293      	cmp	r3, r2
 800a548:	d0ce      	beq.n	800a4e8 <ai_platform_api_get_network_report+0x3f4>
 800a54a:	e7fe      	b.n	800a54a <ai_platform_api_get_network_report+0x456>
 800a54c:	4b2e      	ldr	r3, [pc, #184]	; (800a608 <ai_platform_api_get_network_report+0x514>)
 800a54e:	2201      	movs	r2, #1
 800a550:	4619      	mov	r1, r3
 800a552:	601a      	str	r2, [r3, #0]
 800a554:	680b      	ldr	r3, [r1, #0]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1fc      	bne.n	800a554 <ai_platform_api_get_network_report+0x460>
 800a55a:	4b2c      	ldr	r3, [pc, #176]	; (800a60c <ai_platform_api_get_network_report+0x518>)
 800a55c:	4928      	ldr	r1, [pc, #160]	; (800a600 <ai_platform_api_get_network_report+0x50c>)
 800a55e:	4a29      	ldr	r2, [pc, #164]	; (800a604 <ai_platform_api_get_network_report+0x510>)
 800a560:	6019      	str	r1, [r3, #0]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4293      	cmp	r3, r2
 800a566:	d0a3      	beq.n	800a4b0 <ai_platform_api_get_network_report+0x3bc>
 800a568:	e7fe      	b.n	800a568 <ai_platform_api_get_network_report+0x474>
 800a56a:	4b23      	ldr	r3, [pc, #140]	; (800a5f8 <ai_platform_api_get_network_report+0x504>)
 800a56c:	2201      	movs	r2, #1
 800a56e:	4619      	mov	r1, r3
 800a570:	601a      	str	r2, [r3, #0]
 800a572:	680b      	ldr	r3, [r1, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1fc      	bne.n	800a572 <ai_platform_api_get_network_report+0x47e>
 800a578:	4b20      	ldr	r3, [pc, #128]	; (800a5fc <ai_platform_api_get_network_report+0x508>)
 800a57a:	4921      	ldr	r1, [pc, #132]	; (800a600 <ai_platform_api_get_network_report+0x50c>)
 800a57c:	4a21      	ldr	r2, [pc, #132]	; (800a604 <ai_platform_api_get_network_report+0x510>)
 800a57e:	6019      	str	r1, [r3, #0]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4293      	cmp	r3, r2
 800a584:	d094      	beq.n	800a4b0 <ai_platform_api_get_network_report+0x3bc>
 800a586:	e7fe      	b.n	800a586 <ai_platform_api_get_network_report+0x492>
 800a588:	4b1f      	ldr	r3, [pc, #124]	; (800a608 <ai_platform_api_get_network_report+0x514>)
 800a58a:	2201      	movs	r2, #1
 800a58c:	4619      	mov	r1, r3
 800a58e:	601a      	str	r2, [r3, #0]
 800a590:	680b      	ldr	r3, [r1, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1fc      	bne.n	800a590 <ai_platform_api_get_network_report+0x49c>
 800a596:	4b1d      	ldr	r3, [pc, #116]	; (800a60c <ai_platform_api_get_network_report+0x518>)
 800a598:	4919      	ldr	r1, [pc, #100]	; (800a600 <ai_platform_api_get_network_report+0x50c>)
 800a59a:	4a1a      	ldr	r2, [pc, #104]	; (800a604 <ai_platform_api_get_network_report+0x510>)
 800a59c:	6019      	str	r1, [r3, #0]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	f43f af69 	beq.w	800a478 <ai_platform_api_get_network_report+0x384>
 800a5a6:	e7fe      	b.n	800a5a6 <ai_platform_api_get_network_report+0x4b2>
 800a5a8:	4b13      	ldr	r3, [pc, #76]	; (800a5f8 <ai_platform_api_get_network_report+0x504>)
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	601a      	str	r2, [r3, #0]
 800a5b0:	680b      	ldr	r3, [r1, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1fc      	bne.n	800a5b0 <ai_platform_api_get_network_report+0x4bc>
 800a5b6:	4b11      	ldr	r3, [pc, #68]	; (800a5fc <ai_platform_api_get_network_report+0x508>)
 800a5b8:	4911      	ldr	r1, [pc, #68]	; (800a600 <ai_platform_api_get_network_report+0x50c>)
 800a5ba:	4a12      	ldr	r2, [pc, #72]	; (800a604 <ai_platform_api_get_network_report+0x510>)
 800a5bc:	6019      	str	r1, [r3, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	f43f af59 	beq.w	800a478 <ai_platform_api_get_network_report+0x384>
 800a5c6:	e7fe      	b.n	800a5c6 <ai_platform_api_get_network_report+0x4d2>
 800a5c8:	4b0f      	ldr	r3, [pc, #60]	; (800a608 <ai_platform_api_get_network_report+0x514>)
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	601a      	str	r2, [r3, #0]
 800a5d0:	680b      	ldr	r3, [r1, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1fc      	bne.n	800a5d0 <ai_platform_api_get_network_report+0x4dc>
 800a5d6:	4b0d      	ldr	r3, [pc, #52]	; (800a60c <ai_platform_api_get_network_report+0x518>)
 800a5d8:	4909      	ldr	r1, [pc, #36]	; (800a600 <ai_platform_api_get_network_report+0x50c>)
 800a5da:	4a0a      	ldr	r2, [pc, #40]	; (800a604 <ai_platform_api_get_network_report+0x510>)
 800a5dc:	6019      	str	r1, [r3, #0]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	f43f af2b 	beq.w	800a43c <ai_platform_api_get_network_report+0x348>
 800a5e6:	e7fe      	b.n	800a5e6 <ai_platform_api_get_network_report+0x4f2>
 800a5e8:	e0002000 	.word	0xe0002000
 800a5ec:	5c001000 	.word	0x5c001000
 800a5f0:	08012b58 	.word	0x08012b58
 800a5f4:	e0042000 	.word	0xe0042000
 800a5f8:	40023008 	.word	0x40023008
 800a5fc:	40023000 	.word	0x40023000
 800a600:	f407a5c2 	.word	0xf407a5c2
 800a604:	b5e8b5cd 	.word	0xb5e8b5cd
 800a608:	58024c08 	.word	0x58024c08
 800a60c:	58024c00 	.word	0x58024c00

0800a610 <ai_platform_network_create>:
 800a610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a612:	4d36      	ldr	r5, [pc, #216]	; (800a6ec <ai_platform_network_create+0xdc>)
 800a614:	b083      	sub	sp, #12
 800a616:	4e36      	ldr	r6, [pc, #216]	; (800a6f0 <ai_platform_network_create+0xe0>)
 800a618:	6829      	ldr	r1, [r5, #0]
 800a61a:	f89d 7020 	ldrb.w	r7, [sp, #32]
 800a61e:	f021 0101 	bic.w	r1, r1, #1
 800a622:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800a626:	6029      	str	r1, [r5, #0]
 800a628:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 800a62c:	6831      	ldr	r1, [r6, #0]
 800a62e:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800a632:	194d      	adds	r5, r1, r5
 800a634:	2d01      	cmp	r5, #1
 800a636:	d92f      	bls.n	800a698 <ai_platform_network_create+0x88>
 800a638:	f240 4549 	movw	r5, #1097	; 0x449
 800a63c:	42a9      	cmp	r1, r5
 800a63e:	d02b      	beq.n	800a698 <ai_platform_network_create+0x88>
 800a640:	492c      	ldr	r1, [pc, #176]	; (800a6f4 <ai_platform_network_create+0xe4>)
 800a642:	6809      	ldr	r1, [r1, #0]
 800a644:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800a648:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800a64c:	d015      	beq.n	800a67a <ai_platform_network_create+0x6a>
 800a64e:	2800      	cmp	r0, #0
 800a650:	d031      	beq.n	800a6b6 <ai_platform_network_create+0xa6>
 800a652:	461e      	mov	r6, r3
 800a654:	4613      	mov	r3, r2
 800a656:	4a28      	ldr	r2, [pc, #160]	; (800a6f8 <ai_platform_network_create+0xe8>)
 800a658:	4605      	mov	r5, r0
 800a65a:	601a      	str	r2, [r3, #0]
 800a65c:	6003      	str	r3, [r0, #0]
 800a65e:	f000 fd29 	bl	800b0b4 <core_init>
 800a662:	2800      	cmp	r0, #0
 800a664:	d02b      	beq.n	800a6be <ai_platform_network_create+0xae>
 800a666:	0223      	lsls	r3, r4, #8
 800a668:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a66c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800a670:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 800a674:	d92e      	bls.n	800a6d4 <ai_platform_network_create+0xc4>
 800a676:	2301      	movs	r3, #1
 800a678:	e022      	b.n	800a6c0 <ai_platform_network_create+0xb0>
 800a67a:	4920      	ldr	r1, [pc, #128]	; (800a6fc <ai_platform_network_create+0xec>)
 800a67c:	2501      	movs	r5, #1
 800a67e:	460e      	mov	r6, r1
 800a680:	600d      	str	r5, [r1, #0]
 800a682:	6831      	ldr	r1, [r6, #0]
 800a684:	2900      	cmp	r1, #0
 800a686:	d1fc      	bne.n	800a682 <ai_platform_network_create+0x72>
 800a688:	491d      	ldr	r1, [pc, #116]	; (800a700 <ai_platform_network_create+0xf0>)
 800a68a:	4e1e      	ldr	r6, [pc, #120]	; (800a704 <ai_platform_network_create+0xf4>)
 800a68c:	4d1e      	ldr	r5, [pc, #120]	; (800a708 <ai_platform_network_create+0xf8>)
 800a68e:	600e      	str	r6, [r1, #0]
 800a690:	6809      	ldr	r1, [r1, #0]
 800a692:	42a9      	cmp	r1, r5
 800a694:	d0db      	beq.n	800a64e <ai_platform_network_create+0x3e>
 800a696:	e7fe      	b.n	800a696 <ai_platform_network_create+0x86>
 800a698:	491c      	ldr	r1, [pc, #112]	; (800a70c <ai_platform_network_create+0xfc>)
 800a69a:	2501      	movs	r5, #1
 800a69c:	460e      	mov	r6, r1
 800a69e:	600d      	str	r5, [r1, #0]
 800a6a0:	6831      	ldr	r1, [r6, #0]
 800a6a2:	2900      	cmp	r1, #0
 800a6a4:	d1fc      	bne.n	800a6a0 <ai_platform_network_create+0x90>
 800a6a6:	491a      	ldr	r1, [pc, #104]	; (800a710 <ai_platform_network_create+0x100>)
 800a6a8:	4e16      	ldr	r6, [pc, #88]	; (800a704 <ai_platform_network_create+0xf4>)
 800a6aa:	4d17      	ldr	r5, [pc, #92]	; (800a708 <ai_platform_network_create+0xf8>)
 800a6ac:	600e      	str	r6, [r1, #0]
 800a6ae:	6809      	ldr	r1, [r1, #0]
 800a6b0:	42a9      	cmp	r1, r5
 800a6b2:	d0cc      	beq.n	800a64e <ai_platform_network_create+0x3e>
 800a6b4:	e7fe      	b.n	800a6b4 <ai_platform_network_create+0xa4>
 800a6b6:	f241 0010 	movw	r0, #4112	; 0x1010
 800a6ba:	b003      	add	sp, #12
 800a6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6be:	2330      	movs	r3, #48	; 0x30
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	2210      	movs	r2, #16
 800a6c4:	6029      	str	r1, [r5, #0]
 800a6c6:	2000      	movs	r0, #0
 800a6c8:	f363 0007 	bfi	r0, r3, #0, #8
 800a6cc:	f362 201f 	bfi	r0, r2, #8, #24
 800a6d0:	b003      	add	sp, #12
 800a6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6d4:	4b0f      	ldr	r3, [pc, #60]	; (800a714 <ai_platform_network_create+0x104>)
 800a6d6:	a802      	add	r0, sp, #8
 800a6d8:	f840 3d04 	str.w	r3, [r0, #-4]!
 800a6dc:	f002 fc54 	bl	800cf88 <ai_check_custom_types>
 800a6e0:	b110      	cbz	r0, 800a6e8 <ai_platform_network_create+0xd8>
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	e7ee      	b.n	800a6c6 <ai_platform_network_create+0xb6>
 800a6e8:	2302      	movs	r3, #2
 800a6ea:	e7e9      	b.n	800a6c0 <ai_platform_network_create+0xb0>
 800a6ec:	e0002000 	.word	0xe0002000
 800a6f0:	e0042000 	.word	0xe0042000
 800a6f4:	5c001000 	.word	0x5c001000
 800a6f8:	a1c00100 	.word	0xa1c00100
 800a6fc:	58024c08 	.word	0x58024c08
 800a700:	58024c00 	.word	0x58024c00
 800a704:	f407a5c2 	.word	0xf407a5c2
 800a708:	b5e8b5cd 	.word	0xb5e8b5cd
 800a70c:	40023008 	.word	0x40023008
 800a710:	40023000 	.word	0x40023000
 800a714:	84048403 	.word	0x84048403

0800a718 <ai_platform_network_destroy>:
 800a718:	b118      	cbz	r0, 800a722 <ai_platform_network_destroy+0xa>
 800a71a:	4b3a      	ldr	r3, [pc, #232]	; (800a804 <ai_platform_network_destroy+0xec>)
 800a71c:	6802      	ldr	r2, [r0, #0]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d037      	beq.n	800a792 <ai_platform_network_destroy+0x7a>
 800a722:	4a39      	ldr	r2, [pc, #228]	; (800a808 <ai_platform_network_destroy+0xf0>)
 800a724:	4939      	ldr	r1, [pc, #228]	; (800a80c <ai_platform_network_destroy+0xf4>)
 800a726:	6813      	ldr	r3, [r2, #0]
 800a728:	f023 0301 	bic.w	r3, r3, #1
 800a72c:	6013      	str	r3, [r2, #0]
 800a72e:	680b      	ldr	r3, [r1, #0]
 800a730:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800a734:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a738:	185a      	adds	r2, r3, r1
 800a73a:	2a01      	cmp	r2, #1
 800a73c:	d90b      	bls.n	800a756 <ai_platform_network_destroy+0x3e>
 800a73e:	f240 4249 	movw	r2, #1097	; 0x449
 800a742:	4293      	cmp	r3, r2
 800a744:	d007      	beq.n	800a756 <ai_platform_network_destroy+0x3e>
 800a746:	4b32      	ldr	r3, [pc, #200]	; (800a810 <ai_platform_network_destroy+0xf8>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a74e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a752:	d00f      	beq.n	800a774 <ai_platform_network_destroy+0x5c>
 800a754:	4770      	bx	lr
 800a756:	4b2f      	ldr	r3, [pc, #188]	; (800a814 <ai_platform_network_destroy+0xfc>)
 800a758:	2201      	movs	r2, #1
 800a75a:	4619      	mov	r1, r3
 800a75c:	601a      	str	r2, [r3, #0]
 800a75e:	680b      	ldr	r3, [r1, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d1fc      	bne.n	800a75e <ai_platform_network_destroy+0x46>
 800a764:	4b2c      	ldr	r3, [pc, #176]	; (800a818 <ai_platform_network_destroy+0x100>)
 800a766:	492d      	ldr	r1, [pc, #180]	; (800a81c <ai_platform_network_destroy+0x104>)
 800a768:	4a2d      	ldr	r2, [pc, #180]	; (800a820 <ai_platform_network_destroy+0x108>)
 800a76a:	6019      	str	r1, [r3, #0]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4293      	cmp	r3, r2
 800a770:	d0f0      	beq.n	800a754 <ai_platform_network_destroy+0x3c>
 800a772:	e7fe      	b.n	800a772 <ai_platform_network_destroy+0x5a>
 800a774:	4b2b      	ldr	r3, [pc, #172]	; (800a824 <ai_platform_network_destroy+0x10c>)
 800a776:	2201      	movs	r2, #1
 800a778:	4619      	mov	r1, r3
 800a77a:	601a      	str	r2, [r3, #0]
 800a77c:	680b      	ldr	r3, [r1, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1fc      	bne.n	800a77c <ai_platform_network_destroy+0x64>
 800a782:	4b29      	ldr	r3, [pc, #164]	; (800a828 <ai_platform_network_destroy+0x110>)
 800a784:	4925      	ldr	r1, [pc, #148]	; (800a81c <ai_platform_network_destroy+0x104>)
 800a786:	4a26      	ldr	r2, [pc, #152]	; (800a820 <ai_platform_network_destroy+0x108>)
 800a788:	6019      	str	r1, [r3, #0]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d0e1      	beq.n	800a754 <ai_platform_network_destroy+0x3c>
 800a790:	e7fe      	b.n	800a790 <ai_platform_network_destroy+0x78>
 800a792:	4a1d      	ldr	r2, [pc, #116]	; (800a808 <ai_platform_network_destroy+0xf0>)
 800a794:	491d      	ldr	r1, [pc, #116]	; (800a80c <ai_platform_network_destroy+0xf4>)
 800a796:	6813      	ldr	r3, [r2, #0]
 800a798:	f023 0301 	bic.w	r3, r3, #1
 800a79c:	6013      	str	r3, [r2, #0]
 800a79e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800a7a2:	680b      	ldr	r3, [r1, #0]
 800a7a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a7a8:	189a      	adds	r2, r3, r2
 800a7aa:	2a01      	cmp	r2, #1
 800a7ac:	d90c      	bls.n	800a7c8 <ai_platform_network_destroy+0xb0>
 800a7ae:	f240 4249 	movw	r2, #1097	; 0x449
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d008      	beq.n	800a7c8 <ai_platform_network_destroy+0xb0>
 800a7b6:	4b16      	ldr	r3, [pc, #88]	; (800a810 <ai_platform_network_destroy+0xf8>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a7be:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a7c2:	d010      	beq.n	800a7e6 <ai_platform_network_destroy+0xce>
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	4770      	bx	lr
 800a7c8:	4b12      	ldr	r3, [pc, #72]	; (800a814 <ai_platform_network_destroy+0xfc>)
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	601a      	str	r2, [r3, #0]
 800a7d0:	680b      	ldr	r3, [r1, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d1fc      	bne.n	800a7d0 <ai_platform_network_destroy+0xb8>
 800a7d6:	4b10      	ldr	r3, [pc, #64]	; (800a818 <ai_platform_network_destroy+0x100>)
 800a7d8:	4910      	ldr	r1, [pc, #64]	; (800a81c <ai_platform_network_destroy+0x104>)
 800a7da:	4a11      	ldr	r2, [pc, #68]	; (800a820 <ai_platform_network_destroy+0x108>)
 800a7dc:	6019      	str	r1, [r3, #0]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d0ef      	beq.n	800a7c4 <ai_platform_network_destroy+0xac>
 800a7e4:	e7fe      	b.n	800a7e4 <ai_platform_network_destroy+0xcc>
 800a7e6:	4b0f      	ldr	r3, [pc, #60]	; (800a824 <ai_platform_network_destroy+0x10c>)
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	601a      	str	r2, [r3, #0]
 800a7ee:	680b      	ldr	r3, [r1, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d1fc      	bne.n	800a7ee <ai_platform_network_destroy+0xd6>
 800a7f4:	4b0c      	ldr	r3, [pc, #48]	; (800a828 <ai_platform_network_destroy+0x110>)
 800a7f6:	4909      	ldr	r1, [pc, #36]	; (800a81c <ai_platform_network_destroy+0x104>)
 800a7f8:	4a09      	ldr	r2, [pc, #36]	; (800a820 <ai_platform_network_destroy+0x108>)
 800a7fa:	6019      	str	r1, [r3, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d0e0      	beq.n	800a7c4 <ai_platform_network_destroy+0xac>
 800a802:	e7fe      	b.n	800a802 <ai_platform_network_destroy+0xea>
 800a804:	a1c00100 	.word	0xa1c00100
 800a808:	e0002000 	.word	0xe0002000
 800a80c:	e0042000 	.word	0xe0042000
 800a810:	5c001000 	.word	0x5c001000
 800a814:	40023008 	.word	0x40023008
 800a818:	40023000 	.word	0x40023000
 800a81c:	f407a5c2 	.word	0xf407a5c2
 800a820:	b5e8b5cd 	.word	0xb5e8b5cd
 800a824:	58024c08 	.word	0x58024c08
 800a828:	58024c00 	.word	0x58024c00

0800a82c <ai_platform_network_init>:
 800a82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82e:	2800      	cmp	r0, #0
 800a830:	d05e      	beq.n	800a8f0 <ai_platform_network_init+0xc4>
 800a832:	4b68      	ldr	r3, [pc, #416]	; (800a9d4 <ai_platform_network_init+0x1a8>)
 800a834:	6802      	ldr	r2, [r0, #0]
 800a836:	429a      	cmp	r2, r3
 800a838:	d15a      	bne.n	800a8f0 <ai_platform_network_init+0xc4>
 800a83a:	4a67      	ldr	r2, [pc, #412]	; (800a9d8 <ai_platform_network_init+0x1ac>)
 800a83c:	4c67      	ldr	r4, [pc, #412]	; (800a9dc <ai_platform_network_init+0x1b0>)
 800a83e:	6813      	ldr	r3, [r2, #0]
 800a840:	f023 0301 	bic.w	r3, r3, #1
 800a844:	6013      	str	r3, [r2, #0]
 800a846:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a850:	189a      	adds	r2, r3, r2
 800a852:	2a01      	cmp	r2, #1
 800a854:	d93d      	bls.n	800a8d2 <ai_platform_network_init+0xa6>
 800a856:	f240 4249 	movw	r2, #1097	; 0x449
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d039      	beq.n	800a8d2 <ai_platform_network_init+0xa6>
 800a85e:	4b60      	ldr	r3, [pc, #384]	; (800a9e0 <ai_platform_network_init+0x1b4>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a866:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a86a:	d06b      	beq.n	800a944 <ai_platform_network_init+0x118>
 800a86c:	4605      	mov	r5, r0
 800a86e:	460c      	mov	r4, r1
 800a870:	2900      	cmp	r1, #0
 800a872:	f000 80a8 	beq.w	800a9c6 <ai_platform_network_init+0x19a>
 800a876:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 800a878:	690e      	ldr	r6, [r1, #16]
 800a87a:	2f00      	cmp	r7, #0
 800a87c:	f000 8092 	beq.w	800a9a4 <ai_platform_network_init+0x178>
 800a880:	2e00      	cmp	r6, #0
 800a882:	d07d      	beq.n	800a980 <ai_platform_network_init+0x154>
 800a884:	f104 0718 	add.w	r7, r4, #24
 800a888:	f105 0c18 	add.w	ip, r5, #24
 800a88c:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800a890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a892:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a896:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a89a:	2403      	movs	r4, #3
 800a89c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a8a0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a8a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a8a4:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a8a8:	e886 0003 	stmia.w	r6, {r0, r1}
 800a8ac:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800a8ae:	60ec      	str	r4, [r5, #12]
 800a8b0:	b16a      	cbz	r2, 800a8ce <ai_platform_network_init+0xa2>
 800a8b2:	68d3      	ldr	r3, [r2, #12]
 800a8b4:	6095      	str	r5, [r2, #8]
 800a8b6:	b153      	cbz	r3, 800a8ce <ai_platform_network_init+0xa2>
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d104      	bne.n	800a8c6 <ai_platform_network_init+0x9a>
 800a8bc:	e007      	b.n	800a8ce <ai_platform_network_init+0xa2>
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	d004      	beq.n	800a8ce <ai_platform_network_init+0xa2>
 800a8c4:	b11a      	cbz	r2, 800a8ce <ai_platform_network_init+0xa2>
 800a8c6:	68da      	ldr	r2, [r3, #12]
 800a8c8:	609d      	str	r5, [r3, #8]
 800a8ca:	2a00      	cmp	r2, #0
 800a8cc:	d1f7      	bne.n	800a8be <ai_platform_network_init+0x92>
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8d2:	4b44      	ldr	r3, [pc, #272]	; (800a9e4 <ai_platform_network_init+0x1b8>)
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	461c      	mov	r4, r3
 800a8d8:	601a      	str	r2, [r3, #0]
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d1fc      	bne.n	800a8da <ai_platform_network_init+0xae>
 800a8e0:	4b41      	ldr	r3, [pc, #260]	; (800a9e8 <ai_platform_network_init+0x1bc>)
 800a8e2:	4c42      	ldr	r4, [pc, #264]	; (800a9ec <ai_platform_network_init+0x1c0>)
 800a8e4:	4a42      	ldr	r2, [pc, #264]	; (800a9f0 <ai_platform_network_init+0x1c4>)
 800a8e6:	601c      	str	r4, [r3, #0]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d0be      	beq.n	800a86c <ai_platform_network_init+0x40>
 800a8ee:	e7fe      	b.n	800a8ee <ai_platform_network_init+0xc2>
 800a8f0:	4a39      	ldr	r2, [pc, #228]	; (800a9d8 <ai_platform_network_init+0x1ac>)
 800a8f2:	493a      	ldr	r1, [pc, #232]	; (800a9dc <ai_platform_network_init+0x1b0>)
 800a8f4:	6813      	ldr	r3, [r2, #0]
 800a8f6:	f023 0301 	bic.w	r3, r3, #1
 800a8fa:	6013      	str	r3, [r2, #0]
 800a8fc:	680b      	ldr	r3, [r1, #0]
 800a8fe:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800a902:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a906:	185a      	adds	r2, r3, r1
 800a908:	2a01      	cmp	r2, #1
 800a90a:	d90c      	bls.n	800a926 <ai_platform_network_init+0xfa>
 800a90c:	f240 4249 	movw	r2, #1097	; 0x449
 800a910:	4293      	cmp	r3, r2
 800a912:	d008      	beq.n	800a926 <ai_platform_network_init+0xfa>
 800a914:	4b32      	ldr	r3, [pc, #200]	; (800a9e0 <ai_platform_network_init+0x1b4>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a91c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a920:	d01f      	beq.n	800a962 <ai_platform_network_init+0x136>
 800a922:	2000      	movs	r0, #0
 800a924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a926:	4b2f      	ldr	r3, [pc, #188]	; (800a9e4 <ai_platform_network_init+0x1b8>)
 800a928:	2201      	movs	r2, #1
 800a92a:	4619      	mov	r1, r3
 800a92c:	601a      	str	r2, [r3, #0]
 800a92e:	680b      	ldr	r3, [r1, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1fc      	bne.n	800a92e <ai_platform_network_init+0x102>
 800a934:	4b2c      	ldr	r3, [pc, #176]	; (800a9e8 <ai_platform_network_init+0x1bc>)
 800a936:	492d      	ldr	r1, [pc, #180]	; (800a9ec <ai_platform_network_init+0x1c0>)
 800a938:	4a2d      	ldr	r2, [pc, #180]	; (800a9f0 <ai_platform_network_init+0x1c4>)
 800a93a:	6019      	str	r1, [r3, #0]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4293      	cmp	r3, r2
 800a940:	d0ef      	beq.n	800a922 <ai_platform_network_init+0xf6>
 800a942:	e7fe      	b.n	800a942 <ai_platform_network_init+0x116>
 800a944:	4b2b      	ldr	r3, [pc, #172]	; (800a9f4 <ai_platform_network_init+0x1c8>)
 800a946:	2201      	movs	r2, #1
 800a948:	461c      	mov	r4, r3
 800a94a:	601a      	str	r2, [r3, #0]
 800a94c:	6823      	ldr	r3, [r4, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1fc      	bne.n	800a94c <ai_platform_network_init+0x120>
 800a952:	4b29      	ldr	r3, [pc, #164]	; (800a9f8 <ai_platform_network_init+0x1cc>)
 800a954:	4c25      	ldr	r4, [pc, #148]	; (800a9ec <ai_platform_network_init+0x1c0>)
 800a956:	4a26      	ldr	r2, [pc, #152]	; (800a9f0 <ai_platform_network_init+0x1c4>)
 800a958:	601c      	str	r4, [r3, #0]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d085      	beq.n	800a86c <ai_platform_network_init+0x40>
 800a960:	e7fe      	b.n	800a960 <ai_platform_network_init+0x134>
 800a962:	4b24      	ldr	r3, [pc, #144]	; (800a9f4 <ai_platform_network_init+0x1c8>)
 800a964:	2201      	movs	r2, #1
 800a966:	4619      	mov	r1, r3
 800a968:	601a      	str	r2, [r3, #0]
 800a96a:	680b      	ldr	r3, [r1, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d1fc      	bne.n	800a96a <ai_platform_network_init+0x13e>
 800a970:	4b21      	ldr	r3, [pc, #132]	; (800a9f8 <ai_platform_network_init+0x1cc>)
 800a972:	491e      	ldr	r1, [pc, #120]	; (800a9ec <ai_platform_network_init+0x1c0>)
 800a974:	4a1e      	ldr	r2, [pc, #120]	; (800a9f0 <ai_platform_network_init+0x1c4>)
 800a976:	6019      	str	r1, [r3, #0]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d0d1      	beq.n	800a922 <ai_platform_network_init+0xf6>
 800a97e:	e7fe      	b.n	800a97e <ai_platform_network_init+0x152>
 800a980:	8921      	ldrh	r1, [r4, #8]
 800a982:	88e2      	ldrh	r2, [r4, #6]
 800a984:	68e3      	ldr	r3, [r4, #12]
 800a986:	fb02 f201 	mul.w	r2, r2, r1
 800a98a:	fb03 f302 	mul.w	r3, r3, r2
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f43f af78 	beq.w	800a884 <ai_platform_network_init+0x58>
 800a994:	f105 0010 	add.w	r0, r5, #16
 800a998:	2212      	movs	r2, #18
 800a99a:	2110      	movs	r1, #16
 800a99c:	f000 fb92 	bl	800b0c4 <core_set_error>
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9a4:	8c09      	ldrh	r1, [r1, #32]
 800a9a6:	8be2      	ldrh	r2, [r4, #30]
 800a9a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9aa:	fb02 f201 	mul.w	r2, r2, r1
 800a9ae:	fb03 f302 	mul.w	r3, r3, r2
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f43f af64 	beq.w	800a880 <ai_platform_network_init+0x54>
 800a9b8:	2213      	movs	r2, #19
 800a9ba:	2110      	movs	r1, #16
 800a9bc:	3010      	adds	r0, #16
 800a9be:	f000 fb81 	bl	800b0c4 <core_set_error>
 800a9c2:	4638      	mov	r0, r7
 800a9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9c6:	2211      	movs	r2, #17
 800a9c8:	2110      	movs	r1, #16
 800a9ca:	3010      	adds	r0, #16
 800a9cc:	f000 fb7a 	bl	800b0c4 <core_set_error>
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9d4:	a1c00100 	.word	0xa1c00100
 800a9d8:	e0002000 	.word	0xe0002000
 800a9dc:	e0042000 	.word	0xe0042000
 800a9e0:	5c001000 	.word	0x5c001000
 800a9e4:	40023008 	.word	0x40023008
 800a9e8:	40023000 	.word	0x40023000
 800a9ec:	f407a5c2 	.word	0xf407a5c2
 800a9f0:	b5e8b5cd 	.word	0xb5e8b5cd
 800a9f4:	58024c08 	.word	0x58024c08
 800a9f8:	58024c00 	.word	0x58024c00

0800a9fc <ai_platform_network_post_init>:
 800a9fc:	b538      	push	{r3, r4, r5, lr}
 800a9fe:	b118      	cbz	r0, 800aa08 <ai_platform_network_post_init+0xc>
 800aa00:	4b4a      	ldr	r3, [pc, #296]	; (800ab2c <ai_platform_network_post_init+0x130>)
 800aa02:	6802      	ldr	r2, [r0, #0]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d029      	beq.n	800aa5c <ai_platform_network_post_init+0x60>
 800aa08:	4a49      	ldr	r2, [pc, #292]	; (800ab30 <ai_platform_network_post_init+0x134>)
 800aa0a:	494a      	ldr	r1, [pc, #296]	; (800ab34 <ai_platform_network_post_init+0x138>)
 800aa0c:	6813      	ldr	r3, [r2, #0]
 800aa0e:	f023 0301 	bic.w	r3, r3, #1
 800aa12:	6013      	str	r3, [r2, #0]
 800aa14:	680b      	ldr	r3, [r1, #0]
 800aa16:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800aa1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa1e:	185a      	adds	r2, r3, r1
 800aa20:	2a01      	cmp	r2, #1
 800aa22:	d90c      	bls.n	800aa3e <ai_platform_network_post_init+0x42>
 800aa24:	f240 4249 	movw	r2, #1097	; 0x449
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d008      	beq.n	800aa3e <ai_platform_network_post_init+0x42>
 800aa2c:	4b42      	ldr	r3, [pc, #264]	; (800ab38 <ai_platform_network_post_init+0x13c>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa34:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800aa38:	d044      	beq.n	800aac4 <ai_platform_network_post_init+0xc8>
 800aa3a:	2000      	movs	r0, #0
 800aa3c:	bd38      	pop	{r3, r4, r5, pc}
 800aa3e:	4b3f      	ldr	r3, [pc, #252]	; (800ab3c <ai_platform_network_post_init+0x140>)
 800aa40:	2201      	movs	r2, #1
 800aa42:	4619      	mov	r1, r3
 800aa44:	601a      	str	r2, [r3, #0]
 800aa46:	680b      	ldr	r3, [r1, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1fc      	bne.n	800aa46 <ai_platform_network_post_init+0x4a>
 800aa4c:	4b3c      	ldr	r3, [pc, #240]	; (800ab40 <ai_platform_network_post_init+0x144>)
 800aa4e:	493d      	ldr	r1, [pc, #244]	; (800ab44 <ai_platform_network_post_init+0x148>)
 800aa50:	4a3d      	ldr	r2, [pc, #244]	; (800ab48 <ai_platform_network_post_init+0x14c>)
 800aa52:	6019      	str	r1, [r3, #0]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d0ef      	beq.n	800aa3a <ai_platform_network_post_init+0x3e>
 800aa5a:	e7fe      	b.n	800aa5a <ai_platform_network_post_init+0x5e>
 800aa5c:	4a34      	ldr	r2, [pc, #208]	; (800ab30 <ai_platform_network_post_init+0x134>)
 800aa5e:	4935      	ldr	r1, [pc, #212]	; (800ab34 <ai_platform_network_post_init+0x138>)
 800aa60:	6813      	ldr	r3, [r2, #0]
 800aa62:	f023 0301 	bic.w	r3, r3, #1
 800aa66:	6013      	str	r3, [r2, #0]
 800aa68:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800aa6c:	680b      	ldr	r3, [r1, #0]
 800aa6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa72:	189a      	adds	r2, r3, r2
 800aa74:	2a01      	cmp	r2, #1
 800aa76:	d94a      	bls.n	800ab0e <ai_platform_network_post_init+0x112>
 800aa78:	f240 4249 	movw	r2, #1097	; 0x449
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d046      	beq.n	800ab0e <ai_platform_network_post_init+0x112>
 800aa80:	4b2d      	ldr	r3, [pc, #180]	; (800ab38 <ai_platform_network_post_init+0x13c>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa88:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800aa8c:	d030      	beq.n	800aaf0 <ai_platform_network_post_init+0xf4>
 800aa8e:	68c3      	ldr	r3, [r0, #12]
 800aa90:	4604      	mov	r4, r0
 800aa92:	f013 0502 	ands.w	r5, r3, #2
 800aa96:	d024      	beq.n	800aae2 <ai_platform_network_post_init+0xe6>
 800aa98:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800aa9a:	b18b      	cbz	r3, 800aac0 <ai_platform_network_post_init+0xc4>
 800aa9c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800aa9e:	b90d      	cbnz	r5, 800aaa4 <ai_platform_network_post_init+0xa8>
 800aaa0:	e00e      	b.n	800aac0 <ai_platform_network_post_init+0xc4>
 800aaa2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aaa4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800aaa6:	4629      	mov	r1, r5
 800aaa8:	2000      	movs	r0, #0
 800aaaa:	4798      	blx	r3
 800aaac:	68ea      	ldr	r2, [r5, #12]
 800aaae:	1b53      	subs	r3, r2, r5
 800aab0:	4615      	mov	r5, r2
 800aab2:	bf18      	it	ne
 800aab4:	2301      	movne	r3, #1
 800aab6:	2a00      	cmp	r2, #0
 800aab8:	bf08      	it	eq
 800aaba:	2300      	moveq	r3, #0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1f0      	bne.n	800aaa2 <ai_platform_network_post_init+0xa6>
 800aac0:	2001      	movs	r0, #1
 800aac2:	bd38      	pop	{r3, r4, r5, pc}
 800aac4:	4b21      	ldr	r3, [pc, #132]	; (800ab4c <ai_platform_network_post_init+0x150>)
 800aac6:	2201      	movs	r2, #1
 800aac8:	4619      	mov	r1, r3
 800aaca:	601a      	str	r2, [r3, #0]
 800aacc:	680b      	ldr	r3, [r1, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1fc      	bne.n	800aacc <ai_platform_network_post_init+0xd0>
 800aad2:	4b1f      	ldr	r3, [pc, #124]	; (800ab50 <ai_platform_network_post_init+0x154>)
 800aad4:	491b      	ldr	r1, [pc, #108]	; (800ab44 <ai_platform_network_post_init+0x148>)
 800aad6:	4a1c      	ldr	r2, [pc, #112]	; (800ab48 <ai_platform_network_post_init+0x14c>)
 800aad8:	6019      	str	r1, [r3, #0]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4293      	cmp	r3, r2
 800aade:	d0ac      	beq.n	800aa3a <ai_platform_network_post_init+0x3e>
 800aae0:	e7fe      	b.n	800aae0 <ai_platform_network_post_init+0xe4>
 800aae2:	2210      	movs	r2, #16
 800aae4:	2111      	movs	r1, #17
 800aae6:	3010      	adds	r0, #16
 800aae8:	f000 faec 	bl	800b0c4 <core_set_error>
 800aaec:	4628      	mov	r0, r5
 800aaee:	bd38      	pop	{r3, r4, r5, pc}
 800aaf0:	4b16      	ldr	r3, [pc, #88]	; (800ab4c <ai_platform_network_post_init+0x150>)
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	601a      	str	r2, [r3, #0]
 800aaf8:	680b      	ldr	r3, [r1, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1fc      	bne.n	800aaf8 <ai_platform_network_post_init+0xfc>
 800aafe:	4b14      	ldr	r3, [pc, #80]	; (800ab50 <ai_platform_network_post_init+0x154>)
 800ab00:	4910      	ldr	r1, [pc, #64]	; (800ab44 <ai_platform_network_post_init+0x148>)
 800ab02:	4a11      	ldr	r2, [pc, #68]	; (800ab48 <ai_platform_network_post_init+0x14c>)
 800ab04:	6019      	str	r1, [r3, #0]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d0c0      	beq.n	800aa8e <ai_platform_network_post_init+0x92>
 800ab0c:	e7fe      	b.n	800ab0c <ai_platform_network_post_init+0x110>
 800ab0e:	4b0b      	ldr	r3, [pc, #44]	; (800ab3c <ai_platform_network_post_init+0x140>)
 800ab10:	2201      	movs	r2, #1
 800ab12:	4619      	mov	r1, r3
 800ab14:	601a      	str	r2, [r3, #0]
 800ab16:	680b      	ldr	r3, [r1, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d1fc      	bne.n	800ab16 <ai_platform_network_post_init+0x11a>
 800ab1c:	4b08      	ldr	r3, [pc, #32]	; (800ab40 <ai_platform_network_post_init+0x144>)
 800ab1e:	4909      	ldr	r1, [pc, #36]	; (800ab44 <ai_platform_network_post_init+0x148>)
 800ab20:	4a09      	ldr	r2, [pc, #36]	; (800ab48 <ai_platform_network_post_init+0x14c>)
 800ab22:	6019      	str	r1, [r3, #0]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d0b1      	beq.n	800aa8e <ai_platform_network_post_init+0x92>
 800ab2a:	e7fe      	b.n	800ab2a <ai_platform_network_post_init+0x12e>
 800ab2c:	a1c00100 	.word	0xa1c00100
 800ab30:	e0002000 	.word	0xe0002000
 800ab34:	e0042000 	.word	0xe0042000
 800ab38:	5c001000 	.word	0x5c001000
 800ab3c:	40023008 	.word	0x40023008
 800ab40:	40023000 	.word	0x40023000
 800ab44:	f407a5c2 	.word	0xf407a5c2
 800ab48:	b5e8b5cd 	.word	0xb5e8b5cd
 800ab4c:	58024c08 	.word	0x58024c08
 800ab50:	58024c00 	.word	0x58024c00

0800ab54 <ai_platform_network_process>:
 800ab54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab58:	4692      	mov	sl, r2
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	b120      	cbz	r0, 800ab6a <ai_platform_network_process+0x16>
 800ab60:	4b86      	ldr	r3, [pc, #536]	; (800ad7c <ai_platform_network_process+0x228>)
 800ab62:	6802      	ldr	r2, [r0, #0]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	bf18      	it	ne
 800ab68:	2400      	movne	r4, #0
 800ab6a:	4a85      	ldr	r2, [pc, #532]	; (800ad80 <ai_platform_network_process+0x22c>)
 800ab6c:	4885      	ldr	r0, [pc, #532]	; (800ad84 <ai_platform_network_process+0x230>)
 800ab6e:	6813      	ldr	r3, [r2, #0]
 800ab70:	f023 0301 	bic.w	r3, r3, #1
 800ab74:	6013      	str	r3, [r2, #0]
 800ab76:	6803      	ldr	r3, [r0, #0]
 800ab78:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 800ab7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ab80:	181a      	adds	r2, r3, r0
 800ab82:	2a01      	cmp	r2, #1
 800ab84:	f240 80c6 	bls.w	800ad14 <ai_platform_network_process+0x1c0>
 800ab88:	f240 4249 	movw	r2, #1097	; 0x449
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	f000 80c1 	beq.w	800ad14 <ai_platform_network_process+0x1c0>
 800ab92:	4b7d      	ldr	r3, [pc, #500]	; (800ad88 <ai_platform_network_process+0x234>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ab9a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ab9e:	f000 80a9 	beq.w	800acf4 <ai_platform_network_process+0x1a0>
 800aba2:	2c00      	cmp	r4, #0
 800aba4:	f000 80db 	beq.w	800ad5e <ai_platform_network_process+0x20a>
 800aba8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800abac:	68e0      	ldr	r0, [r4, #12]
 800abae:	461a      	mov	r2, r3
 800abb0:	f000 0003 	and.w	r0, r0, #3
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f000 80bd 	beq.w	800ad34 <ai_platform_network_process+0x1e0>
 800abba:	2600      	movs	r6, #0
 800abbc:	2803      	cmp	r0, #3
 800abbe:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800abc0:	6166      	str	r6, [r4, #20]
 800abc2:	f040 80c6 	bne.w	800ad52 <ai_platform_network_process+0x1fe>
 800abc6:	2900      	cmp	r1, #0
 800abc8:	f000 80b7 	beq.w	800ad3a <ai_platform_network_process+0x1e6>
 800abcc:	fab5 f085 	clz	r0, r5
 800abd0:	0940      	lsrs	r0, r0, #5
 800abd2:	2800      	cmp	r0, #0
 800abd4:	f040 80b1 	bne.w	800ad3a <ai_platform_network_process+0x1e6>
 800abd8:	882e      	ldrh	r6, [r5, #0]
 800abda:	2e00      	cmp	r6, #0
 800abdc:	f000 80ad 	beq.w	800ad3a <ai_platform_network_process+0x1e6>
 800abe0:	888f      	ldrh	r7, [r1, #4]
 800abe2:	686e      	ldr	r6, [r5, #4]
 800abe4:	9701      	str	r7, [sp, #4]
 800abe6:	2e00      	cmp	r6, #0
 800abe8:	f000 825f 	beq.w	800b0aa <ai_platform_network_process+0x556>
 800abec:	6836      	ldr	r6, [r6, #0]
 800abee:	2e00      	cmp	r6, #0
 800abf0:	f000 825b 	beq.w	800b0aa <ai_platform_network_process+0x556>
 800abf4:	68ab      	ldr	r3, [r5, #8]
 800abf6:	f8d3 9000 	ldr.w	r9, [r3]
 800abfa:	f1b9 0f00 	cmp.w	r9, #0
 800abfe:	f000 809c 	beq.w	800ad3a <ai_platform_network_process+0x1e6>
 800ac02:	460f      	mov	r7, r1
 800ac04:	4680      	mov	r8, r0
 800ac06:	e05e      	b.n	800acc6 <ai_platform_network_process+0x172>
 800ac08:	68f3      	ldr	r3, [r6, #12]
 800ac0a:	68da      	ldr	r2, [r3, #12]
 800ac0c:	455a      	cmp	r2, fp
 800ac0e:	d168      	bne.n	800ace2 <ai_platform_network_process+0x18e>
 800ac10:	689a      	ldr	r2, [r3, #8]
 800ac12:	4572      	cmp	r2, lr
 800ac14:	d165      	bne.n	800ace2 <ai_platform_network_process+0x18e>
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	459c      	cmp	ip, r3
 800ac1a:	d162      	bne.n	800ace2 <ai_platform_network_process+0x18e>
 800ac1c:	6800      	ldr	r0, [r0, #0]
 800ac1e:	f002 fa63 	bl	800d0e8 <ai_array_get_byte_size>
 800ac22:	68f2      	ldr	r2, [r6, #12]
 800ac24:	6973      	ldr	r3, [r6, #20]
 800ac26:	68d2      	ldr	r2, [r2, #12]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	fb03 f302 	mul.w	r3, r3, r2
 800ac2e:	4298      	cmp	r0, r3
 800ac30:	d357      	bcc.n	800ace2 <ai_platform_network_process+0x18e>
 800ac32:	69b3      	ldr	r3, [r6, #24]
 800ac34:	6818      	ldr	r0, [r3, #0]
 800ac36:	f002 fa0b 	bl	800d050 <ai_array_to_buffer_fmt>
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	4043      	eors	r3, r0
 800ac3e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800ac42:	f040 8229 	bne.w	800b098 <ai_platform_network_process+0x544>
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f000 821d 	beq.w	800b088 <ai_platform_network_process+0x534>
 800ac4e:	88bb      	ldrh	r3, [r7, #4]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f000 808a 	beq.w	800ad6a <ai_platform_network_process+0x216>
 800ac56:	9a01      	ldr	r2, [sp, #4]
 800ac58:	68f1      	ldr	r1, [r6, #12]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	68c9      	ldr	r1, [r1, #12]
 800ac5e:	bf38      	it	cc
 800ac60:	461a      	movcc	r2, r3
 800ac62:	9201      	str	r2, [sp, #4]
 800ac64:	6972      	ldr	r2, [r6, #20]
 800ac66:	68d3      	ldr	r3, [r2, #12]
 800ac68:	fb03 f301 	mul.w	r3, r3, r1
 800ac6c:	f8c9 3008 	str.w	r3, [r9, #8]
 800ac70:	88ba      	ldrh	r2, [r7, #4]
 800ac72:	fb03 f302 	mul.w	r3, r3, r2
 800ac76:	f8c9 300c 	str.w	r3, [r9, #12]
 800ac7a:	6939      	ldr	r1, [r7, #16]
 800ac7c:	f8c9 1004 	str.w	r1, [r9, #4]
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	4413      	add	r3, r2
 800ac84:	f8c9 3000 	str.w	r3, [r9]
 800ac88:	69b0      	ldr	r0, [r6, #24]
 800ac8a:	6803      	ldr	r3, [r0, #0]
 800ac8c:	009a      	lsls	r2, r3, #2
 800ac8e:	d408      	bmi.n	800aca2 <ai_platform_network_process+0x14e>
 800ac90:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800ac94:	1a9b      	subs	r3, r3, r2
 800ac96:	4419      	add	r1, r3
 800ac98:	6081      	str	r1, [r0, #8]
 800ac9a:	69b3      	ldr	r3, [r6, #24]
 800ac9c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800aca0:	60da      	str	r2, [r3, #12]
 800aca2:	f108 0801 	add.w	r8, r8, #1
 800aca6:	882b      	ldrh	r3, [r5, #0]
 800aca8:	4598      	cmp	r8, r3
 800acaa:	d27b      	bcs.n	800ada4 <ai_platform_network_process+0x250>
 800acac:	686b      	ldr	r3, [r5, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d078      	beq.n	800ada4 <ai_platform_network_process+0x250>
 800acb2:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800acb6:	2e00      	cmp	r6, #0
 800acb8:	d074      	beq.n	800ada4 <ai_platform_network_process+0x250>
 800acba:	68ab      	ldr	r3, [r5, #8]
 800acbc:	3718      	adds	r7, #24
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 800acc4:	d039      	beq.n	800ad3a <ai_platform_network_process+0x1e6>
 800acc6:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 800acca:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 800acce:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800acd2:	fb0b f30e 	mul.w	r3, fp, lr
 800acd6:	69b0      	ldr	r0, [r6, #24]
 800acd8:	fb0c f303 	mul.w	r3, ip, r3
 800acdc:	6841      	ldr	r1, [r0, #4]
 800acde:	4299      	cmp	r1, r3
 800ace0:	d292      	bcs.n	800ac08 <ai_platform_network_process+0xb4>
 800ace2:	f104 0010 	add.w	r0, r4, #16
 800ace6:	2218      	movs	r2, #24
 800ace8:	2112      	movs	r1, #18
 800acea:	f04f 0b00 	mov.w	fp, #0
 800acee:	f000 f9e9 	bl	800b0c4 <core_set_error>
 800acf2:	e02a      	b.n	800ad4a <ai_platform_network_process+0x1f6>
 800acf4:	4b25      	ldr	r3, [pc, #148]	; (800ad8c <ai_platform_network_process+0x238>)
 800acf6:	2201      	movs	r2, #1
 800acf8:	4618      	mov	r0, r3
 800acfa:	601a      	str	r2, [r3, #0]
 800acfc:	6803      	ldr	r3, [r0, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d1fc      	bne.n	800acfc <ai_platform_network_process+0x1a8>
 800ad02:	4b23      	ldr	r3, [pc, #140]	; (800ad90 <ai_platform_network_process+0x23c>)
 800ad04:	4823      	ldr	r0, [pc, #140]	; (800ad94 <ai_platform_network_process+0x240>)
 800ad06:	4a24      	ldr	r2, [pc, #144]	; (800ad98 <ai_platform_network_process+0x244>)
 800ad08:	6018      	str	r0, [r3, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	f43f af48 	beq.w	800aba2 <ai_platform_network_process+0x4e>
 800ad12:	e7fe      	b.n	800ad12 <ai_platform_network_process+0x1be>
 800ad14:	4b21      	ldr	r3, [pc, #132]	; (800ad9c <ai_platform_network_process+0x248>)
 800ad16:	2201      	movs	r2, #1
 800ad18:	4618      	mov	r0, r3
 800ad1a:	601a      	str	r2, [r3, #0]
 800ad1c:	6803      	ldr	r3, [r0, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d1fc      	bne.n	800ad1c <ai_platform_network_process+0x1c8>
 800ad22:	4b1f      	ldr	r3, [pc, #124]	; (800ada0 <ai_platform_network_process+0x24c>)
 800ad24:	481b      	ldr	r0, [pc, #108]	; (800ad94 <ai_platform_network_process+0x240>)
 800ad26:	4a1c      	ldr	r2, [pc, #112]	; (800ad98 <ai_platform_network_process+0x244>)
 800ad28:	6018      	str	r0, [r3, #0]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	f43f af38 	beq.w	800aba2 <ai_platform_network_process+0x4e>
 800ad32:	e7fe      	b.n	800ad32 <ai_platform_network_process+0x1de>
 800ad34:	2803      	cmp	r0, #3
 800ad36:	6163      	str	r3, [r4, #20]
 800ad38:	d10b      	bne.n	800ad52 <ai_platform_network_process+0x1fe>
 800ad3a:	f04f 0b00 	mov.w	fp, #0
 800ad3e:	f104 0010 	add.w	r0, r4, #16
 800ad42:	2217      	movs	r2, #23
 800ad44:	2112      	movs	r1, #18
 800ad46:	f000 f9bd 	bl	800b0c4 <core_set_error>
 800ad4a:	4658      	mov	r0, fp
 800ad4c:	b003      	add	sp, #12
 800ad4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad52:	f104 0010 	add.w	r0, r4, #16
 800ad56:	2230      	movs	r2, #48	; 0x30
 800ad58:	2111      	movs	r1, #17
 800ad5a:	f000 f9b3 	bl	800b0c4 <core_set_error>
 800ad5e:	f04f 0b00 	mov.w	fp, #0
 800ad62:	4658      	mov	r0, fp
 800ad64:	b003      	add	sp, #12
 800ad66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad6a:	f104 0010 	add.w	r0, r4, #16
 800ad6e:	2221      	movs	r2, #33	; 0x21
 800ad70:	2112      	movs	r1, #18
 800ad72:	469b      	mov	fp, r3
 800ad74:	f000 f9a6 	bl	800b0c4 <core_set_error>
 800ad78:	e7e7      	b.n	800ad4a <ai_platform_network_process+0x1f6>
 800ad7a:	bf00      	nop
 800ad7c:	a1c00100 	.word	0xa1c00100
 800ad80:	e0002000 	.word	0xe0002000
 800ad84:	e0042000 	.word	0xe0042000
 800ad88:	5c001000 	.word	0x5c001000
 800ad8c:	58024c08 	.word	0x58024c08
 800ad90:	58024c00 	.word	0x58024c00
 800ad94:	f407a5c2 	.word	0xf407a5c2
 800ad98:	b5e8b5cd 	.word	0xb5e8b5cd
 800ad9c:	40023008 	.word	0x40023008
 800ada0:	40023000 	.word	0x40023000
 800ada4:	f1ba 0f00 	cmp.w	sl, #0
 800ada8:	f000 808c 	beq.w	800aec4 <ai_platform_network_process+0x370>
 800adac:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	f240 813b 	bls.w	800b02c <ai_platform_network_process+0x4d8>
 800adb6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800adb8:	f115 0f0c 	cmn.w	r5, #12
 800adbc:	f000 8136 	beq.w	800b02c <ai_platform_network_process+0x4d8>
 800adc0:	89ab      	ldrh	r3, [r5, #12]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f000 8132 	beq.w	800b02c <ai_platform_network_process+0x4d8>
 800adc8:	4656      	mov	r6, sl
 800adca:	f04f 0900 	mov.w	r9, #0
 800adce:	9400      	str	r4, [sp, #0]
 800add0:	4599      	cmp	r9, r3
 800add2:	d274      	bcs.n	800aebe <ai_platform_network_process+0x36a>
 800add4:	692b      	ldr	r3, [r5, #16]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d071      	beq.n	800aebe <ai_platform_network_process+0x36a>
 800adda:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 800adde:	2f00      	cmp	r7, #0
 800ade0:	d06d      	beq.n	800aebe <ai_platform_network_process+0x36a>
 800ade2:	696b      	ldr	r3, [r5, #20]
 800ade4:	ea4f 1409 	mov.w	r4, r9, lsl #4
 800ade8:	f8d3 8000 	ldr.w	r8, [r3]
 800adec:	eb18 0a04 	adds.w	sl, r8, r4
 800adf0:	f000 8125 	beq.w	800b03e <ai_platform_network_process+0x4ea>
 800adf4:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 800adf8:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 800adfc:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800ae00:	fb0b f30e 	mul.w	r3, fp, lr
 800ae04:	69b8      	ldr	r0, [r7, #24]
 800ae06:	fb0c f303 	mul.w	r3, ip, r3
 800ae0a:	6841      	ldr	r1, [r0, #4]
 800ae0c:	4299      	cmp	r1, r3
 800ae0e:	f0c0 810c 	bcc.w	800b02a <ai_platform_network_process+0x4d6>
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	68da      	ldr	r2, [r3, #12]
 800ae16:	455a      	cmp	r2, fp
 800ae18:	f040 8107 	bne.w	800b02a <ai_platform_network_process+0x4d6>
 800ae1c:	689a      	ldr	r2, [r3, #8]
 800ae1e:	4572      	cmp	r2, lr
 800ae20:	f040 8103 	bne.w	800b02a <ai_platform_network_process+0x4d6>
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	459c      	cmp	ip, r3
 800ae28:	f040 80ff 	bne.w	800b02a <ai_platform_network_process+0x4d6>
 800ae2c:	6800      	ldr	r0, [r0, #0]
 800ae2e:	f002 f95b 	bl	800d0e8 <ai_array_get_byte_size>
 800ae32:	68fa      	ldr	r2, [r7, #12]
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	68d2      	ldr	r2, [r2, #12]
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	fb03 f302 	mul.w	r3, r3, r2
 800ae3e:	4298      	cmp	r0, r3
 800ae40:	f0c0 80f3 	bcc.w	800b02a <ai_platform_network_process+0x4d6>
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	6818      	ldr	r0, [r3, #0]
 800ae48:	f002 f902 	bl	800d050 <ai_array_to_buffer_fmt>
 800ae4c:	6833      	ldr	r3, [r6, #0]
 800ae4e:	4043      	eors	r3, r0
 800ae50:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800ae54:	f040 810e 	bne.w	800b074 <ai_platform_network_process+0x520>
 800ae58:	6933      	ldr	r3, [r6, #16]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	f000 8101 	beq.w	800b062 <ai_platform_network_process+0x50e>
 800ae60:	88b3      	ldrh	r3, [r6, #4]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	f000 80f4 	beq.w	800b050 <ai_platform_network_process+0x4fc>
 800ae68:	9a01      	ldr	r2, [sp, #4]
 800ae6a:	68f9      	ldr	r1, [r7, #12]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	68c9      	ldr	r1, [r1, #12]
 800ae70:	bf38      	it	cc
 800ae72:	461a      	movcc	r2, r3
 800ae74:	9201      	str	r2, [sp, #4]
 800ae76:	697a      	ldr	r2, [r7, #20]
 800ae78:	68d3      	ldr	r3, [r2, #12]
 800ae7a:	fb03 f301 	mul.w	r3, r3, r1
 800ae7e:	f8ca 3008 	str.w	r3, [sl, #8]
 800ae82:	88b2      	ldrh	r2, [r6, #4]
 800ae84:	fb03 f302 	mul.w	r3, r3, r2
 800ae88:	f8ca 300c 	str.w	r3, [sl, #12]
 800ae8c:	6931      	ldr	r1, [r6, #16]
 800ae8e:	f8ca 1004 	str.w	r1, [sl, #4]
 800ae92:	6932      	ldr	r2, [r6, #16]
 800ae94:	4413      	add	r3, r2
 800ae96:	f848 3004 	str.w	r3, [r8, r4]
 800ae9a:	69b8      	ldr	r0, [r7, #24]
 800ae9c:	6803      	ldr	r3, [r0, #0]
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	d408      	bmi.n	800aeb4 <ai_platform_network_process+0x360>
 800aea2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800aea6:	1a9b      	subs	r3, r3, r2
 800aea8:	4419      	add	r1, r3
 800aeaa:	6081      	str	r1, [r0, #8]
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	f8da 2004 	ldr.w	r2, [sl, #4]
 800aeb2:	60da      	str	r2, [r3, #12]
 800aeb4:	f109 0901 	add.w	r9, r9, #1
 800aeb8:	3618      	adds	r6, #24
 800aeba:	89ab      	ldrh	r3, [r5, #12]
 800aebc:	e788      	b.n	800add0 <ai_platform_network_process+0x27c>
 800aebe:	e9dd 4300 	ldrd	r4, r3, [sp]
 800aec2:	82a3      	strh	r3, [r4, #20]
 800aec4:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800aec8:	2a00      	cmp	r2, #0
 800aeca:	f000 80a9 	beq.w	800b020 <ai_platform_network_process+0x4cc>
 800aece:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800aed0:	2a01      	cmp	r2, #1
 800aed2:	f240 80a8 	bls.w	800b026 <ai_platform_network_process+0x4d2>
 800aed6:	f105 060c 	add.w	r6, r5, #12
 800aeda:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 800aede:	8aa3      	ldrh	r3, [r4, #20]
 800aee0:	455b      	cmp	r3, fp
 800aee2:	f67f af32 	bls.w	800ad4a <ai_platform_network_process+0x1f6>
 800aee6:	9400      	str	r4, [sp, #0]
 800aee8:	2d00      	cmp	r5, #0
 800aeea:	d037      	beq.n	800af5c <ai_platform_network_process+0x408>
 800aeec:	882b      	ldrh	r3, [r5, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d034      	beq.n	800af5c <ai_platform_network_process+0x408>
 800aef2:	686b      	ldr	r3, [r5, #4]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d031      	beq.n	800af5c <ai_platform_network_process+0x408>
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d02e      	beq.n	800af5c <ai_platform_network_process+0x408>
 800aefe:	f04f 0800 	mov.w	r8, #0
 800af02:	e01a      	b.n	800af3a <ai_platform_network_process+0x3e6>
 800af04:	68d4      	ldr	r4, [r2, #12]
 800af06:	1b00      	subs	r0, r0, r4
 800af08:	4401      	add	r1, r0
 800af0a:	6091      	str	r1, [r2, #8]
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	699b      	ldr	r3, [r3, #24]
 800af10:	60da      	str	r2, [r3, #12]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f108 0801 	add.w	r8, r8, #1
 800af18:	68b9      	ldr	r1, [r7, #8]
 800af1a:	f85a 2009 	ldr.w	r2, [sl, r9]
 800af1e:	440b      	add	r3, r1
 800af20:	4293      	cmp	r3, r2
 800af22:	d301      	bcc.n	800af28 <ai_platform_network_process+0x3d4>
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	607b      	str	r3, [r7, #4]
 800af2a:	882b      	ldrh	r3, [r5, #0]
 800af2c:	4598      	cmp	r8, r3
 800af2e:	d215      	bcs.n	800af5c <ai_platform_network_process+0x408>
 800af30:	686b      	ldr	r3, [r5, #4]
 800af32:	b19b      	cbz	r3, 800af5c <ai_platform_network_process+0x408>
 800af34:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800af38:	b183      	cbz	r3, 800af5c <ai_platform_network_process+0x408>
 800af3a:	68a9      	ldr	r1, [r5, #8]
 800af3c:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800af40:	699a      	ldr	r2, [r3, #24]
 800af42:	f8d1 a000 	ldr.w	sl, [r1]
 800af46:	6814      	ldr	r4, [r2, #0]
 800af48:	eb0a 0709 	add.w	r7, sl, r9
 800af4c:	6890      	ldr	r0, [r2, #8]
 800af4e:	00a4      	lsls	r4, r4, #2
 800af50:	6879      	ldr	r1, [r7, #4]
 800af52:	d5d7      	bpl.n	800af04 <ai_platform_network_process+0x3b0>
 800af54:	68ba      	ldr	r2, [r7, #8]
 800af56:	f002 fa9b 	bl	800d490 <memcpy>
 800af5a:	e7da      	b.n	800af12 <ai_platform_network_process+0x3be>
 800af5c:	9800      	ldr	r0, [sp, #0]
 800af5e:	f002 f83d 	bl	800cfdc <ai_layers_forward_all>
 800af62:	2e00      	cmp	r6, #0
 800af64:	d04a      	beq.n	800affc <ai_platform_network_process+0x4a8>
 800af66:	8833      	ldrh	r3, [r6, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d047      	beq.n	800affc <ai_platform_network_process+0x4a8>
 800af6c:	6873      	ldr	r3, [r6, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d044      	beq.n	800affc <ai_platform_network_process+0x4a8>
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d041      	beq.n	800affc <ai_platform_network_process+0x4a8>
 800af78:	f04f 0800 	mov.w	r8, #0
 800af7c:	e019      	b.n	800afb2 <ai_platform_network_process+0x45e>
 800af7e:	f85a 2009 	ldr.w	r2, [sl, r9]
 800af82:	4291      	cmp	r1, r2
 800af84:	d301      	bcc.n	800af8a <ai_platform_network_process+0x436>
 800af86:	68f9      	ldr	r1, [r7, #12]
 800af88:	1a51      	subs	r1, r2, r1
 800af8a:	6079      	str	r1, [r7, #4]
 800af8c:	f108 0801 	add.w	r8, r8, #1
 800af90:	6998      	ldr	r0, [r3, #24]
 800af92:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 800af96:	1b12      	subs	r2, r2, r4
 800af98:	440a      	add	r2, r1
 800af9a:	6082      	str	r2, [r0, #8]
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	699b      	ldr	r3, [r3, #24]
 800afa0:	60da      	str	r2, [r3, #12]
 800afa2:	8833      	ldrh	r3, [r6, #0]
 800afa4:	4598      	cmp	r8, r3
 800afa6:	d229      	bcs.n	800affc <ai_platform_network_process+0x4a8>
 800afa8:	6873      	ldr	r3, [r6, #4]
 800afaa:	b33b      	cbz	r3, 800affc <ai_platform_network_process+0x4a8>
 800afac:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800afb0:	b323      	cbz	r3, 800affc <ai_platform_network_process+0x4a8>
 800afb2:	68b2      	ldr	r2, [r6, #8]
 800afb4:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800afb8:	f8d3 e018 	ldr.w	lr, [r3, #24]
 800afbc:	f8d2 a000 	ldr.w	sl, [r2]
 800afc0:	f8de 1000 	ldr.w	r1, [lr]
 800afc4:	eb0a 0709 	add.w	r7, sl, r9
 800afc8:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 800afcc:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 800afd0:	eb00 0102 	add.w	r1, r0, r2
 800afd4:	d0d3      	beq.n	800af7e <ai_platform_network_process+0x42a>
 800afd6:	f8de 1008 	ldr.w	r1, [lr, #8]
 800afda:	f002 fa59 	bl	800d490 <memcpy>
 800afde:	f85a 2009 	ldr.w	r2, [sl, r9]
 800afe2:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 800afe6:	440b      	add	r3, r1
 800afe8:	4293      	cmp	r3, r2
 800afea:	d301      	bcc.n	800aff0 <ai_platform_network_process+0x49c>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	607b      	str	r3, [r7, #4]
 800aff2:	f108 0801 	add.w	r8, r8, #1
 800aff6:	8833      	ldrh	r3, [r6, #0]
 800aff8:	4598      	cmp	r8, r3
 800affa:	d3d5      	bcc.n	800afa8 <ai_platform_network_process+0x454>
 800affc:	9b00      	ldr	r3, [sp, #0]
 800affe:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 800b002:	461a      	mov	r2, r3
 800b004:	8a9b      	ldrh	r3, [r3, #20]
 800b006:	f10b 0b01 	add.w	fp, fp, #1
 800b00a:	fa1f fb8b 	uxth.w	fp, fp
 800b00e:	455b      	cmp	r3, fp
 800b010:	f8a2 b016 	strh.w	fp, [r2, #22]
 800b014:	f63f af68 	bhi.w	800aee8 <ai_platform_network_process+0x394>
 800b018:	4658      	mov	r0, fp
 800b01a:	b003      	add	sp, #12
 800b01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b020:	4615      	mov	r5, r2
 800b022:	4616      	mov	r6, r2
 800b024:	e759      	b.n	800aeda <ai_platform_network_process+0x386>
 800b026:	2600      	movs	r6, #0
 800b028:	e757      	b.n	800aeda <ai_platform_network_process+0x386>
 800b02a:	9c00      	ldr	r4, [sp, #0]
 800b02c:	f104 0010 	add.w	r0, r4, #16
 800b030:	2218      	movs	r2, #24
 800b032:	2113      	movs	r1, #19
 800b034:	f04f 0b00 	mov.w	fp, #0
 800b038:	f000 f844 	bl	800b0c4 <core_set_error>
 800b03c:	e685      	b.n	800ad4a <ai_platform_network_process+0x1f6>
 800b03e:	9c00      	ldr	r4, [sp, #0]
 800b040:	2217      	movs	r2, #23
 800b042:	2113      	movs	r1, #19
 800b044:	46d3      	mov	fp, sl
 800b046:	f104 0010 	add.w	r0, r4, #16
 800b04a:	f000 f83b 	bl	800b0c4 <core_set_error>
 800b04e:	e67c      	b.n	800ad4a <ai_platform_network_process+0x1f6>
 800b050:	9c00      	ldr	r4, [sp, #0]
 800b052:	2221      	movs	r2, #33	; 0x21
 800b054:	2113      	movs	r1, #19
 800b056:	469b      	mov	fp, r3
 800b058:	f104 0010 	add.w	r0, r4, #16
 800b05c:	f000 f832 	bl	800b0c4 <core_set_error>
 800b060:	e673      	b.n	800ad4a <ai_platform_network_process+0x1f6>
 800b062:	9c00      	ldr	r4, [sp, #0]
 800b064:	2217      	movs	r2, #23
 800b066:	2113      	movs	r1, #19
 800b068:	469b      	mov	fp, r3
 800b06a:	f104 0010 	add.w	r0, r4, #16
 800b06e:	f000 f829 	bl	800b0c4 <core_set_error>
 800b072:	e66a      	b.n	800ad4a <ai_platform_network_process+0x1f6>
 800b074:	9c00      	ldr	r4, [sp, #0]
 800b076:	2219      	movs	r2, #25
 800b078:	2113      	movs	r1, #19
 800b07a:	f04f 0b00 	mov.w	fp, #0
 800b07e:	f104 0010 	add.w	r0, r4, #16
 800b082:	f000 f81f 	bl	800b0c4 <core_set_error>
 800b086:	e660      	b.n	800ad4a <ai_platform_network_process+0x1f6>
 800b088:	f104 0010 	add.w	r0, r4, #16
 800b08c:	2217      	movs	r2, #23
 800b08e:	2112      	movs	r1, #18
 800b090:	469b      	mov	fp, r3
 800b092:	f000 f817 	bl	800b0c4 <core_set_error>
 800b096:	e658      	b.n	800ad4a <ai_platform_network_process+0x1f6>
 800b098:	f104 0010 	add.w	r0, r4, #16
 800b09c:	2219      	movs	r2, #25
 800b09e:	2112      	movs	r1, #18
 800b0a0:	f04f 0b00 	mov.w	fp, #0
 800b0a4:	f000 f80e 	bl	800b0c4 <core_set_error>
 800b0a8:	e64f      	b.n	800ad4a <ai_platform_network_process+0x1f6>
 800b0aa:	f1ba 0f00 	cmp.w	sl, #0
 800b0ae:	f47f ae7f 	bne.w	800adb0 <ai_platform_network_process+0x25c>
 800b0b2:	e70d      	b.n	800aed0 <ai_platform_network_process+0x37c>

0800b0b4 <core_init>:
 800b0b4:	2001      	movs	r0, #1
 800b0b6:	4770      	bx	lr

0800b0b8 <core_get_error>:
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	6800      	ldr	r0, [r0, #0]
 800b0be:	601a      	str	r2, [r3, #0]
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop

0800b0c4 <core_set_error>:
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	7800      	ldrb	r0, [r0, #0]
 800b0c8:	b930      	cbnz	r0, 800b0d8 <core_set_error+0x14>
 800b0ca:	7019      	strb	r1, [r3, #0]
 800b0cc:	2001      	movs	r0, #1
 800b0ce:	6819      	ldr	r1, [r3, #0]
 800b0d0:	f362 211f 	bfi	r1, r2, #8, #24
 800b0d4:	6019      	str	r1, [r3, #0]
 800b0d6:	4770      	bx	lr
 800b0d8:	2000      	movs	r0, #0
 800b0da:	4770      	bx	lr

0800b0dc <func_dummy>:
 800b0dc:	4770      	bx	lr
 800b0de:	bf00      	nop

0800b0e0 <ai_dict8_dot_array_f32>:
 800b0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e4:	9d06      	ldr	r5, [sp, #24]
 800b0e6:	4c88      	ldr	r4, [pc, #544]	; (800b308 <ai_dict8_dot_array_f32+0x228>)
 800b0e8:	2d07      	cmp	r5, #7
 800b0ea:	442c      	add	r4, r5
 800b0ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b0f0:	f104 0620 	add.w	r6, r4, #32
 800b0f4:	d817      	bhi.n	800b126 <ai_dict8_dot_array_f32+0x46>
 800b0f6:	42b3      	cmp	r3, r6
 800b0f8:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800b30c <ai_dict8_dot_array_f32+0x22c>
 800b0fc:	d20b      	bcs.n	800b116 <ai_dict8_dot_array_f32+0x36>
 800b0fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b102:	ecf3 7a01 	vldmia	r3!, {s15}
 800b106:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b10a:	42b3      	cmp	r3, r6
 800b10c:	edd4 6a00 	vldr	s13, [r4]
 800b110:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b114:	d3f3      	bcc.n	800b0fe <ai_dict8_dot_array_f32+0x1e>
 800b116:	edd0 7a00 	vldr	s15, [r0]
 800b11a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b11e:	ed80 7a00 	vstr	s14, [r0]
 800b122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b126:	f001 0503 	and.w	r5, r1, #3
 800b12a:	2d02      	cmp	r5, #2
 800b12c:	f000 80f0 	beq.w	800b310 <ai_dict8_dot_array_f32+0x230>
 800b130:	2d03      	cmp	r5, #3
 800b132:	f000 81ff 	beq.w	800b534 <ai_dict8_dot_array_f32+0x454>
 800b136:	2d01      	cmp	r5, #1
 800b138:	f000 81f0 	beq.w	800b51c <ai_dict8_dot_array_f32+0x43c>
 800b13c:	42a3      	cmp	r3, r4
 800b13e:	f200 81fc 	bhi.w	800b53a <ai_dict8_dot_array_f32+0x45a>
 800b142:	1ae4      	subs	r4, r4, r3
 800b144:	f101 0810 	add.w	r8, r1, #16
 800b148:	f101 0508 	add.w	r5, r1, #8
 800b14c:	f103 0720 	add.w	r7, r3, #32
 800b150:	0964      	lsrs	r4, r4, #5
 800b152:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800b30c <ai_dict8_dot_array_f32+0x22c>
 800b156:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 800b15a:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 800b15e:	3508      	adds	r5, #8
 800b160:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 800b164:	3720      	adds	r7, #32
 800b166:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800b16a:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 800b16e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800b172:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 800b176:	edde 7a00 	vldr	s15, [lr]
 800b17a:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 800b17e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b182:	eddc 5a00 	vldr	s11, [ip]
 800b186:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 800b18a:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 800b18e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b192:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800b196:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 800b19a:	ed9c 4a00 	vldr	s8, [ip]
 800b19e:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 800b1a2:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800b1a6:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 800b1aa:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800b1ae:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 800b1b2:	eee4 7a26 	vfma.f32	s15, s8, s13
 800b1b6:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 800b1ba:	ed9c 4a00 	vldr	s8, [ip]
 800b1be:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 800b1c2:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 800b1c6:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800b1ca:	eee4 7a05 	vfma.f32	s15, s8, s10
 800b1ce:	ed9e 5a00 	vldr	s10, [lr]
 800b1d2:	ed9c 4a00 	vldr	s8, [ip]
 800b1d6:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 800b1da:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 800b1de:	4545      	cmp	r5, r8
 800b1e0:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800b1e4:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800b1e8:	eee5 7a06 	vfma.f32	s15, s10, s12
 800b1ec:	ed9e 5a00 	vldr	s10, [lr]
 800b1f0:	ed9c 6a00 	vldr	s12, [ip]
 800b1f4:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b1f8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b1fc:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b200:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b204:	d1a9      	bne.n	800b15a <ai_dict8_dot_array_f32+0x7a>
 800b206:	3401      	adds	r4, #1
 800b208:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800b20c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800b210:	42b3      	cmp	r3, r6
 800b212:	d280      	bcs.n	800b116 <ai_dict8_dot_array_f32+0x36>
 800b214:	461c      	mov	r4, r3
 800b216:	780d      	ldrb	r5, [r1, #0]
 800b218:	ecf4 6a01 	vldmia	r4!, {s13}
 800b21c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800b220:	42a6      	cmp	r6, r4
 800b222:	edd5 7a00 	vldr	s15, [r5]
 800b226:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b22a:	f67f af74 	bls.w	800b116 <ai_dict8_dot_array_f32+0x36>
 800b22e:	784d      	ldrb	r5, [r1, #1]
 800b230:	f103 0408 	add.w	r4, r3, #8
 800b234:	edd3 6a01 	vldr	s13, [r3, #4]
 800b238:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800b23c:	42a6      	cmp	r6, r4
 800b23e:	edd5 7a00 	vldr	s15, [r5]
 800b242:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b246:	f67f af66 	bls.w	800b116 <ai_dict8_dot_array_f32+0x36>
 800b24a:	788d      	ldrb	r5, [r1, #2]
 800b24c:	f103 040c 	add.w	r4, r3, #12
 800b250:	edd3 6a02 	vldr	s13, [r3, #8]
 800b254:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800b258:	42a6      	cmp	r6, r4
 800b25a:	edd5 7a00 	vldr	s15, [r5]
 800b25e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b262:	f67f af58 	bls.w	800b116 <ai_dict8_dot_array_f32+0x36>
 800b266:	78cd      	ldrb	r5, [r1, #3]
 800b268:	f103 0410 	add.w	r4, r3, #16
 800b26c:	edd3 6a03 	vldr	s13, [r3, #12]
 800b270:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800b274:	42a6      	cmp	r6, r4
 800b276:	edd5 7a00 	vldr	s15, [r5]
 800b27a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b27e:	f67f af4a 	bls.w	800b116 <ai_dict8_dot_array_f32+0x36>
 800b282:	790d      	ldrb	r5, [r1, #4]
 800b284:	f103 0414 	add.w	r4, r3, #20
 800b288:	edd3 6a04 	vldr	s13, [r3, #16]
 800b28c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800b290:	42a6      	cmp	r6, r4
 800b292:	edd5 7a00 	vldr	s15, [r5]
 800b296:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b29a:	f67f af3c 	bls.w	800b116 <ai_dict8_dot_array_f32+0x36>
 800b29e:	794d      	ldrb	r5, [r1, #5]
 800b2a0:	f103 0418 	add.w	r4, r3, #24
 800b2a4:	edd3 6a05 	vldr	s13, [r3, #20]
 800b2a8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800b2ac:	42a6      	cmp	r6, r4
 800b2ae:	edd5 7a00 	vldr	s15, [r5]
 800b2b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b2b6:	f67f af2e 	bls.w	800b116 <ai_dict8_dot_array_f32+0x36>
 800b2ba:	798d      	ldrb	r5, [r1, #6]
 800b2bc:	f103 041c 	add.w	r4, r3, #28
 800b2c0:	edd3 6a06 	vldr	s13, [r3, #24]
 800b2c4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800b2c8:	42a6      	cmp	r6, r4
 800b2ca:	edd5 7a00 	vldr	s15, [r5]
 800b2ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b2d2:	f67f af20 	bls.w	800b116 <ai_dict8_dot_array_f32+0x36>
 800b2d6:	79cd      	ldrb	r5, [r1, #7]
 800b2d8:	f103 0420 	add.w	r4, r3, #32
 800b2dc:	edd3 6a07 	vldr	s13, [r3, #28]
 800b2e0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800b2e4:	42a6      	cmp	r6, r4
 800b2e6:	edd5 7a00 	vldr	s15, [r5]
 800b2ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b2ee:	f67f af12 	bls.w	800b116 <ai_dict8_dot_array_f32+0x36>
 800b2f2:	7a09      	ldrb	r1, [r1, #8]
 800b2f4:	edd3 7a08 	vldr	s15, [r3, #32]
 800b2f8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b2fc:	edd2 6a00 	vldr	s13, [r2]
 800b300:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b304:	e707      	b.n	800b116 <ai_dict8_dot_array_f32+0x36>
 800b306:	bf00      	nop
 800b308:	3ffffff8 	.word	0x3ffffff8
 800b30c:	00000000 	.word	0x00000000
 800b310:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 800b30c <ai_dict8_dot_array_f32+0x22c>
 800b314:	780d      	ldrb	r5, [r1, #0]
 800b316:	3304      	adds	r3, #4
 800b318:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b31c:	3101      	adds	r1, #1
 800b31e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800b322:	edd5 6a00 	vldr	s13, [r5]
 800b326:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b32a:	780d      	ldrb	r5, [r1, #0]
 800b32c:	1d1f      	adds	r7, r3, #4
 800b32e:	edd3 7a00 	vldr	s15, [r3]
 800b332:	f101 0c01 	add.w	ip, r1, #1
 800b336:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800b33a:	42bc      	cmp	r4, r7
 800b33c:	edd5 6a00 	vldr	s13, [r5]
 800b340:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b344:	d365      	bcc.n	800b412 <ai_dict8_dot_array_f32+0x332>
 800b346:	3324      	adds	r3, #36	; 0x24
 800b348:	f101 0e11 	add.w	lr, r1, #17
 800b34c:	3109      	adds	r1, #9
 800b34e:	eba6 0803 	sub.w	r8, r6, r3
 800b352:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800b356:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 800b35a:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800b35e:	3108      	adds	r1, #8
 800b360:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 800b364:	3320      	adds	r3, #32
 800b366:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800b36a:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 800b36e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b372:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 800b376:	edd5 7a00 	vldr	s15, [r5]
 800b37a:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 800b37e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b382:	edd4 5a00 	vldr	s11, [r4]
 800b386:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 800b38a:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 800b38e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b392:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b396:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800b39a:	ed94 4a00 	vldr	s8, [r4]
 800b39e:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 800b3a2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800b3a6:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 800b3aa:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b3ae:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 800b3b2:	eee4 7a26 	vfma.f32	s15, s8, s13
 800b3b6:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 800b3ba:	ed94 4a00 	vldr	s8, [r4]
 800b3be:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 800b3c2:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 800b3c6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b3ca:	eee4 7a05 	vfma.f32	s15, s8, s10
 800b3ce:	ed95 5a00 	vldr	s10, [r5]
 800b3d2:	ed94 4a00 	vldr	s8, [r4]
 800b3d6:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800b3da:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 800b3de:	458e      	cmp	lr, r1
 800b3e0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800b3e4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b3e8:	eee5 7a06 	vfma.f32	s15, s10, s12
 800b3ec:	ed95 5a00 	vldr	s10, [r5]
 800b3f0:	ed94 6a00 	vldr	s12, [r4]
 800b3f4:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b3f8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b3fc:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b400:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b404:	d1a9      	bne.n	800b35a <ai_dict8_dot_array_f32+0x27a>
 800b406:	f108 0801 	add.w	r8, r8, #1
 800b40a:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800b40e:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 800b412:	42b7      	cmp	r7, r6
 800b414:	f4bf ae7f 	bcs.w	800b116 <ai_dict8_dot_array_f32+0x36>
 800b418:	463b      	mov	r3, r7
 800b41a:	f89c 1000 	ldrb.w	r1, [ip]
 800b41e:	ecf3 6a01 	vldmia	r3!, {s13}
 800b422:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b426:	429e      	cmp	r6, r3
 800b428:	edd1 7a00 	vldr	s15, [r1]
 800b42c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b430:	f67f ae71 	bls.w	800b116 <ai_dict8_dot_array_f32+0x36>
 800b434:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800b438:	f107 0308 	add.w	r3, r7, #8
 800b43c:	edd7 6a01 	vldr	s13, [r7, #4]
 800b440:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b444:	429e      	cmp	r6, r3
 800b446:	edd1 7a00 	vldr	s15, [r1]
 800b44a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b44e:	f67f ae62 	bls.w	800b116 <ai_dict8_dot_array_f32+0x36>
 800b452:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800b456:	f107 030c 	add.w	r3, r7, #12
 800b45a:	edd7 6a02 	vldr	s13, [r7, #8]
 800b45e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b462:	429e      	cmp	r6, r3
 800b464:	edd1 7a00 	vldr	s15, [r1]
 800b468:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b46c:	f67f ae53 	bls.w	800b116 <ai_dict8_dot_array_f32+0x36>
 800b470:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800b474:	f107 0310 	add.w	r3, r7, #16
 800b478:	edd7 6a03 	vldr	s13, [r7, #12]
 800b47c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b480:	429e      	cmp	r6, r3
 800b482:	edd1 7a00 	vldr	s15, [r1]
 800b486:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b48a:	f67f ae44 	bls.w	800b116 <ai_dict8_dot_array_f32+0x36>
 800b48e:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800b492:	f107 0314 	add.w	r3, r7, #20
 800b496:	edd7 6a04 	vldr	s13, [r7, #16]
 800b49a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b49e:	429e      	cmp	r6, r3
 800b4a0:	edd1 7a00 	vldr	s15, [r1]
 800b4a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b4a8:	f67f ae35 	bls.w	800b116 <ai_dict8_dot_array_f32+0x36>
 800b4ac:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800b4b0:	f107 0318 	add.w	r3, r7, #24
 800b4b4:	edd7 6a05 	vldr	s13, [r7, #20]
 800b4b8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b4bc:	429e      	cmp	r6, r3
 800b4be:	edd1 7a00 	vldr	s15, [r1]
 800b4c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b4c6:	f67f ae26 	bls.w	800b116 <ai_dict8_dot_array_f32+0x36>
 800b4ca:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800b4ce:	f107 031c 	add.w	r3, r7, #28
 800b4d2:	edd7 6a06 	vldr	s13, [r7, #24]
 800b4d6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b4da:	429e      	cmp	r6, r3
 800b4dc:	edd1 7a00 	vldr	s15, [r1]
 800b4e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b4e4:	f67f ae17 	bls.w	800b116 <ai_dict8_dot_array_f32+0x36>
 800b4e8:	f89c 1007 	ldrb.w	r1, [ip, #7]
 800b4ec:	f107 0320 	add.w	r3, r7, #32
 800b4f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4f4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b4f8:	429e      	cmp	r6, r3
 800b4fa:	edd1 7a00 	vldr	s15, [r1]
 800b4fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b502:	f67f ae08 	bls.w	800b116 <ai_dict8_dot_array_f32+0x36>
 800b506:	f89c 3008 	ldrb.w	r3, [ip, #8]
 800b50a:	edd7 7a08 	vldr	s15, [r7, #32]
 800b50e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b512:	edd2 6a00 	vldr	s13, [r2]
 800b516:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b51a:	e5fc      	b.n	800b116 <ai_dict8_dot_array_f32+0x36>
 800b51c:	780d      	ldrb	r5, [r1, #0]
 800b51e:	3304      	adds	r3, #4
 800b520:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b524:	3101      	adds	r1, #1
 800b526:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800b52a:	ed95 7a00 	vldr	s14, [r5]
 800b52e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b532:	e6ef      	b.n	800b314 <ai_dict8_dot_array_f32+0x234>
 800b534:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 800b30c <ai_dict8_dot_array_f32+0x22c>
 800b538:	e6f7      	b.n	800b32a <ai_dict8_dot_array_f32+0x24a>
 800b53a:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 800b30c <ai_dict8_dot_array_f32+0x22c>
 800b53e:	e667      	b.n	800b210 <ai_dict8_dot_array_f32+0x130>

0800b540 <ai_dict4_dot_array_f32>:
 800b540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b544:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b546:	f027 0c01 	bic.w	ip, r7, #1
 800b54a:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800b54e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800b552:	f000 80ad 	beq.w	800b6b0 <ai_dict4_dot_array_f32+0x170>
 800b556:	1d0d      	adds	r5, r1, #4
 800b558:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800b55c:	f103 0420 	add.w	r4, r3, #32
 800b560:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800b6b8 <ai_dict4_dot_array_f32+0x178>
 800b564:	eb05 0e09 	add.w	lr, r5, r9
 800b568:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800b56c:	3504      	adds	r5, #4
 800b56e:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 800b572:	3420      	adds	r4, #32
 800b574:	f006 0a0f 	and.w	sl, r6, #15
 800b578:	0936      	lsrs	r6, r6, #4
 800b57a:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800b57e:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800b582:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 800b586:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b58a:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 800b58e:	edda 7a00 	vldr	s15, [sl]
 800b592:	edd6 5a00 	vldr	s11, [r6]
 800b596:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b59a:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 800b59e:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 800b5a2:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800b5a6:	f006 060f 	and.w	r6, r6, #15
 800b5aa:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800b5ae:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 800b5b2:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800b5b6:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 800b5ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b5be:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 800b5c2:	ed9a 3a00 	vldr	s6, [sl]
 800b5c6:	ed96 5a00 	vldr	s10, [r6]
 800b5ca:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 800b5ce:	eee3 7a04 	vfma.f32	s15, s6, s8
 800b5d2:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 800b5d6:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800b5da:	f00a 0a0f 	and.w	sl, sl, #15
 800b5de:	45ae      	cmp	lr, r5
 800b5e0:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800b5e4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800b5e8:	ed9b 3a00 	vldr	s6, [fp]
 800b5ec:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 800b5f0:	eee5 7a06 	vfma.f32	s15, s10, s12
 800b5f4:	ed9a 4a00 	vldr	s8, [sl]
 800b5f8:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 800b5fc:	f006 060f 	and.w	r6, r6, #15
 800b600:	ed9a 5a00 	vldr	s10, [sl]
 800b604:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b608:	ed96 6a00 	vldr	s12, [r6]
 800b60c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b610:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b614:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b618:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b61c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b620:	d1a2      	bne.n	800b568 <ai_dict4_dot_array_f32+0x28>
 800b622:	4449      	add	r1, r9
 800b624:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800b628:	459c      	cmp	ip, r3
 800b62a:	d92d      	bls.n	800b688 <ai_dict4_dot_array_f32+0x148>
 800b62c:	f10c 0c07 	add.w	ip, ip, #7
 800b630:	f103 0508 	add.w	r5, r3, #8
 800b634:	f103 0810 	add.w	r8, r3, #16
 800b638:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 800b63c:	ebac 0c05 	sub.w	ip, ip, r5
 800b640:	f02c 0407 	bic.w	r4, ip, #7
 800b644:	44a0      	add	r8, r4
 800b646:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800b64a:	3508      	adds	r5, #8
 800b64c:	ed55 5a03 	vldr	s11, [r5, #-12]
 800b650:	f004 060f 	and.w	r6, r4, #15
 800b654:	0924      	lsrs	r4, r4, #4
 800b656:	ed55 6a04 	vldr	s13, [r5, #-16]
 800b65a:	45a8      	cmp	r8, r5
 800b65c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b660:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b664:	edd6 7a00 	vldr	s15, [r6]
 800b668:	ed94 6a00 	vldr	s12, [r4]
 800b66c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b670:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b674:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b678:	d1e5      	bne.n	800b646 <ai_dict4_dot_array_f32+0x106>
 800b67a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800b67e:	f10c 0c01 	add.w	ip, ip, #1
 800b682:	4461      	add	r1, ip
 800b684:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800b688:	07fc      	lsls	r4, r7, #31
 800b68a:	d509      	bpl.n	800b6a0 <ai_dict4_dot_array_f32+0x160>
 800b68c:	7809      	ldrb	r1, [r1, #0]
 800b68e:	edd3 7a00 	vldr	s15, [r3]
 800b692:	090b      	lsrs	r3, r1, #4
 800b694:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b698:	edd2 6a00 	vldr	s13, [r2]
 800b69c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b6a0:	edd0 7a00 	vldr	s15, [r0]
 800b6a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6a8:	ed80 7a00 	vstr	s14, [r0]
 800b6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b0:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800b6b8 <ai_dict4_dot_array_f32+0x178>
 800b6b4:	e7b8      	b.n	800b628 <ai_dict4_dot_array_f32+0xe8>
 800b6b6:	bf00      	nop
 800b6b8:	00000000 	.word	0x00000000

0800b6bc <ai_dict_decompress_f32>:
 800b6bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6c0:	9f08      	ldr	r7, [sp, #32]
 800b6c2:	2b04      	cmp	r3, #4
 800b6c4:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800b6c8:	d00e      	beq.n	800b6e8 <ai_dict_decompress_f32+0x2c>
 800b6ca:	2b08      	cmp	r3, #8
 800b6cc:	d10a      	bne.n	800b6e4 <ai_dict_decompress_f32+0x28>
 800b6ce:	42b8      	cmp	r0, r7
 800b6d0:	d208      	bcs.n	800b6e4 <ai_dict_decompress_f32+0x28>
 800b6d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f840 3b04 	str.w	r3, [r0], #4
 800b6e0:	4287      	cmp	r7, r0
 800b6e2:	d8f6      	bhi.n	800b6d2 <ai_dict_decompress_f32+0x16>
 800b6e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6e8:	9b07      	ldr	r3, [sp, #28]
 800b6ea:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800b6ee:	f003 0e01 	and.w	lr, r3, #1
 800b6f2:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 800b6f6:	f10c 38ff 	add.w	r8, ip, #4294967295	; 0xffffffff
 800b6fa:	42b8      	cmp	r0, r7
 800b6fc:	d2f2      	bcs.n	800b6e4 <ai_dict_decompress_f32+0x28>
 800b6fe:	f1bc 0f00 	cmp.w	ip, #0
 800b702:	d019      	beq.n	800b738 <ai_dict_decompress_f32+0x7c>
 800b704:	f100 0508 	add.w	r5, r0, #8
 800b708:	1e4c      	subs	r4, r1, #1
 800b70a:	eb01 0608 	add.w	r6, r1, r8
 800b70e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b712:	3508      	adds	r5, #8
 800b714:	091b      	lsrs	r3, r3, #4
 800b716:	42a6      	cmp	r6, r4
 800b718:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f845 3c10 	str.w	r3, [r5, #-16]
 800b722:	7823      	ldrb	r3, [r4, #0]
 800b724:	f003 030f 	and.w	r3, r3, #15
 800b728:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f845 3c0c 	str.w	r3, [r5, #-12]
 800b732:	d1ec      	bne.n	800b70e <ai_dict_decompress_f32+0x52>
 800b734:	4461      	add	r1, ip
 800b736:	4448      	add	r0, r9
 800b738:	f1be 0f00 	cmp.w	lr, #0
 800b73c:	d103      	bne.n	800b746 <ai_dict_decompress_f32+0x8a>
 800b73e:	4287      	cmp	r7, r0
 800b740:	d8dd      	bhi.n	800b6fe <ai_dict_decompress_f32+0x42>
 800b742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b746:	780b      	ldrb	r3, [r1, #0]
 800b748:	3004      	adds	r0, #4
 800b74a:	3101      	adds	r1, #1
 800b74c:	091b      	lsrs	r3, r3, #4
 800b74e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f840 3c04 	str.w	r3, [r0, #-4]
 800b758:	e7cf      	b.n	800b6fa <ai_dict_decompress_f32+0x3e>
 800b75a:	bf00      	nop

0800b75c <forward_conv2d_nl_pool>:
 800b75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b760:	ed2d 8b08 	vpush	{d8-d11}
 800b764:	b0df      	sub	sp, #380	; 0x17c
 800b766:	6943      	ldr	r3, [r0, #20]
 800b768:	af0a      	add	r7, sp, #40	; 0x28
 800b76a:	881a      	ldrh	r2, [r3, #0]
 800b76c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800b770:	2a00      	cmp	r2, #0
 800b772:	f000 8786 	beq.w	800c682 <forward_conv2d_nl_pool+0xf26>
 800b776:	685c      	ldr	r4, [r3, #4]
 800b778:	6866      	ldr	r6, [r4, #4]
 800b77a:	b106      	cbz	r6, 800b77e <forward_conv2d_nl_pool+0x22>
 800b77c:	6836      	ldr	r6, [r6, #0]
 800b77e:	2a01      	cmp	r2, #1
 800b780:	f240 877c 	bls.w	800c67c <forward_conv2d_nl_pool+0xf20>
 800b784:	6922      	ldr	r2, [r4, #16]
 800b786:	2a00      	cmp	r2, #0
 800b788:	f000 8775 	beq.w	800c676 <forward_conv2d_nl_pool+0xf1a>
 800b78c:	f8d2 9000 	ldr.w	r9, [r2]
 800b790:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800b794:	2a02      	cmp	r2, #2
 800b796:	f000 8771 	beq.w	800c67c <forward_conv2d_nl_pool+0xf20>
 800b79a:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 800b79e:	f1bc 0f00 	cmp.w	ip, #0
 800b7a2:	f000 8778 	beq.w	800c696 <forward_conv2d_nl_pool+0xf3a>
 800b7a6:	f114 0218 	adds.w	r2, r4, #24
 800b7aa:	f8dc 5000 	ldr.w	r5, [ip]
 800b7ae:	d005      	beq.n	800b7bc <forward_conv2d_nl_pool+0x60>
 800b7b0:	8b22      	ldrh	r2, [r4, #24]
 800b7b2:	2a01      	cmp	r2, #1
 800b7b4:	f240 8768 	bls.w	800c688 <forward_conv2d_nl_pool+0xf2c>
 800b7b8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800b7bc:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800b7c0:	f8d6 b018 	ldr.w	fp, [r6, #24]
 800b7c4:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800b7c8:	f8db 1008 	ldr.w	r1, [fp, #8]
 800b7cc:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800b7d0:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
 800b7d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b7d8:	6b86      	ldr	r6, [r0, #56]	; 0x38
 800b7da:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800b7de:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800b7e2:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800b7e6:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800b7ea:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800b7ee:	f8d5 c018 	ldr.w	ip, [r5, #24]
 800b7f2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800b7f6:	f8de 1004 	ldr.w	r1, [lr, #4]
 800b7fa:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 800b7fe:	f8de 100c 	ldr.w	r1, [lr, #12]
 800b802:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 800b806:	f8de 1008 	ldr.w	r1, [lr, #8]
 800b80a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800b80e:	6831      	ldr	r1, [r6, #0]
 800b810:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 800b814:	6871      	ldr	r1, [r6, #4]
 800b816:	68b6      	ldr	r6, [r6, #8]
 800b818:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 800b81c:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b820:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 800b824:	f8da 1008 	ldr.w	r1, [sl, #8]
 800b828:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800b82c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800b82e:	6809      	ldr	r1, [r1, #0]
 800b830:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800b834:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800b836:	6849      	ldr	r1, [r1, #4]
 800b838:	64f9      	str	r1, [r7, #76]	; 0x4c
 800b83a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800b83e:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800b842:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800b844:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 800b848:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800b84a:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800b84e:	6981      	ldr	r1, [r0, #24]
 800b850:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 800b854:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800b856:	6579      	str	r1, [r7, #84]	; 0x54
 800b858:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800b85a:	6539      	str	r1, [r7, #80]	; 0x50
 800b85c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800b85e:	e9d0 ab0b 	ldrd	sl, fp, [r0, #44]	; 0x2c
 800b862:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800b866:	2a00      	cmp	r2, #0
 800b868:	f000 8711 	beq.w	800c68e <forward_conv2d_nl_pool+0xf32>
 800b86c:	6992      	ldr	r2, [r2, #24]
 800b86e:	6892      	ldr	r2, [r2, #8]
 800b870:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800b874:	4680      	mov	r8, r0
 800b876:	69c2      	ldr	r2, [r0, #28]
 800b878:	2c00      	cmp	r4, #0
 800b87a:	f000 8510 	beq.w	800c29e <forward_conv2d_nl_pool+0xb42>
 800b87e:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 800b882:	6892      	ldr	r2, [r2, #8]
 800b884:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b88e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b892:	f001 fc29 	bl	800d0e8 <ai_array_get_byte_size>
 800b896:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b89a:	f8d5 c018 	ldr.w	ip, [r5, #24]
 800b89e:	881a      	ldrh	r2, [r3, #0]
 800b8a0:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 800b8a4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800b8a8:	f8b7 0144 	ldrh.w	r0, [r7, #324]	; 0x144
 800b8ac:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800b8b0:	fa10 f486 	uxtah	r4, r0, r6
 800b8b4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800b8b8:	1e55      	subs	r5, r2, #1
 800b8ba:	fa1f f28b 	uxth.w	r2, fp
 800b8be:	f8dc e000 	ldr.w	lr, [ip]
 800b8c2:	440c      	add	r4, r1
 800b8c4:	3a01      	subs	r2, #1
 800b8c6:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 800b8ca:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800b8ce:	f3ce 16c6 	ubfx	r6, lr, #7, #7
 800b8d2:	f8b7 0148 	ldrh.w	r0, [r7, #328]	; 0x148
 800b8d6:	fb05 1102 	mla	r1, r5, r2, r1
 800b8da:	fa1f f28a 	uxth.w	r2, sl
 800b8de:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 800b8e2:	f3ce 5041 	ubfx	r0, lr, #21, #2
 800b8e6:	6479      	str	r1, [r7, #68]	; 0x44
 800b8e8:	3a01      	subs	r2, #1
 800b8ea:	fa46 f000 	asr.w	r0, r6, r0
 800b8ee:	f3ce 4643 	ubfx	r6, lr, #17, #4
 800b8f2:	eba4 0e01 	sub.w	lr, r4, r1
 800b8f6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800b8fa:	f8d8 5020 	ldr.w	r5, [r8, #32]
 800b8fe:	b280      	uxth	r0, r0
 800b900:	1e4c      	subs	r4, r1, #1
 800b902:	f8c7 50d0 	str.w	r5, [r7, #208]	; 0xd0
 800b906:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800b90a:	f8b7 4138 	ldrh.w	r4, [r7, #312]	; 0x138
 800b90e:	4d80      	ldr	r5, [pc, #512]	; (800bb10 <forward_conv2d_nl_pool+0x3b4>)
 800b910:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
 800b914:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800b918:	fb04 1402 	mla	r4, r4, r2, r1
 800b91c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800b920:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800b924:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800b928:	460c      	mov	r4, r1
 800b92a:	2900      	cmp	r1, #0
 800b92c:	bf08      	it	eq
 800b92e:	462c      	moveq	r4, r5
 800b930:	f8d8 1054 	ldr.w	r1, [r8, #84]	; 0x54
 800b934:	2e04      	cmp	r6, #4
 800b936:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 800b93a:	64b9      	str	r1, [r7, #72]	; 0x48
 800b93c:	f8d8 1040 	ldr.w	r1, [r8, #64]	; 0x40
 800b940:	fbbe f4f2 	udiv	r4, lr, r2
 800b944:	f104 0201 	add.w	r2, r4, #1
 800b948:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800b94c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b950:	f000 847b 	beq.w	800c24a <forward_conv2d_nl_pool+0xaee>
 800b954:	2e08      	cmp	r6, #8
 800b956:	f000 8478 	beq.w	800c24a <forward_conv2d_nl_pool+0xaee>
 800b95a:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800b95e:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800b962:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 800b966:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800b96a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800b96e:	2a03      	cmp	r2, #3
 800b970:	f240 8684 	bls.w	800c67c <forward_conv2d_nl_pool+0xf20>
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f000 850f 	beq.w	800c39c <forward_conv2d_nl_pool+0xc40>
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800b984:	68da      	ldr	r2, [r3, #12]
 800b986:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800b98a:	4249      	negs	r1, r1
 800b98c:	699b      	ldr	r3, [r3, #24]
 800b98e:	6896      	ldr	r6, [r2, #8]
 800b990:	6898      	ldr	r0, [r3, #8]
 800b992:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800b996:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 800b99a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800b99e:	f8c7 6134 	str.w	r6, [r7, #308]	; 0x134
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	f000 82af 	beq.w	800bf06 <forward_conv2d_nl_pool+0x7aa>
 800b9a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ac:	fa0f f18a 	sxth.w	r1, sl
 800b9b0:	fa0f f08b 	sxth.w	r0, fp
 800b9b4:	ed9f 8a57 	vldr	s16, [pc, #348]	; 800bb14 <forward_conv2d_nl_pool+0x3b8>
 800b9b8:	461c      	mov	r4, r3
 800b9ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800b9be:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800b9c2:	fb04 f203 	mul.w	r2, r4, r3
 800b9c6:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800b9ca:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800b9ce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 800b9d2:	fb01 f502 	mul.w	r5, r1, r2
 800b9d6:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800b9da:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800b9de:	00a3      	lsls	r3, r4, #2
 800b9e0:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800b9e4:	fb00 f303 	mul.w	r3, r0, r3
 800b9e8:	4694      	mov	ip, r2
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	0080      	lsls	r0, r0, #2
 800b9ee:	f8c7 5088 	str.w	r5, [r7, #136]	; 0x88
 800b9f2:	4264      	negs	r4, r4
 800b9f4:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 800b9f8:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800b9fc:	f8b7 512c 	ldrh.w	r5, [r7, #300]	; 0x12c
 800ba00:	fb00 f202 	mul.w	r2, r0, r2
 800ba04:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800ba08:	f8c7 50d4 	str.w	r5, [r7, #212]	; 0xd4
 800ba0c:	008d      	lsls	r5, r1, #2
 800ba0e:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 800ba12:	0080      	lsls	r0, r0, #2
 800ba14:	460c      	mov	r4, r1
 800ba16:	fb0c f101 	mul.w	r1, ip, r1
 800ba1a:	f04f 0c00 	mov.w	ip, #0
 800ba1e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800ba22:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800ba26:	f8c7 c0e8 	str.w	ip, [r7, #232]	; 0xe8
 800ba2a:	fb06 fc03 	mul.w	ip, r6, r3
 800ba2e:	008b      	lsls	r3, r1, #2
 800ba30:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800ba34:	f8c7 c05c 	str.w	ip, [r7, #92]	; 0x5c
 800ba38:	4684      	mov	ip, r0
 800ba3a:	61fb      	str	r3, [r7, #28]
 800ba3c:	0093      	lsls	r3, r2, #2
 800ba3e:	fb0c fc01 	mul.w	ip, ip, r1
 800ba42:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800ba46:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba48:	468e      	mov	lr, r1
 800ba4a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ba4e:	f8c7 c084 	str.w	ip, [r7, #132]	; 0x84
 800ba52:	fb03 fc02 	mul.w	ip, r3, r2
 800ba56:	2200      	movs	r2, #0
 800ba58:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800ba5c:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800ba60:	009a      	lsls	r2, r3, #2
 800ba62:	677d      	str	r5, [r7, #116]	; 0x74
 800ba64:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 800ba68:	643a      	str	r2, [r7, #64]	; 0x40
 800ba6a:	462a      	mov	r2, r5
 800ba6c:	fb01 fc04 	mul.w	ip, r1, r4
 800ba70:	fb00 f505 	mul.w	r5, r0, r5
 800ba74:	f8c7 c02c 	str.w	ip, [r7, #44]	; 0x2c
 800ba78:	62bd      	str	r5, [r7, #40]	; 0x28
 800ba7a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800ba7e:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 800ba82:	fb02 f500 	mul.w	r5, r2, r0
 800ba86:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800ba8a:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800ba8e:	fb04 f402 	mul.w	r4, r4, r2
 800ba92:	fb00 f006 	mul.w	r0, r0, r6
 800ba96:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800ba9a:	ea4f 0b81 	mov.w	fp, r1, lsl #2
 800ba9e:	61bd      	str	r5, [r7, #24]
 800baa0:	6278      	str	r0, [r7, #36]	; 0x24
 800baa2:	010d      	lsls	r5, r1, #4
 800baa4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800baa8:	617c      	str	r4, [r7, #20]
 800baaa:	00cc      	lsls	r4, r1, #3
 800baac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bab0:	46aa      	mov	sl, r5
 800bab2:	fb03 f200 	mul.w	r2, r3, r0
 800bab6:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800baba:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800babe:	673a      	str	r2, [r7, #112]	; 0x70
 800bac0:	fb03 f301 	mul.w	r3, r3, r1
 800bac4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bac8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800bacc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800bad0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f340 81ad 	ble.w	800be34 <forward_conv2d_nl_pool+0x6d8>
 800bada:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800bade:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bae2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bae6:	2900      	cmp	r1, #0
 800bae8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800baea:	441a      	add	r2, r3
 800baec:	bfb4      	ite	lt
 800baee:	2100      	movlt	r1, #0
 800baf0:	2300      	movge	r3, #0
 800baf2:	4282      	cmp	r2, r0
 800baf4:	bf28      	it	cs
 800baf6:	4602      	movcs	r2, r0
 800baf8:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800bafc:	2801      	cmp	r0, #1
 800bafe:	f000 8226 	beq.w	800bf4e <forward_conv2d_nl_pool+0x7f2>
 800bb02:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800bb06:	4281      	cmp	r1, r0
 800bb08:	f000 845a 	beq.w	800c3c0 <forward_conv2d_nl_pool+0xc64>
 800bb0c:	e004      	b.n	800bb18 <forward_conv2d_nl_pool+0x3bc>
 800bb0e:	bf00      	nop
 800bb10:	0800b0dd 	.word	0x0800b0dd
 800bb14:	00000000 	.word	0x00000000
 800bb18:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 800bb1c:	2900      	cmp	r1, #0
 800bb1e:	f000 8438 	beq.w	800c392 <forward_conv2d_nl_pool+0xc36>
 800bb22:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800bb26:	1ad2      	subs	r2, r2, r3
 800bb28:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800bb2c:	181d      	adds	r5, r3, r0
 800bb2e:	f8c7 a010 	str.w	sl, [r7, #16]
 800bb32:	f8c7 40fc 	str.w	r4, [r7, #252]	; 0xfc
 800bb36:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 800bb3a:	3d01      	subs	r5, #1
 800bb3c:	f8c7 b020 	str.w	fp, [r7, #32]
 800bb40:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 800bb44:	2400      	movs	r4, #0
 800bb46:	fb93 f1f0 	sdiv	r1, r3, r0
 800bb4a:	fb00 3111 	mls	r1, r0, r1, r3
 800bb4e:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 800bb52:	4604      	mov	r4, r0
 800bb54:	1a41      	subs	r1, r0, r1
 800bb56:	fb91 f0f0 	sdiv	r0, r1, r0
 800bb5a:	fb04 1110 	mls	r1, r4, r0, r1
 800bb5e:	4620      	mov	r0, r4
 800bb60:	1a52      	subs	r2, r2, r1
 800bb62:	4419      	add	r1, r3
 800bb64:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bb68:	4422      	add	r2, r4
 800bb6a:	f8d7 4124 	ldr.w	r4, [r7, #292]	; 0x124
 800bb6e:	fb03 f301 	mul.w	r3, r3, r1
 800bb72:	3a01      	subs	r2, #1
 800bb74:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bb76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bb7a:	fb92 f8f0 	sdiv	r8, r2, r0
 800bb7e:	4619      	mov	r1, r3
 800bb80:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bb84:	46c2      	mov	sl, r8
 800bb86:	fbb1 f3f4 	udiv	r3, r1, r4
 800bb8a:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800bb8e:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 800bb92:	fb95 f5f0 	sdiv	r5, r5, r0
 800bb96:	eba1 0008 	sub.w	r0, r1, r8
 800bb9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb9c:	eba1 0c03 	sub.w	ip, r1, r3
 800bba0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800bba4:	fbb2 f2f4 	udiv	r2, r2, r4
 800bba8:	fb0e f403 	mul.w	r4, lr, r3
 800bbac:	0096      	lsls	r6, r2, #2
 800bbae:	fb03 f305 	mul.w	r3, r3, r5
 800bbb2:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800bbb6:	66ba      	str	r2, [r7, #104]	; 0x68
 800bbb8:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800bbbc:	667b      	str	r3, [r7, #100]	; 0x64
 800bbbe:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800bbc2:	fb04 f300 	mul.w	r3, r4, r0
 800bbc6:	66fe      	str	r6, [r7, #108]	; 0x6c
 800bbc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bbcc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bbd0:	1b9b      	subs	r3, r3, r6
 800bbd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bbd6:	008b      	lsls	r3, r1, #2
 800bbd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbda:	00d3      	lsls	r3, r2, #3
 800bbdc:	637b      	str	r3, [r7, #52]	; 0x34
 800bbde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbe0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800bbe4:	189e      	adds	r6, r3, r2
 800bbe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f2c0 819a 	blt.w	800bf24 <forward_conv2d_nl_pool+0x7c8>
 800bbf0:	2100      	movs	r1, #0
 800bbf2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800bbf4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bbf8:	4688      	mov	r8, r1
 800bbfa:	460d      	mov	r5, r1
 800bbfc:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 800bc00:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 800bc04:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800bc08:	0080      	lsls	r0, r0, #2
 800bc0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc0e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bc12:	4422      	add	r2, r4
 800bc14:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 800bc18:	4423      	add	r3, r4
 800bc1a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800bc1e:	42a2      	cmp	r2, r4
 800bc20:	bf94      	ite	ls
 800bc22:	ebc5 0202 	rsbls	r2, r5, r2
 800bc26:	ebc5 0204 	rsbhi	r2, r5, r4
 800bc2a:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 800bc2e:	eb08 0403 	add.w	r4, r8, r3
 800bc32:	1a52      	subs	r2, r2, r1
 800bc34:	462b      	mov	r3, r5
 800bc36:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800bc3a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800bc3e:	2d00      	cmp	r5, #0
 800bc40:	bf08      	it	eq
 800bc42:	4633      	moveq	r3, r6
 800bc44:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800bc48:	440a      	add	r2, r1
 800bc4a:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 800bc4e:	42b3      	cmp	r3, r6
 800bc50:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 800bc54:	fb00 5004 	mla	r0, r0, r4, r5
 800bc58:	460a      	mov	r2, r1
 800bc5a:	fe08 6a06 	vseleq.f32	s12, s16, s12
 800bc5e:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 800bc62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc64:	fb96 f6f1 	sdiv	r6, r6, r1
 800bc68:	fb9c f5f1 	sdiv	r5, ip, r1
 800bc6c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bc6e:	440d      	add	r5, r1
 800bc70:	fb06 0112 	mls	r1, r6, r2, r0
 800bc74:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800bc78:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800bc7c:	fb0e 0505 	mla	r5, lr, r5, r0
 800bc80:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800bc84:	1b92      	subs	r2, r2, r6
 800bc86:	2800      	cmp	r0, #0
 800bc88:	d06e      	beq.n	800bd68 <forward_conv2d_nl_pool+0x60c>
 800bc8a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800bc8c:	fb0e f802 	mul.w	r8, lr, r2
 800bc90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bc92:	fb00 fb01 	mul.w	fp, r0, r1
 800bc96:	2a00      	cmp	r2, #0
 800bc98:	d066      	beq.n	800bd68 <forward_conv2d_nl_pool+0x60c>
 800bc9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bc9c:	189a      	adds	r2, r3, r2
 800bc9e:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800bca2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800bca6:	1ad3      	subs	r3, r2, r3
 800bca8:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcaa:	2300      	movs	r3, #0
 800bcac:	67bb      	str	r3, [r7, #120]	; 0x78
 800bcae:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800bcb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bcb6:	4413      	add	r3, r2
 800bcb8:	188a      	adds	r2, r1, r2
 800bcba:	663b      	str	r3, [r7, #96]	; 0x60
 800bcbc:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800bcc0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800bcc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bcc8:	f1ba 0f00 	cmp.w	sl, #0
 800bccc:	ecf3 7a01 	vldmia	r3!, {s15}
 800bcd0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800bcd4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bcd8:	f340 8122 	ble.w	800bf20 <forward_conv2d_nl_pool+0x7c4>
 800bcdc:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800bce0:	f04f 0c00 	mov.w	ip, #0
 800bce4:	2e00      	cmp	r6, #0
 800bce6:	dd19      	ble.n	800bd1c <forward_conv2d_nl_pool+0x5c0>
 800bce8:	2100      	movs	r1, #0
 800bcea:	eb00 040e 	add.w	r4, r0, lr
 800bcee:	4284      	cmp	r4, r0
 800bcf0:	d910      	bls.n	800bd14 <forward_conv2d_nl_pool+0x5b8>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	462a      	mov	r2, r5
 800bcf6:	ecb3 7a01 	vldmia	r3!, {s14}
 800bcfa:	ecf2 6a01 	vldmia	r2!, {s13}
 800bcfe:	429c      	cmp	r4, r3
 800bd00:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bd04:	d8f7      	bhi.n	800bcf6 <forward_conv2d_nl_pool+0x59a>
 800bd06:	43c3      	mvns	r3, r0
 800bd08:	441c      	add	r4, r3
 800bd0a:	f024 0403 	bic.w	r4, r4, #3
 800bd0e:	3404      	adds	r4, #4
 800bd10:	4425      	add	r5, r4
 800bd12:	4420      	add	r0, r4
 800bd14:	3101      	adds	r1, #1
 800bd16:	4448      	add	r0, r9
 800bd18:	428e      	cmp	r6, r1
 800bd1a:	d1e6      	bne.n	800bcea <forward_conv2d_nl_pool+0x58e>
 800bd1c:	f10c 0c01 	add.w	ip, ip, #1
 800bd20:	4458      	add	r0, fp
 800bd22:	4445      	add	r5, r8
 800bd24:	45e2      	cmp	sl, ip
 800bd26:	d1dd      	bne.n	800bce4 <forward_conv2d_nl_pool+0x588>
 800bd28:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800bd2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd30:	441d      	add	r5, r3
 800bd32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd36:	ece3 7a01 	vstmia	r3!, {s15}
 800bd3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bd3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d1be      	bne.n	800bcc4 <forward_conv2d_nl_pool+0x568>
 800bd46:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800bd4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bd4c:	4472      	add	r2, lr
 800bd4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd50:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800bd54:	3301      	adds	r3, #1
 800bd56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bd58:	67bb      	str	r3, [r7, #120]	; 0x78
 800bd5a:	1a52      	subs	r2, r2, r1
 800bd5c:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800bd60:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d1a2      	bne.n	800bcae <forward_conv2d_nl_pool+0x552>
 800bd68:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800bd6c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800bd70:	4608      	mov	r0, r1
 800bd72:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800bd76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd7a:	4410      	add	r0, r2
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
 800bd82:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800bd86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd8a:	4401      	add	r1, r0
 800bd8c:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800bd90:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 800bd94:	1a8a      	subs	r2, r1, r2
 800bd96:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800bd9a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	f47f af1d 	bne.w	800bbde <forward_conv2d_nl_pool+0x482>
 800bda4:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800bda8:	f8d7 a010 	ldr.w	sl, [r7, #16]
 800bdac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bdb0:	699b      	ldr	r3, [r3, #24]
 800bdb2:	2400      	movs	r4, #0
 800bdb4:	f8d7 509c 	ldr.w	r5, [r7, #156]	; 0x9c
 800bdb8:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 800bdbc:	f8d7 8138 	ldr.w	r8, [r7, #312]	; 0x138
 800bdc0:	f8d7 90dc 	ldr.w	r9, [r7, #220]	; 0xdc
 800bdc4:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800bdc8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800bdcc:	609e      	str	r6, [r3, #8]
 800bdce:	462b      	mov	r3, r5
 800bdd0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800bdd4:	4405      	add	r5, r0
 800bdd6:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800bdda:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bdde:	4406      	add	r6, r0
 800bde0:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 800bde4:	4608      	mov	r0, r1
 800bde6:	47a0      	blx	r4
 800bde8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800bdec:	eba5 0009 	sub.w	r0, r5, r9
 800bdf0:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 800bdf4:	6859      	ldr	r1, [r3, #4]
 800bdf6:	68da      	ldr	r2, [r3, #12]
 800bdf8:	42a0      	cmp	r0, r4
 800bdfa:	bfa8      	it	ge
 800bdfc:	464d      	movge	r5, r9
 800bdfe:	0089      	lsls	r1, r1, #2
 800be00:	1850      	adds	r0, r2, r1
 800be02:	4286      	cmp	r6, r0
 800be04:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800be08:	bf28      	it	cs
 800be0a:	1a76      	subcs	r6, r6, r1
 800be0c:	3001      	adds	r0, #1
 800be0e:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 800be12:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
 800be16:	4281      	cmp	r1, r0
 800be18:	d1d6      	bne.n	800bdc8 <forward_conv2d_nl_pool+0x66c>
 800be1a:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
 800be1e:	f8c7 6148 	str.w	r6, [r7, #328]	; 0x148
 800be22:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800be26:	609a      	str	r2, [r3, #8]
 800be28:	3101      	adds	r1, #1
 800be2a:	b20b      	sxth	r3, r1
 800be2c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800be30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be34:	3b01      	subs	r3, #1
 800be36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800be3a:	f100 825d 	bmi.w	800c2f8 <forward_conv2d_nl_pool+0xb9c>
 800be3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800be42:	f8d7 5144 	ldr.w	r5, [r7, #324]	; 0x144
 800be46:	42ab      	cmp	r3, r5
 800be48:	f200 823b 	bhi.w	800c2c2 <forward_conv2d_nl_pool+0xb66>
 800be4c:	f8d7 90c0 	ldr.w	r9, [r7, #192]	; 0xc0
 800be50:	b29c      	uxth	r4, r3
 800be52:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800be56:	2101      	movs	r1, #1
 800be58:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800be5c:	6998      	ldr	r0, [r3, #24]
 800be5e:	fa1f f389 	uxth.w	r3, r9
 800be62:	9401      	str	r4, [sp, #4]
 800be64:	1aa2      	subs	r2, r4, r2
 800be66:	1aee      	subs	r6, r5, r3
 800be68:	f8d7 50b0 	ldr.w	r5, [r7, #176]	; 0xb0
 800be6c:	f8b7 4098 	ldrh.w	r4, [r7, #152]	; 0x98
 800be70:	b292      	uxth	r2, r2
 800be72:	9508      	str	r5, [sp, #32]
 800be74:	b236      	sxth	r6, r6
 800be76:	f8b7 5050 	ldrh.w	r5, [r7, #80]	; 0x50
 800be7a:	9305      	str	r3, [sp, #20]
 800be7c:	f8d7 808c 	ldr.w	r8, [r7, #140]	; 0x8c
 800be80:	9107      	str	r1, [sp, #28]
 800be82:	fa1f f388 	uxth.w	r3, r8
 800be86:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 800be8a:	9406      	str	r4, [sp, #24]
 800be8c:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 800be90:	9504      	str	r5, [sp, #16]
 800be92:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 800be96:	9303      	str	r3, [sp, #12]
 800be98:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 800be9c:	9102      	str	r1, [sp, #8]
 800be9e:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800bea2:	9400      	str	r4, [sp, #0]
 800bea4:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 800bea8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 800beaa:	3401      	adds	r4, #1
 800beac:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 800beb0:	47b0      	blx	r6
 800beb2:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 800beb6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800beba:	fa0f f389 	sxth.w	r3, r9
 800bebe:	462e      	mov	r6, r5
 800bec0:	6dbd      	ldr	r5, [r7, #88]	; 0x58
 800bec2:	688a      	ldr	r2, [r1, #8]
 800bec4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800bec8:	442a      	add	r2, r5
 800beca:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 800bece:	4406      	add	r6, r0
 800bed0:	1a28      	subs	r0, r5, r0
 800bed2:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 800bed4:	f8c7 6118 	str.w	r6, [r7, #280]	; 0x118
 800bed8:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 800bedc:	4640      	mov	r0, r8
 800bede:	608a      	str	r2, [r1, #8]
 800bee0:	1ac3      	subs	r3, r0, r3
 800bee2:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800bee6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800beea:	4428      	add	r0, r5
 800beec:	b21b      	sxth	r3, r3
 800beee:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
 800bef2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800befa:	42a3      	cmp	r3, r4
 800befc:	f63f ade8 	bhi.w	800bad0 <forward_conv2d_nl_pool+0x374>
 800bf00:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bf04:	699b      	ldr	r3, [r3, #24]
 800bf06:	68da      	ldr	r2, [r3, #12]
 800bf08:	609a      	str	r2, [r3, #8]
 800bf0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bf0e:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 800bf12:	68d3      	ldr	r3, [r2, #12]
 800bf14:	6093      	str	r3, [r2, #8]
 800bf16:	46bd      	mov	sp, r7
 800bf18:	ecbd 8b08 	vpop	{d8-d11}
 800bf1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf20:	461a      	mov	r2, r3
 800bf22:	e703      	b.n	800bd2c <forward_conv2d_nl_pool+0x5d0>
 800bf24:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 800bf28:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800bf2c:	460d      	mov	r5, r1
 800bf2e:	4688      	mov	r8, r1
 800bf30:	1853      	adds	r3, r2, r1
 800bf32:	4611      	mov	r1, r2
 800bf34:	fb95 f2f2 	sdiv	r2, r5, r2
 800bf38:	fb01 5212 	mls	r2, r1, r2, r5
 800bf3c:	460c      	mov	r4, r1
 800bf3e:	1a8a      	subs	r2, r1, r2
 800bf40:	fb92 f1f1 	sdiv	r1, r2, r1
 800bf44:	fb04 2111 	mls	r1, r4, r1, r2
 800bf48:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bf4a:	1888      	adds	r0, r1, r2
 800bf4c:	e656      	b.n	800bbfc <forward_conv2d_nl_pool+0x4a0>
 800bf4e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800bf52:	2801      	cmp	r0, #1
 800bf54:	f47f ade0 	bne.w	800bb18 <forward_conv2d_nl_pool+0x3bc>
 800bf58:	1ad2      	subs	r2, r2, r3
 800bf5a:	69f8      	ldr	r0, [r7, #28]
 800bf5c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800bf60:	fb00 f101 	mul.w	r1, r0, r1
 800bf64:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bf68:	67f9      	str	r1, [r7, #124]	; 0x7c
 800bf6a:	2a00      	cmp	r2, #0
 800bf6c:	f000 8163 	beq.w	800c236 <forward_conv2d_nl_pool+0xada>
 800bf70:	69ba      	ldr	r2, [r7, #24]
 800bf72:	6978      	ldr	r0, [r7, #20]
 800bf74:	fb02 f203 	mul.w	r2, r2, r3
 800bf78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bf7c:	4401      	add	r1, r0
 800bf7e:	f8c7 b020 	str.w	fp, [r7, #32]
 800bf82:	330a      	adds	r3, #10
 800bf84:	66ba      	str	r2, [r7, #104]	; 0x68
 800bf86:	63f9      	str	r1, [r7, #60]	; 0x3c
 800bf88:	1a12      	subs	r2, r2, r0
 800bf8a:	f023 0307 	bic.w	r3, r3, #7
 800bf8e:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800bf92:	663a      	str	r2, [r7, #96]	; 0x60
 800bf94:	637b      	str	r3, [r7, #52]	; 0x34
 800bf96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf9a:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 800bf9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bfa2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bfa6:	f8c7 a010 	str.w	sl, [r7, #16]
 800bfaa:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800bfae:	2300      	movs	r3, #0
 800bfb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bfb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfb6:	f8c7 d078 	str.w	sp, [r7, #120]	; 0x78
 800bfba:	ebad 0d03 	sub.w	sp, sp, r3
 800bfbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bfc2:	ab0a      	add	r3, sp, #40	; 0x28
 800bfc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bfc6:	b132      	cbz	r2, 800bfd6 <forward_conv2d_nl_pool+0x87a>
 800bfc8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800bfd2:	f001 fa5d 	bl	800d490 <memcpy>
 800bfd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	f000 81ed 	beq.w	800c3ba <forward_conv2d_nl_pool+0xc5e>
 800bfe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bfe4:	ed93 2a00 	vldr	s4, [r3]
 800bfe8:	3304      	adds	r3, #4
 800bfea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bfee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	f000 8103 	beq.w	800c1fe <forward_conv2d_nl_pool+0xaa2>
 800bff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bffc:	f04f 0b00 	mov.w	fp, #0
 800c000:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800c004:	eb03 0802 	add.w	r8, r3, r2
 800c008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c00a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800c00e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c010:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c018:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c01c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c020:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c028:	2b00      	cmp	r3, #0
 800c02a:	f2c0 81be 	blt.w	800c3aa <forward_conv2d_nl_pool+0xc4e>
 800c02e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800c032:	2300      	movs	r3, #0
 800c034:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c036:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800c03a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800c03e:	4422      	add	r2, r4
 800c040:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800c042:	4540      	cmp	r0, r8
 800c044:	bf94      	ite	ls
 800c046:	ebc3 0300 	rsbls	r3, r3, r0
 800c04a:	ebc3 0308 	rsbhi	r3, r3, r8
 800c04e:	4421      	add	r1, r4
 800c050:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800c054:	1ac0      	subs	r0, r0, r3
 800c056:	eba4 0903 	sub.w	r9, r4, r3
 800c05a:	f8d7 4130 	ldr.w	r4, [r7, #304]	; 0x130
 800c05e:	fb03 f304 	mul.w	r3, r3, r4
 800c062:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800c066:	2c00      	cmp	r4, #0
 800c068:	f340 819c 	ble.w	800c3a4 <forward_conv2d_nl_pool+0xc48>
 800c06c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 800c06e:	f023 0c0f 	bic.w	ip, r3, #15
 800c072:	eef0 6a42 	vmov.f32	s13, s4
 800c076:	f04f 0e00 	mov.w	lr, #0
 800c07a:	fb04 f000 	mul.w	r0, r4, r0
 800c07e:	fb04 f909 	mul.w	r9, r4, r9
 800c082:	6678      	str	r0, [r7, #100]	; 0x64
 800c084:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800c088:	0900      	lsrs	r0, r0, #4
 800c08a:	3001      	adds	r0, #1
 800c08c:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800c090:	0100      	lsls	r0, r0, #4
 800c092:	63b8      	str	r0, [r7, #56]	; 0x38
 800c094:	f1bc 0f00 	cmp.w	ip, #0
 800c098:	f340 8182 	ble.w	800c3a0 <forward_conv2d_nl_pool+0xc44>
 800c09c:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800c0a0:	f101 0040 	add.w	r0, r1, #64	; 0x40
 800c0a4:	2500      	movs	r5, #0
 800c0a6:	ed10 7a0f 	vldr	s14, [r0, #-60]	; 0xffffffc4
 800c0aa:	3510      	adds	r5, #16
 800c0ac:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 800c0b0:	3040      	adds	r0, #64	; 0x40
 800c0b2:	ed14 6a10 	vldr	s12, [r4, #-64]	; 0xffffffc0
 800c0b6:	4565      	cmp	r5, ip
 800c0b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0bc:	ed10 7a20 	vldr	s14, [r0, #-128]	; 0xffffff80
 800c0c0:	ed10 3a1e 	vldr	s6, [r0, #-120]	; 0xffffff88
 800c0c4:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800c0c8:	ed54 3a1e 	vldr	s7, [r4, #-120]	; 0xffffff88
 800c0cc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c0d0:	ed10 4a1d 	vldr	s8, [r0, #-116]	; 0xffffff8c
 800c0d4:	ed54 4a1d 	vldr	s9, [r4, #-116]	; 0xffffff8c
 800c0d8:	ed10 5a1c 	vldr	s10, [r0, #-112]	; 0xffffff90
 800c0dc:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 800c0e0:	ed10 6a1b 	vldr	s12, [r0, #-108]	; 0xffffff94
 800c0e4:	ed14 7a1b 	vldr	s14, [r4, #-108]	; 0xffffff94
 800c0e8:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c0ec:	ed50 ba1a 	vldr	s23, [r0, #-104]	; 0xffffff98
 800c0f0:	ed14 ba1a 	vldr	s22, [r4, #-104]	; 0xffffff98
 800c0f4:	ed50 aa19 	vldr	s21, [r0, #-100]	; 0xffffff9c
 800c0f8:	ed14 aa19 	vldr	s20, [r4, #-100]	; 0xffffff9c
 800c0fc:	ed54 9a18 	vldr	s19, [r4, #-96]	; 0xffffffa0
 800c100:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 800c104:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c108:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 800c10c:	ed14 0a17 	vldr	s0, [r4, #-92]	; 0xffffffa4
 800c110:	ed54 0a16 	vldr	s1, [r4, #-88]	; 0xffffffa8
 800c114:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 800c118:	ed50 1a15 	vldr	s3, [r0, #-84]	; 0xffffffac
 800c11c:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 800c120:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c124:	ed14 3a14 	vldr	s6, [r4, #-80]	; 0xffffffb0
 800c128:	ed50 3a14 	vldr	s7, [r0, #-80]	; 0xffffffb0
 800c12c:	ed14 4a13 	vldr	s8, [r4, #-76]	; 0xffffffb4
 800c130:	ed50 4a13 	vldr	s9, [r0, #-76]	; 0xffffffb4
 800c134:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 800c138:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800c13c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c140:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 800c144:	ed14 7a11 	vldr	s14, [r4, #-68]	; 0xffffffbc
 800c148:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800c14c:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800c150:	eee9 7a89 	vfma.f32	s15, s19, s18
 800c154:	eee8 7a80 	vfma.f32	s15, s17, s0
 800c158:	eee0 7a81 	vfma.f32	s15, s1, s2
 800c15c:	eee1 7aa2 	vfma.f32	s15, s3, s5
 800c160:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c164:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c168:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c16c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c170:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c174:	db97      	blt.n	800c0a6 <forward_conv2d_nl_pool+0x94a>
 800c176:	4452      	add	r2, sl
 800c178:	4451      	add	r1, sl
 800c17a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c17c:	4283      	cmp	r3, r0
 800c17e:	dd0f      	ble.n	800c1a0 <forward_conv2d_nl_pool+0xa44>
 800c180:	4604      	mov	r4, r0
 800c182:	4616      	mov	r6, r2
 800c184:	460d      	mov	r5, r1
 800c186:	3401      	adds	r4, #1
 800c188:	ecb5 7a01 	vldmia	r5!, {s14}
 800c18c:	ecf6 7a01 	vldmia	r6!, {s15}
 800c190:	42a3      	cmp	r3, r4
 800c192:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c196:	d1f6      	bne.n	800c186 <forward_conv2d_nl_pool+0xa2a>
 800c198:	1a18      	subs	r0, r3, r0
 800c19a:	0080      	lsls	r0, r0, #2
 800c19c:	4401      	add	r1, r0
 800c19e:	4402      	add	r2, r0
 800c1a0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c1a2:	f10e 0e01 	add.w	lr, lr, #1
 800c1a6:	444a      	add	r2, r9
 800c1a8:	4401      	add	r1, r0
 800c1aa:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800c1ae:	4570      	cmp	r0, lr
 800c1b0:	f47f af70 	bne.w	800c094 <forward_conv2d_nl_pool+0x938>
 800c1b4:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800c1b8:	f10b 0b01 	add.w	fp, fp, #1
 800c1bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c1c0:	4608      	mov	r0, r1
 800c1c2:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800c1c6:	edc3 6a00 	vstr	s13, [r3]
 800c1ca:	440b      	add	r3, r1
 800c1cc:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 800c1d0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800c1d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1da:	4410      	add	r0, r2
 800c1dc:	eba8 0802 	sub.w	r8, r8, r2
 800c1e0:	1ac9      	subs	r1, r1, r3
 800c1e2:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 800c1e6:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 800c1ea:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800c1ee:	4419      	add	r1, r3
 800c1f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c1f4:	455b      	cmp	r3, fp
 800c1f6:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800c1fa:	f47f af13 	bne.w	800c024 <forward_conv2d_nl_pool+0x8c8>
 800c1fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c202:	3301      	adds	r3, #1
 800c204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c208:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c20c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800c210:	440a      	add	r2, r1
 800c212:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800c216:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800c21a:	f8d7 d078 	ldr.w	sp, [r7, #120]	; 0x78
 800c21e:	3204      	adds	r2, #4
 800c220:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800c224:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c228:	429a      	cmp	r2, r3
 800c22a:	f47f aec3 	bne.w	800bfb4 <forward_conv2d_nl_pool+0x858>
 800c22e:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800c232:	f8d7 a010 	ldr.w	sl, [r7, #16]
 800c236:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c23a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800c23e:	699b      	ldr	r3, [r3, #24]
 800c240:	2a00      	cmp	r2, #0
 800c242:	f47f adb6 	bne.w	800bdb2 <forward_conv2d_nl_pool+0x656>
 800c246:	68da      	ldr	r2, [r3, #12]
 800c248:	e5eb      	b.n	800be22 <forward_conv2d_nl_pool+0x6c6>
 800c24a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800c24e:	2a00      	cmp	r2, #0
 800c250:	f43f ab83 	beq.w	800b95a <forward_conv2d_nl_pool+0x1fe>
 800c254:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800c258:	2903      	cmp	r1, #3
 800c25a:	f240 820f 	bls.w	800c67c <forward_conv2d_nl_pool+0xf20>
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c262:	2b00      	cmp	r3, #0
 800c264:	f000 821e 	beq.w	800c6a4 <forward_conv2d_nl_pool+0xf48>
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	f000 821a 	beq.w	800c6a4 <forward_conv2d_nl_pool+0xf48>
 800c270:	699d      	ldr	r5, [r3, #24]
 800c272:	4603      	mov	r3, r0
 800c274:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800c278:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800c27c:	e9d5 5401 	ldrd	r5, r4, [r5, #4]
 800c280:	9000      	str	r0, [sp, #0]
 800c282:	9501      	str	r5, [sp, #4]
 800c284:	4620      	mov	r0, r4
 800c286:	f7ff fa19 	bl	800b6bc <ai_dict_decompress_f32>
 800c28a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800c28e:	b19c      	cbz	r4, 800c2b8 <forward_conv2d_nl_pool+0xb5c>
 800c290:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 800c294:	881a      	ldrh	r2, [r3, #0]
 800c296:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800c29a:	f7ff bb5e 	b.w	800b95a <forward_conv2d_nl_pool+0x1fe>
 800c29e:	2a00      	cmp	r2, #0
 800c2a0:	f000 8203 	beq.w	800c6aa <forward_conv2d_nl_pool+0xf4e>
 800c2a4:	6892      	ldr	r2, [r2, #8]
 800c2a6:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
 800c2aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800c2b4:	f7ff baf8 	b.w	800b8a8 <forward_conv2d_nl_pool+0x14c>
 800c2b8:	881a      	ldrh	r2, [r3, #0]
 800c2ba:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800c2be:	f7ff bb4c 	b.w	800b95a <forward_conv2d_nl_pool+0x1fe>
 800c2c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800c2c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c2ca:	4611      	mov	r1, r2
 800c2cc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800c2d0:	4419      	add	r1, r3
 800c2d2:	1ad3      	subs	r3, r2, r3
 800c2d4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c2d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c2da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c2de:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800c2e2:	4413      	add	r3, r2
 800c2e4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800c2e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c2ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	f63f abed 	bhi.w	800bad0 <forward_conv2d_nl_pool+0x374>
 800c2f6:	e603      	b.n	800bf00 <forward_conv2d_nl_pool+0x7a4>
 800c2f8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c2fc:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 800c300:	6999      	ldr	r1, [r3, #24]
 800c302:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800c306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c308:	fb02 0213 	mls	r2, r2, r3, r0
 800c30c:	68c8      	ldr	r0, [r1, #12]
 800c30e:	684b      	ldr	r3, [r1, #4]
 800c310:	4290      	cmp	r0, r2
 800c312:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800c316:	bf88      	it	hi
 800c318:	18d2      	addhi	r2, r2, r3
 800c31a:	18c1      	adds	r1, r0, r3
 800c31c:	4290      	cmp	r0, r2
 800c31e:	d216      	bcs.n	800c34e <forward_conv2d_nl_pool+0xbf2>
 800c320:	f9b7 00b4 	ldrsh.w	r0, [r7, #180]	; 0xb4
 800c324:	f8d7 4144 	ldr.w	r4, [r7, #324]	; 0x144
 800c328:	42a0      	cmp	r0, r4
 800c32a:	d010      	beq.n	800c34e <forward_conv2d_nl_pool+0xbf2>
 800c32c:	428a      	cmp	r2, r1
 800c32e:	d20e      	bcs.n	800c34e <forward_conv2d_nl_pool+0xbf2>
 800c330:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 800c334:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800c338:	f852 3b04 	ldr.w	r3, [r2], #4
 800c33c:	f840 3b04 	str.w	r3, [r0], #4
 800c340:	69a1      	ldr	r1, [r4, #24]
 800c342:	684b      	ldr	r3, [r1, #4]
 800c344:	68c9      	ldr	r1, [r1, #12]
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	4419      	add	r1, r3
 800c34a:	4291      	cmp	r1, r2
 800c34c:	d8f4      	bhi.n	800c338 <forward_conv2d_nl_pool+0xbdc>
 800c34e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800c352:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 800c356:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 800c358:	4420      	add	r0, r4
 800c35a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800c35e:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 800c362:	442c      	add	r4, r5
 800c364:	f8d7 50c0 	ldr.w	r5, [r7, #192]	; 0xc0
 800c368:	1a80      	subs	r0, r0, r2
 800c36a:	442a      	add	r2, r5
 800c36c:	428c      	cmp	r4, r1
 800c36e:	b200      	sxth	r0, r0
 800c370:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800c374:	b212      	sxth	r2, r2
 800c376:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 800c37a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800c37e:	4622      	mov	r2, r4
 800c380:	f4ff ad5d 	bcc.w	800be3e <forward_conv2d_nl_pool+0x6e2>
 800c384:	425b      	negs	r3, r3
 800c386:	441a      	add	r2, r3
 800c388:	428a      	cmp	r2, r1
 800c38a:	d2fc      	bcs.n	800c386 <forward_conv2d_nl_pool+0xc2a>
 800c38c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800c390:	e555      	b.n	800be3e <forward_conv2d_nl_pool+0x6e2>
 800c392:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c396:	699b      	ldr	r3, [r3, #24]
 800c398:	68da      	ldr	r2, [r3, #12]
 800c39a:	e542      	b.n	800be22 <forward_conv2d_nl_pool+0x6c6>
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	deff      	udf	#255	; 0xff
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	e6eb      	b.n	800c17c <forward_conv2d_nl_pool+0xa20>
 800c3a4:	eef0 6a42 	vmov.f32	s13, s4
 800c3a8:	e704      	b.n	800c1b4 <forward_conv2d_nl_pool+0xa58>
 800c3aa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c3ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c3b0:	eba8 0303 	sub.w	r3, r8, r3
 800c3b4:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 800c3b8:	e63d      	b.n	800c036 <forward_conv2d_nl_pool+0x8da>
 800c3ba:	eeb0 2a48 	vmov.f32	s4, s16
 800c3be:	e616      	b.n	800bfee <forward_conv2d_nl_pool+0x892>
 800c3c0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c3c4:	2901      	cmp	r1, #1
 800c3c6:	f47f aba7 	bne.w	800bb18 <forward_conv2d_nl_pool+0x3bc>
 800c3ca:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 800c3ce:	2900      	cmp	r1, #0
 800c3d0:	d0df      	beq.n	800c392 <forward_conv2d_nl_pool+0xc36>
 800c3d2:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800c3d6:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800c3da:	f8d7 613c 	ldr.w	r6, [r7, #316]	; 0x13c
 800c3de:	fbb1 f1f0 	udiv	r1, r1, r0
 800c3e2:	ebc1 7481 	rsb	r4, r1, r1, lsl #30
 800c3e6:	fb03 f506 	mul.w	r5, r3, r6
 800c3ea:	1ad0      	subs	r0, r2, r3
 800c3ec:	00b2      	lsls	r2, r6, #2
 800c3ee:	00a4      	lsls	r4, r4, #2
 800c3f0:	67fd      	str	r5, [r7, #124]	; 0x7c
 800c3f2:	f8d7 5104 	ldr.w	r5, [r7, #260]	; 0x104
 800c3f6:	663c      	str	r4, [r7, #96]	; 0x60
 800c3f8:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800c3fa:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 800c3fe:	1a28      	subs	r0, r5, r0
 800c400:	fb03 f304 	mul.w	r3, r3, r4
 800c404:	460d      	mov	r5, r1
 800c406:	63b9      	str	r1, [r7, #56]	; 0x38
 800c408:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 800c40c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c40e:	fb02 f300 	mul.w	r3, r2, r0
 800c412:	637b      	str	r3, [r7, #52]	; 0x34
 800c414:	00cb      	lsls	r3, r1, #3
 800c416:	607b      	str	r3, [r7, #4]
 800c418:	00ab      	lsls	r3, r5, #2
 800c41a:	60bb      	str	r3, [r7, #8]
 800c41c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c420:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800c424:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c428:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800c42c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c430:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c434:	2300      	movs	r3, #0
 800c436:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c43a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c43e:	2b00      	cmp	r3, #0
 800c440:	f2c0 8111 	blt.w	800c666 <forward_conv2d_nl_pool+0xf0a>
 800c444:	2400      	movs	r4, #0
 800c446:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c448:	4621      	mov	r1, r4
 800c44a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800c44e:	f8d7 6140 	ldr.w	r6, [r7, #320]	; 0x140
 800c452:	1818      	adds	r0, r3, r0
 800c454:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c458:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 800c45c:	18f3      	adds	r3, r6, r3
 800c45e:	4420      	add	r0, r4
 800c460:	461c      	mov	r4, r3
 800c462:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c466:	0080      	lsls	r0, r0, #2
 800c468:	429c      	cmp	r4, r3
 800c46a:	bf28      	it	cs
 800c46c:	461c      	movcs	r4, r3
 800c46e:	1a64      	subs	r4, r4, r1
 800c470:	2d00      	cmp	r5, #0
 800c472:	f000 80e9 	beq.w	800c648 <forward_conv2d_nl_pool+0xeec>
 800c476:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c47a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800c47e:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800c482:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 800c486:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800c48a:	428d      	cmp	r5, r1
 800c48c:	462a      	mov	r2, r5
 800c48e:	eba6 0104 	sub.w	r1, r6, r4
 800c492:	eba3 0304 	sub.w	r3, r3, r4
 800c496:	fe08 4a04 	vseleq.f32	s8, s16, s8
 800c49a:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 800c49c:	f8d7 60bc 	ldr.w	r6, [r7, #188]	; 0xbc
 800c4a0:	4428      	add	r0, r5
 800c4a2:	f8d7 5130 	ldr.w	r5, [r7, #304]	; 0x130
 800c4a6:	fb05 6e00 	mla	lr, r5, r0, r6
 800c4aa:	eb0e 000b 	add.w	r0, lr, fp
 800c4ae:	4586      	cmp	lr, r0
 800c4b0:	6238      	str	r0, [r7, #32]
 800c4b2:	f080 80a7 	bcs.w	800c604 <forward_conv2d_nl_pool+0xea8>
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	fb01 f10b 	mul.w	r1, r1, fp
 800c4bc:	f024 0803 	bic.w	r8, r4, #3
 800c4c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c6:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	f000 809a 	beq.w	800c604 <forward_conv2d_nl_pool+0xea8>
 800c4d0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800c4d2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800c4d6:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800c4da:	089b      	lsrs	r3, r3, #2
 800c4dc:	4401      	add	r1, r0
 800c4de:	68b8      	ldr	r0, [r7, #8]
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	1810      	adds	r0, r2, r0
 800c4e4:	1a8a      	subs	r2, r1, r2
 800c4e6:	613a      	str	r2, [r7, #16]
 800c4e8:	fb03 f20a 	mul.w	r2, r3, sl
 800c4ec:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 800c4f0:	66ba      	str	r2, [r7, #104]	; 0x68
 800c4f2:	011a      	lsls	r2, r3, #4
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c4f8:	667b      	str	r3, [r7, #100]	; 0x64
 800c4fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c4fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c500:	6939      	ldr	r1, [r7, #16]
 800c502:	4413      	add	r3, r2
 800c504:	188a      	adds	r2, r1, r2
 800c506:	60fb      	str	r3, [r7, #12]
 800c508:	67ba      	str	r2, [r7, #120]	; 0x78
 800c50a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c50e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c512:	ecf3 6a01 	vldmia	r3!, {s13}
 800c516:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c51a:	ee66 6a84 	vmul.f32	s13, s13, s8
 800c51e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c522:	2b00      	cmp	r3, #0
 800c524:	dd57      	ble.n	800c5d6 <forward_conv2d_nl_pool+0xe7a>
 800c526:	4676      	mov	r6, lr
 800c528:	f04f 0c00 	mov.w	ip, #0
 800c52c:	f1b8 0f00 	cmp.w	r8, #0
 800c530:	f340 8088 	ble.w	800c644 <forward_conv2d_nl_pool+0xee8>
 800c534:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c538:	f109 0310 	add.w	r3, r9, #16
 800c53c:	2000      	movs	r0, #0
 800c53e:	18b1      	adds	r1, r6, r2
 800c540:	4632      	mov	r2, r6
 800c542:	eb02 050b 	add.w	r5, r2, fp
 800c546:	ed53 7a03 	vldr	s15, [r3, #-12]
 800c54a:	ed92 6a00 	vldr	s12, [r2]
 800c54e:	3004      	adds	r0, #4
 800c550:	ed95 7a00 	vldr	s14, [r5]
 800c554:	eb01 050b 	add.w	r5, r1, fp
 800c558:	ed53 4a04 	vldr	s9, [r3, #-16]
 800c55c:	4540      	cmp	r0, r8
 800c55e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c562:	ed13 5a02 	vldr	s10, [r3, #-8]
 800c566:	edd1 5a00 	vldr	s11, [r1]
 800c56a:	4452      	add	r2, sl
 800c56c:	ed95 7a00 	vldr	s14, [r5]
 800c570:	4451      	add	r1, sl
 800c572:	eee4 7a86 	vfma.f32	s15, s9, s12
 800c576:	ed13 6a01 	vldr	s12, [r3, #-4]
 800c57a:	f103 0310 	add.w	r3, r3, #16
 800c57e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c582:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c586:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c58a:	dbda      	blt.n	800c542 <forward_conv2d_nl_pool+0xde6>
 800c58c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c58e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c590:	441e      	add	r6, r3
 800c592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c594:	4499      	add	r9, r3
 800c596:	42a0      	cmp	r0, r4
 800c598:	da11      	bge.n	800c5be <forward_conv2d_nl_pool+0xe62>
 800c59a:	4602      	mov	r2, r0
 800c59c:	4633      	mov	r3, r6
 800c59e:	4649      	mov	r1, r9
 800c5a0:	3201      	adds	r2, #1
 800c5a2:	edd3 7a00 	vldr	s15, [r3]
 800c5a6:	ecb1 7a01 	vldmia	r1!, {s14}
 800c5aa:	445b      	add	r3, fp
 800c5ac:	42a2      	cmp	r2, r4
 800c5ae:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c5b2:	d1f5      	bne.n	800c5a0 <forward_conv2d_nl_pool+0xe44>
 800c5b4:	1a20      	subs	r0, r4, r0
 800c5b6:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800c5ba:	fb00 660b 	mla	r6, r0, fp, r6
 800c5be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c5c2:	f10c 0c01 	add.w	ip, ip, #1
 800c5c6:	441e      	add	r6, r3
 800c5c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5cc:	4499      	add	r9, r3
 800c5ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c5d2:	4563      	cmp	r3, ip
 800c5d4:	d1aa      	bne.n	800c52c <forward_conv2d_nl_pool+0xdd0>
 800c5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800c5dc:	4499      	add	r9, r3
 800c5de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5e0:	ece3 6a01 	vstmia	r3!, {s13}
 800c5e4:	67bb      	str	r3, [r7, #120]	; 0x78
 800c5e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d18f      	bne.n	800c50e <forward_conv2d_nl_pool+0xdb2>
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	f10e 0e04 	add.w	lr, lr, #4
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	1a9b      	subs	r3, r3, r2
 800c5f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c5fc:	6a3b      	ldr	r3, [r7, #32]
 800c5fe:	459e      	cmp	lr, r3
 800c600:	f4ff af7b 	bcc.w	800c4fa <forward_conv2d_nl_pool+0xd9e>
 800c604:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c608:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800c60c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c610:	440a      	add	r2, r1
 800c612:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800c616:	3301      	adds	r3, #1
 800c618:	4608      	mov	r0, r1
 800c61a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800c61e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800c622:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800c626:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c62a:	4410      	add	r0, r2
 800c62c:	1a8a      	subs	r2, r1, r2
 800c62e:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800c632:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800c636:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 800c63a:	429a      	cmp	r2, r3
 800c63c:	f47f aefd 	bne.w	800c43a <forward_conv2d_nl_pool+0xcde>
 800c640:	f7ff bbb4 	b.w	800bdac <forward_conv2d_nl_pool+0x650>
 800c644:	2000      	movs	r0, #0
 800c646:	e7a6      	b.n	800c596 <forward_conv2d_nl_pool+0xe3a>
 800c648:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800c64c:	eeb0 4a48 	vmov.f32	s8, s16
 800c650:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 800c654:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800c658:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c65c:	1b19      	subs	r1, r3, r4
 800c65e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800c662:	1b1b      	subs	r3, r3, r4
 800c664:	e719      	b.n	800c49a <forward_conv2d_nl_pool+0xd3e>
 800c666:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 800c66a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c66c:	4621      	mov	r1, r4
 800c66e:	191a      	adds	r2, r3, r4
 800c670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c674:	e6e9      	b.n	800c44a <forward_conv2d_nl_pool+0xcee>
 800c676:	4691      	mov	r9, r2
 800c678:	f7ff b88a 	b.w	800b790 <forward_conv2d_nl_pool+0x34>
 800c67c:	2300      	movs	r3, #0
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	deff      	udf	#255	; 0xff
 800c682:	4613      	mov	r3, r2
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	deff      	udf	#255	; 0xff
 800c688:	2200      	movs	r2, #0
 800c68a:	f7ff b897 	b.w	800b7bc <forward_conv2d_nl_pool+0x60>
 800c68e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800c692:	f7ff b8ef 	b.w	800b874 <forward_conv2d_nl_pool+0x118>
 800c696:	3418      	adds	r4, #24
 800c698:	d010      	beq.n	800c6bc <forward_conv2d_nl_pool+0xf60>
 800c69a:	4662      	mov	r2, ip
 800c69c:	4665      	mov	r5, ip
 800c69e:	4664      	mov	r4, ip
 800c6a0:	f7ff b88e 	b.w	800b7c0 <forward_conv2d_nl_pool+0x64>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	699b      	ldr	r3, [r3, #24]
 800c6a8:	deff      	udf	#255	; 0xff
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 800c6b0:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
 800c6b4:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800c6b8:	f7ff b8f6 	b.w	800b8a8 <forward_conv2d_nl_pool+0x14c>
 800c6bc:	68e3      	ldr	r3, [r4, #12]
 800c6be:	deff      	udf	#255	; 0xff

0800c6c0 <forward_dense>:
 800c6c0:	6942      	ldr	r2, [r0, #20]
 800c6c2:	8813      	ldrh	r3, [r2, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	f000 81c8 	beq.w	800ca5a <forward_dense+0x39a>
 800c6ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ce:	ed2d 8b08 	vpush	{d8-d11}
 800c6d2:	6851      	ldr	r1, [r2, #4]
 800c6d4:	b091      	sub	sp, #68	; 0x44
 800c6d6:	684d      	ldr	r5, [r1, #4]
 800c6d8:	b105      	cbz	r5, 800c6dc <forward_dense+0x1c>
 800c6da:	682d      	ldr	r5, [r5, #0]
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	f240 81b9 	bls.w	800ca54 <forward_dense+0x394>
 800c6e2:	690a      	ldr	r2, [r1, #16]
 800c6e4:	b102      	cbz	r2, 800c6e8 <forward_dense+0x28>
 800c6e6:	6812      	ldr	r2, [r2, #0]
 800c6e8:	2b02      	cmp	r3, #2
 800c6ea:	f000 81b8 	beq.w	800ca5e <forward_dense+0x39e>
 800c6ee:	69cb      	ldr	r3, [r1, #28]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	f000 8209 	beq.w	800cb08 <forward_dense+0x448>
 800c6f6:	6818      	ldr	r0, [r3, #0]
 800c6f8:	9008      	str	r0, [sp, #32]
 800c6fa:	f111 0018 	adds.w	r0, r1, #24
 800c6fe:	f000 81dc 	beq.w	800caba <forward_dense+0x3fa>
 800c702:	8b09      	ldrh	r1, [r1, #24]
 800c704:	2901      	cmp	r1, #1
 800c706:	f240 81fc 	bls.w	800cb02 <forward_dense+0x442>
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	f000 81d7 	beq.w	800cabe <forward_dense+0x3fe>
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	9306      	str	r3, [sp, #24]
 800c714:	9b08      	ldr	r3, [sp, #32]
 800c716:	68d6      	ldr	r6, [r2, #12]
 800c718:	699b      	ldr	r3, [r3, #24]
 800c71a:	68b0      	ldr	r0, [r6, #8]
 800c71c:	681f      	ldr	r7, [r3, #0]
 800c71e:	68f4      	ldr	r4, [r6, #12]
 800c720:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 800c724:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 800c728:	f3c7 4743 	ubfx	r7, r7, #17, #4
 800c72c:	fb04 f000 	mul.w	r0, r4, r0
 800c730:	fa4e f10c 	asr.w	r1, lr, ip
 800c734:	2f04      	cmp	r7, #4
 800c736:	9007      	str	r0, [sp, #28]
 800c738:	910b      	str	r1, [sp, #44]	; 0x2c
 800c73a:	68e9      	ldr	r1, [r5, #12]
 800c73c:	6870      	ldr	r0, [r6, #4]
 800c73e:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800c742:	f000 81db 	beq.w	800cafc <forward_dense+0x43c>
 800c746:	2f08      	cmp	r7, #8
 800c748:	f000 81d8 	beq.w	800cafc <forward_dense+0x43c>
 800c74c:	f04f 0a00 	mov.w	sl, #0
 800c750:	6992      	ldr	r2, [r2, #24]
 800c752:	0080      	lsls	r0, r0, #2
 800c754:	69a9      	ldr	r1, [r5, #24]
 800c756:	6894      	ldr	r4, [r2, #8]
 800c758:	9a08      	ldr	r2, [sp, #32]
 800c75a:	9009      	str	r0, [sp, #36]	; 0x24
 800c75c:	1826      	adds	r6, r4, r0
 800c75e:	6952      	ldr	r2, [r2, #20]
 800c760:	9404      	str	r4, [sp, #16]
 800c762:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800c766:	9a07      	ldr	r2, [sp, #28]
 800c768:	688f      	ldr	r7, [r1, #8]
 800c76a:	2a00      	cmp	r2, #0
 800c76c:	f000 81c1 	beq.w	800caf2 <forward_dense+0x432>
 800c770:	f1a8 0210 	sub.w	r2, r8, #16
 800c774:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800c778:	689d      	ldr	r5, [r3, #8]
 800c77a:	0912      	lsrs	r2, r2, #4
 800c77c:	910a      	str	r1, [sp, #40]	; 0x28
 800c77e:	2100      	movs	r1, #0
 800c780:	9b06      	ldr	r3, [sp, #24]
 800c782:	3201      	adds	r2, #1
 800c784:	eddf 2acf 	vldr	s5, [pc, #828]	; 800cac4 <forward_dense+0x404>
 800c788:	9105      	str	r1, [sp, #20]
 800c78a:	f008 010f 	and.w	r1, r8, #15
 800c78e:	0192      	lsls	r2, r2, #6
 800c790:	910d      	str	r1, [sp, #52]	; 0x34
 800c792:	920c      	str	r2, [sp, #48]	; 0x30
 800c794:	2b00      	cmp	r3, #0
 800c796:	d042      	beq.n	800c81e <forward_dense+0x15e>
 800c798:	699b      	ldr	r3, [r3, #24]
 800c79a:	689c      	ldr	r4, [r3, #8]
 800c79c:	9b04      	ldr	r3, [sp, #16]
 800c79e:	f1ba 0f00 	cmp.w	sl, #0
 800c7a2:	d041      	beq.n	800c828 <forward_dense+0x168>
 800c7a4:	42b3      	cmp	r3, r6
 800c7a6:	d229      	bcs.n	800c7fc <forward_dense+0x13c>
 800c7a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7aa:	469b      	mov	fp, r3
 800c7ac:	ab0f      	add	r3, sp, #60	; 0x3c
 800c7ae:	2a04      	cmp	r2, #4
 800c7b0:	9303      	str	r3, [sp, #12]
 800c7b2:	4633      	mov	r3, r6
 800c7b4:	4646      	mov	r6, r8
 800c7b6:	4698      	mov	r8, r3
 800c7b8:	f000 8154 	beq.w	800ca64 <forward_dense+0x3a4>
 800c7bc:	2c00      	cmp	r4, #0
 800c7be:	f000 8183 	beq.w	800cac8 <forward_dense+0x408>
 800c7c2:	f8d4 c000 	ldr.w	ip, [r4]
 800c7c6:	463b      	mov	r3, r7
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	9600      	str	r6, [sp, #0]
 800c7cc:	4652      	mov	r2, sl
 800c7ce:	9803      	ldr	r0, [sp, #12]
 800c7d0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800c7d4:	f7fe fc84 	bl	800b0e0 <ai_dict8_dot_array_f32>
 800c7d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7da:	3404      	adds	r4, #4
 800c7dc:	444d      	add	r5, r9
 800c7de:	f84b 3b04 	str.w	r3, [fp], #4
 800c7e2:	45c3      	cmp	fp, r8
 800c7e4:	d3ea      	bcc.n	800c7bc <forward_dense+0xfc>
 800c7e6:	4643      	mov	r3, r8
 800c7e8:	46b0      	mov	r8, r6
 800c7ea:	461e      	mov	r6, r3
 800c7ec:	9a04      	ldr	r2, [sp, #16]
 800c7ee:	43d3      	mvns	r3, r2
 800c7f0:	4433      	add	r3, r6
 800c7f2:	f023 0303 	bic.w	r3, r3, #3
 800c7f6:	3304      	adds	r3, #4
 800c7f8:	18d3      	adds	r3, r2, r3
 800c7fa:	9304      	str	r3, [sp, #16]
 800c7fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7fe:	9b05      	ldr	r3, [sp, #20]
 800c800:	4417      	add	r7, r2
 800c802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c804:	3301      	adds	r3, #1
 800c806:	4416      	add	r6, r2
 800c808:	9a07      	ldr	r2, [sp, #28]
 800c80a:	9305      	str	r3, [sp, #20]
 800c80c:	4293      	cmp	r3, r2
 800c80e:	f000 8170 	beq.w	800caf2 <forward_dense+0x432>
 800c812:	9b08      	ldr	r3, [sp, #32]
 800c814:	699b      	ldr	r3, [r3, #24]
 800c816:	689d      	ldr	r5, [r3, #8]
 800c818:	9b06      	ldr	r3, [sp, #24]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d1bc      	bne.n	800c798 <forward_dense+0xd8>
 800c81e:	461c      	mov	r4, r3
 800c820:	9b04      	ldr	r3, [sp, #16]
 800c822:	f1ba 0f00 	cmp.w	sl, #0
 800c826:	d1bd      	bne.n	800c7a4 <forward_dense+0xe4>
 800c828:	42b3      	cmp	r3, r6
 800c82a:	d2e7      	bcs.n	800c7fc <forward_dense+0x13c>
 800c82c:	4618      	mov	r0, r3
 800c82e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c830:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800c834:	eb07 0c03 	add.w	ip, r7, r3
 800c838:	469e      	mov	lr, r3
 800c83a:	2c00      	cmp	r4, #0
 800c83c:	f000 80fe 	beq.w	800ca3c <forward_dense+0x37c>
 800c840:	f1b8 0f0f 	cmp.w	r8, #15
 800c844:	ed94 6a00 	vldr	s12, [r4]
 800c848:	f104 0404 	add.w	r4, r4, #4
 800c84c:	f240 80fc 	bls.w	800ca48 <forward_dense+0x388>
 800c850:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c854:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800c858:	4641      	mov	r1, r8
 800c85a:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800cac4 <forward_dense+0x404>
 800c85e:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 800c862:	3910      	subs	r1, #16
 800c864:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 800c868:	3240      	adds	r2, #64	; 0x40
 800c86a:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 800c86e:	290f      	cmp	r1, #15
 800c870:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c874:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 800c878:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 800c87c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800c880:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 800c884:	eee5 7a87 	vfma.f32	s15, s11, s14
 800c888:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 800c88c:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 800c890:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 800c894:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 800c898:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 800c89c:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 800c8a0:	eee2 7a03 	vfma.f32	s15, s4, s6
 800c8a4:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800c8a8:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 800c8ac:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800c8b0:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800c8b4:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 800c8b8:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 800c8bc:	eee3 7a84 	vfma.f32	s15, s7, s8
 800c8c0:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 800c8c4:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 800c8c8:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 800c8cc:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 800c8d0:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 800c8d4:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 800c8d8:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c8dc:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 800c8e0:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800c8e4:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 800c8e8:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 800c8ec:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 800c8f0:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 800c8f4:	eee5 7a87 	vfma.f32	s15, s11, s14
 800c8f8:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 800c8fc:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 800c900:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800c904:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800c908:	eee9 7a89 	vfma.f32	s15, s19, s18
 800c90c:	eee8 7a88 	vfma.f32	s15, s17, s16
 800c910:	eee0 7a20 	vfma.f32	s15, s0, s1
 800c914:	eee1 7a21 	vfma.f32	s15, s2, s3
 800c918:	eee2 7a03 	vfma.f32	s15, s4, s6
 800c91c:	eee3 7a84 	vfma.f32	s15, s7, s8
 800c920:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c924:	eee5 7a87 	vfma.f32	s15, s11, s14
 800c928:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c92c:	d897      	bhi.n	800c85e <forward_dense+0x19e>
 800c92e:	eb05 010e 	add.w	r1, r5, lr
 800c932:	465b      	mov	r3, fp
 800c934:	4662      	mov	r2, ip
 800c936:	2b00      	cmp	r3, #0
 800c938:	d075      	beq.n	800ca26 <forward_dense+0x366>
 800c93a:	ed91 7a00 	vldr	s14, [r1]
 800c93e:	2b01      	cmp	r3, #1
 800c940:	edd2 7a00 	vldr	s15, [r2]
 800c944:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c948:	d06d      	beq.n	800ca26 <forward_dense+0x366>
 800c94a:	ed91 7a01 	vldr	s14, [r1, #4]
 800c94e:	2b02      	cmp	r3, #2
 800c950:	edd2 7a01 	vldr	s15, [r2, #4]
 800c954:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c958:	d065      	beq.n	800ca26 <forward_dense+0x366>
 800c95a:	ed91 7a02 	vldr	s14, [r1, #8]
 800c95e:	2b03      	cmp	r3, #3
 800c960:	edd2 7a02 	vldr	s15, [r2, #8]
 800c964:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c968:	d05d      	beq.n	800ca26 <forward_dense+0x366>
 800c96a:	ed91 7a03 	vldr	s14, [r1, #12]
 800c96e:	2b04      	cmp	r3, #4
 800c970:	edd2 7a03 	vldr	s15, [r2, #12]
 800c974:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c978:	d055      	beq.n	800ca26 <forward_dense+0x366>
 800c97a:	ed91 7a04 	vldr	s14, [r1, #16]
 800c97e:	2b05      	cmp	r3, #5
 800c980:	edd2 7a04 	vldr	s15, [r2, #16]
 800c984:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c988:	d04d      	beq.n	800ca26 <forward_dense+0x366>
 800c98a:	ed91 7a05 	vldr	s14, [r1, #20]
 800c98e:	2b06      	cmp	r3, #6
 800c990:	edd2 7a05 	vldr	s15, [r2, #20]
 800c994:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c998:	d045      	beq.n	800ca26 <forward_dense+0x366>
 800c99a:	ed91 7a06 	vldr	s14, [r1, #24]
 800c99e:	2b07      	cmp	r3, #7
 800c9a0:	edd2 7a06 	vldr	s15, [r2, #24]
 800c9a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c9a8:	d03d      	beq.n	800ca26 <forward_dense+0x366>
 800c9aa:	ed91 7a07 	vldr	s14, [r1, #28]
 800c9ae:	2b08      	cmp	r3, #8
 800c9b0:	edd2 7a07 	vldr	s15, [r2, #28]
 800c9b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c9b8:	d035      	beq.n	800ca26 <forward_dense+0x366>
 800c9ba:	ed91 7a08 	vldr	s14, [r1, #32]
 800c9be:	2b09      	cmp	r3, #9
 800c9c0:	edd2 7a08 	vldr	s15, [r2, #32]
 800c9c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c9c8:	d02d      	beq.n	800ca26 <forward_dense+0x366>
 800c9ca:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800c9ce:	2b0a      	cmp	r3, #10
 800c9d0:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800c9d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c9d8:	d025      	beq.n	800ca26 <forward_dense+0x366>
 800c9da:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800c9de:	2b0b      	cmp	r3, #11
 800c9e0:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800c9e4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c9e8:	d01d      	beq.n	800ca26 <forward_dense+0x366>
 800c9ea:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800c9ee:	2b0c      	cmp	r3, #12
 800c9f0:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800c9f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c9f8:	d015      	beq.n	800ca26 <forward_dense+0x366>
 800c9fa:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800c9fe:	2b0d      	cmp	r3, #13
 800ca00:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800ca04:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ca08:	d00d      	beq.n	800ca26 <forward_dense+0x366>
 800ca0a:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800ca0e:	2b0e      	cmp	r3, #14
 800ca10:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800ca14:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ca18:	d005      	beq.n	800ca26 <forward_dense+0x366>
 800ca1a:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800ca1e:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800ca22:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ca26:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ca2a:	444d      	add	r5, r9
 800ca2c:	ece0 6a01 	vstmia	r0!, {s13}
 800ca30:	42b0      	cmp	r0, r6
 800ca32:	f4bf aedb 	bcs.w	800c7ec <forward_dense+0x12c>
 800ca36:	2c00      	cmp	r4, #0
 800ca38:	f47f af02 	bne.w	800c840 <forward_dense+0x180>
 800ca3c:	f1b8 0f0f 	cmp.w	r8, #15
 800ca40:	eeb0 6a62 	vmov.f32	s12, s5
 800ca44:	f63f af04 	bhi.w	800c850 <forward_dense+0x190>
 800ca48:	4643      	mov	r3, r8
 800ca4a:	4629      	mov	r1, r5
 800ca4c:	463a      	mov	r2, r7
 800ca4e:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800cac4 <forward_dense+0x404>
 800ca52:	e770      	b.n	800c936 <forward_dense+0x276>
 800ca54:	2300      	movs	r3, #0
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	deff      	udf	#255	; 0xff
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	deff      	udf	#255	; 0xff
 800ca5e:	2300      	movs	r3, #0
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	deff      	udf	#255	; 0xff
 800ca64:	b1a4      	cbz	r4, 800ca90 <forward_dense+0x3d0>
 800ca66:	f8d4 c000 	ldr.w	ip, [r4]
 800ca6a:	463b      	mov	r3, r7
 800ca6c:	4629      	mov	r1, r5
 800ca6e:	9600      	str	r6, [sp, #0]
 800ca70:	4652      	mov	r2, sl
 800ca72:	9803      	ldr	r0, [sp, #12]
 800ca74:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800ca78:	f7fe fd62 	bl	800b540 <ai_dict4_dot_array_f32>
 800ca7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca7e:	3404      	adds	r4, #4
 800ca80:	444d      	add	r5, r9
 800ca82:	f84b 3b04 	str.w	r3, [fp], #4
 800ca86:	45c3      	cmp	fp, r8
 800ca88:	f4bf aead 	bcs.w	800c7e6 <forward_dense+0x126>
 800ca8c:	2c00      	cmp	r4, #0
 800ca8e:	d1ea      	bne.n	800ca66 <forward_dense+0x3a6>
 800ca90:	4634      	mov	r4, r6
 800ca92:	4646      	mov	r6, r8
 800ca94:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ca98:	463b      	mov	r3, r7
 800ca9a:	4629      	mov	r1, r5
 800ca9c:	9400      	str	r4, [sp, #0]
 800ca9e:	4652      	mov	r2, sl
 800caa0:	4640      	mov	r0, r8
 800caa2:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800caa6:	f7fe fd4b 	bl	800b540 <ai_dict4_dot_array_f32>
 800caaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800caac:	444d      	add	r5, r9
 800caae:	f84b 3b04 	str.w	r3, [fp], #4
 800cab2:	45b3      	cmp	fp, r6
 800cab4:	d3f0      	bcc.n	800ca98 <forward_dense+0x3d8>
 800cab6:	46a0      	mov	r8, r4
 800cab8:	e698      	b.n	800c7ec <forward_dense+0x12c>
 800caba:	9006      	str	r0, [sp, #24]
 800cabc:	e62a      	b.n	800c714 <forward_dense+0x54>
 800cabe:	9306      	str	r3, [sp, #24]
 800cac0:	e628      	b.n	800c714 <forward_dense+0x54>
 800cac2:	bf00      	nop
 800cac4:	00000000 	.word	0x00000000
 800cac8:	4634      	mov	r4, r6
 800caca:	4646      	mov	r6, r8
 800cacc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cad0:	463b      	mov	r3, r7
 800cad2:	4629      	mov	r1, r5
 800cad4:	9400      	str	r4, [sp, #0]
 800cad6:	4652      	mov	r2, sl
 800cad8:	4640      	mov	r0, r8
 800cada:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800cade:	f7fe faff 	bl	800b0e0 <ai_dict8_dot_array_f32>
 800cae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cae4:	444d      	add	r5, r9
 800cae6:	f84b 3b04 	str.w	r3, [fp], #4
 800caea:	45b3      	cmp	fp, r6
 800caec:	d3f0      	bcc.n	800cad0 <forward_dense+0x410>
 800caee:	46a0      	mov	r8, r4
 800caf0:	e67c      	b.n	800c7ec <forward_dense+0x12c>
 800caf2:	b011      	add	sp, #68	; 0x44
 800caf4:	ecbd 8b08 	vpop	{d8-d11}
 800caf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cafc:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800cb00:	e626      	b.n	800c750 <forward_dense+0x90>
 800cb02:	2300      	movs	r3, #0
 800cb04:	9306      	str	r3, [sp, #24]
 800cb06:	e605      	b.n	800c714 <forward_dense+0x54>
 800cb08:	9308      	str	r3, [sp, #32]
 800cb0a:	e5f6      	b.n	800c6fa <forward_dense+0x3a>

0800cb0c <nl_func_relu_array_f32>:
 800cb0c:	b410      	push	{r4}
 800cb0e:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800cb12:	688b      	ldr	r3, [r1, #8]
 800cb14:	6880      	ldr	r0, [r0, #8]
 800cb16:	4414      	add	r4, r2
 800cb18:	00a4      	lsls	r4, r4, #2
 800cb1a:	191b      	adds	r3, r3, r4
 800cb1c:	d210      	bcs.n	800cb40 <nl_func_relu_array_f32+0x34>
 800cb1e:	3404      	adds	r4, #4
 800cb20:	3304      	adds	r3, #4
 800cb22:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800cb48 <nl_func_relu_array_f32+0x3c>
 800cb26:	4420      	add	r0, r4
 800cb28:	ed53 7a01 	vldr	s15, [r3, #-4]
 800cb2c:	f1a3 0208 	sub.w	r2, r3, #8
 800cb30:	3b04      	subs	r3, #4
 800cb32:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800cb36:	ed60 7a01 	vstmdb	r0!, {s15}
 800cb3a:	688c      	ldr	r4, [r1, #8]
 800cb3c:	4294      	cmp	r4, r2
 800cb3e:	d9f3      	bls.n	800cb28 <nl_func_relu_array_f32+0x1c>
 800cb40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb44:	4770      	bx	lr
 800cb46:	bf00      	nop
 800cb48:	00000000 	.word	0x00000000

0800cb4c <forward_sm>:
 800cb4c:	6942      	ldr	r2, [r0, #20]
 800cb4e:	8813      	ldrh	r3, [r2, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	f000 8085 	beq.w	800cc60 <forward_sm+0x114>
 800cb56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb5a:	ed2d 8b04 	vpush	{d8-d9}
 800cb5e:	6852      	ldr	r2, [r2, #4]
 800cb60:	b085      	sub	sp, #20
 800cb62:	6855      	ldr	r5, [r2, #4]
 800cb64:	b105      	cbz	r5, 800cb68 <forward_sm+0x1c>
 800cb66:	682d      	ldr	r5, [r5, #0]
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	d971      	bls.n	800cc50 <forward_sm+0x104>
 800cb6c:	6913      	ldr	r3, [r2, #16]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d06c      	beq.n	800cc4c <forward_sm+0x100>
 800cb72:	681f      	ldr	r7, [r3, #0]
 800cb74:	68e9      	ldr	r1, [r5, #12]
 800cb76:	68fa      	ldr	r2, [r7, #12]
 800cb78:	68ab      	ldr	r3, [r5, #8]
 800cb7a:	6850      	ldr	r0, [r2, #4]
 800cb7c:	0a1b      	lsrs	r3, r3, #8
 800cb7e:	684a      	ldr	r2, [r1, #4]
 800cb80:	9201      	str	r2, [sp, #4]
 800cb82:	d06f      	beq.n	800cc64 <forward_sm+0x118>
 800cb84:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800cb88:	2401      	movs	r4, #1
 800cb8a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cb8e:	4299      	cmp	r1, r3
 800cb90:	fb02 f404 	mul.w	r4, r2, r4
 800cb94:	d1f9      	bne.n	800cb8a <forward_sm+0x3e>
 800cb96:	9901      	ldr	r1, [sp, #4]
 800cb98:	69ae      	ldr	r6, [r5, #24]
 800cb9a:	1a63      	subs	r3, r4, r1
 800cb9c:	f8d7 9018 	ldr.w	r9, [r7, #24]
 800cba0:	1a24      	subs	r4, r4, r0
 800cba2:	68b5      	ldr	r5, [r6, #8]
 800cba4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800cba8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800cbac:	68f3      	ldr	r3, [r6, #12]
 800cbae:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800cbb2:	429d      	cmp	r5, r3
 800cbb4:	d340      	bcc.n	800cc38 <forward_sm+0xec>
 800cbb6:	008b      	lsls	r3, r1, #2
 800cbb8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800cbbc:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800cbc0:	9300      	str	r3, [sp, #0]
 800cbc2:	425b      	negs	r3, r3
 800cbc4:	f1c8 0200 	rsb	r2, r8, #0
 800cbc8:	9302      	str	r3, [sp, #8]
 800cbca:	9203      	str	r2, [sp, #12]
 800cbcc:	9b01      	ldr	r3, [sp, #4]
 800cbce:	60b5      	str	r5, [r6, #8]
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	f8c9 4008 	str.w	r4, [r9, #8]
 800cbd6:	68b2      	ldr	r2, [r6, #8]
 800cbd8:	ed92 8a00 	vldr	s16, [r2]
 800cbdc:	d93b      	bls.n	800cc56 <forward_sm+0x10a>
 800cbde:	9900      	ldr	r1, [sp, #0]
 800cbe0:	1d13      	adds	r3, r2, #4
 800cbe2:	1857      	adds	r7, r2, r1
 800cbe4:	ecf3 7a01 	vldmia	r3!, {s15}
 800cbe8:	429f      	cmp	r7, r3
 800cbea:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800cbee:	d1f9      	bne.n	800cbe4 <forward_sm+0x98>
 800cbf0:	4692      	mov	sl, r2
 800cbf2:	46a3      	mov	fp, r4
 800cbf4:	46a0      	mov	r8, r4
 800cbf6:	eddf 8a1d 	vldr	s17, [pc, #116]	; 800cc6c <forward_sm+0x120>
 800cbfa:	ecba 0a01 	vldmia	sl!, {s0}
 800cbfe:	ee30 0a48 	vsub.f32	s0, s0, s16
 800cc02:	f002 fe01 	bl	800f808 <expf>
 800cc06:	4557      	cmp	r7, sl
 800cc08:	eca8 0a01 	vstmia	r8!, {s0}
 800cc0c:	ee78 8a80 	vadd.f32	s17, s17, s0
 800cc10:	d1f3      	bne.n	800cbfa <forward_sm+0xae>
 800cc12:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800cc16:	9b00      	ldr	r3, [sp, #0]
 800cc18:	18e2      	adds	r2, r4, r3
 800cc1a:	eddb 7a00 	vldr	s15, [fp]
 800cc1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc22:	eceb 7a01 	vstmia	fp!, {s15}
 800cc26:	455a      	cmp	r2, fp
 800cc28:	d1f7      	bne.n	800cc1a <forward_sm+0xce>
 800cc2a:	9b02      	ldr	r3, [sp, #8]
 800cc2c:	9a03      	ldr	r2, [sp, #12]
 800cc2e:	441d      	add	r5, r3
 800cc30:	68f3      	ldr	r3, [r6, #12]
 800cc32:	4414      	add	r4, r2
 800cc34:	429d      	cmp	r5, r3
 800cc36:	d2c9      	bcs.n	800cbcc <forward_sm+0x80>
 800cc38:	60b3      	str	r3, [r6, #8]
 800cc3a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800cc3e:	f8c9 3008 	str.w	r3, [r9, #8]
 800cc42:	b005      	add	sp, #20
 800cc44:	ecbd 8b04 	vpop	{d8-d9}
 800cc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc4c:	68db      	ldr	r3, [r3, #12]
 800cc4e:	deff      	udf	#255	; 0xff
 800cc50:	2300      	movs	r3, #0
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	deff      	udf	#255	; 0xff
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d0e7      	beq.n	800cc2a <forward_sm+0xde>
 800cc5a:	9b00      	ldr	r3, [sp, #0]
 800cc5c:	18d7      	adds	r7, r2, r3
 800cc5e:	e7c7      	b.n	800cbf0 <forward_sm+0xa4>
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	deff      	udf	#255	; 0xff
 800cc64:	2401      	movs	r4, #1
 800cc66:	4611      	mov	r1, r2
 800cc68:	e796      	b.n	800cb98 <forward_sm+0x4c>
 800cc6a:	bf00      	nop
 800cc6c:	00000000 	.word	0x00000000

0800cc70 <pool_func_mp_array_f32>:
 800cc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc74:	b099      	sub	sp, #100	; 0x64
 800cc76:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800cc78:	9303      	str	r3, [sp, #12]
 800cc7a:	6883      	ldr	r3, [r0, #8]
 800cc7c:	9100      	str	r1, [sp, #0]
 800cc7e:	9306      	str	r3, [sp, #24]
 800cc80:	68a3      	ldr	r3, [r4, #8]
 800cc82:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 800cc86:	9304      	str	r3, [sp, #16]
 800cc88:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800cc8c:	9215      	str	r2, [sp, #84]	; 0x54
 800cc8e:	9308      	str	r3, [sp, #32]
 800cc90:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 800cc94:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 800cc98:	9301      	str	r3, [sp, #4]
 800cc9a:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800cc9e:	ea52 0401 	orrs.w	r4, r2, r1
 800cca2:	930e      	str	r3, [sp, #56]	; 0x38
 800cca4:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 800cca8:	9313      	str	r3, [sp, #76]	; 0x4c
 800ccaa:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 800ccae:	930c      	str	r3, [sp, #48]	; 0x30
 800ccb0:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 800ccb4:	9311      	str	r3, [sp, #68]	; 0x44
 800ccb6:	f040 80a1 	bne.w	800cdfc <pool_func_mp_array_f32+0x18c>
 800ccba:	9b08      	ldr	r3, [sp, #32]
 800ccbc:	9d00      	ldr	r5, [sp, #0]
 800ccbe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ccc0:	1b58      	subs	r0, r3, r5
 800ccc2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800ccc4:	1e73      	subs	r3, r6, #1
 800ccc6:	3801      	subs	r0, #1
 800ccc8:	fb13 0307 	smlabb	r3, r3, r7, r0
 800cccc:	0418      	lsls	r0, r3, #16
 800ccce:	f140 8095 	bpl.w	800cdfc <pool_func_mp_array_f32+0x18c>
 800ccd2:	9b01      	ldr	r3, [sp, #4]
 800ccd4:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ccd6:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800ccd8:	1a18      	subs	r0, r3, r0
 800ccda:	1e7b      	subs	r3, r7, #1
 800ccdc:	3801      	subs	r0, #1
 800ccde:	469c      	mov	ip, r3
 800cce0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cce2:	fb1c 0303 	smlabb	r3, ip, r3, r0
 800cce6:	041b      	lsls	r3, r3, #16
 800cce8:	f140 8088 	bpl.w	800cdfc <pool_func_mp_array_f32+0x18c>
 800ccec:	2f00      	cmp	r7, #0
 800ccee:	d07f      	beq.n	800cdf0 <pool_func_mp_array_f32+0x180>
 800ccf0:	2e00      	cmp	r6, #0
 800ccf2:	d07d      	beq.n	800cdf0 <pool_func_mp_array_f32+0x180>
 800ccf4:	9b03      	ldr	r3, [sp, #12]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d07a      	beq.n	800cdf0 <pool_func_mp_array_f32+0x180>
 800ccfa:	fb05 f203 	mul.w	r2, r5, r3
 800ccfe:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800cd02:	4623      	mov	r3, r4
 800cd04:	9402      	str	r4, [sp, #8]
 800cd06:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800cd0a:	9409      	str	r4, [sp, #36]	; 0x24
 800cd0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 800cd14:	fb01 f303 	mul.w	r3, r1, r3
 800cd18:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800cd1c:	4690      	mov	r8, r2
 800cd1e:	9205      	str	r2, [sp, #20]
 800cd20:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd22:	9b00      	ldr	r3, [sp, #0]
 800cd24:	920a      	str	r2, [sp, #40]	; 0x28
 800cd26:	fb03 f30e 	mul.w	r3, r3, lr
 800cd2a:	930d      	str	r3, [sp, #52]	; 0x34
 800cd2c:	9b08      	ldr	r3, [sp, #32]
 800cd2e:	9307      	str	r3, [sp, #28]
 800cd30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd32:	f04f 0c00 	mov.w	ip, #0
 800cd36:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800cd3a:	4498      	add	r8, r3
 800cd3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd3e:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 800cd42:	4667      	mov	r7, ip
 800cd44:	eb05 0903 	add.w	r9, r5, r3
 800cd48:	9b03      	ldr	r3, [sp, #12]
 800cd4a:	fb03 f808 	mul.w	r8, r3, r8
 800cd4e:	fb03 f909 	mul.w	r9, r3, r9
 800cd52:	4576      	cmp	r6, lr
 800cd54:	dd4f      	ble.n	800cdf6 <pool_func_mp_array_f32+0x186>
 800cd56:	eb07 0409 	add.w	r4, r7, r9
 800cd5a:	9b06      	ldr	r3, [sp, #24]
 800cd5c:	4670      	mov	r0, lr
 800cd5e:	eddf 7a89 	vldr	s15, [pc, #548]	; 800cf84 <pool_func_mp_array_f32+0x314>
 800cd62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd66:	42a9      	cmp	r1, r5
 800cd68:	dd0a      	ble.n	800cd80 <pool_func_mp_array_f32+0x110>
 800cd6a:	4622      	mov	r2, r4
 800cd6c:	462b      	mov	r3, r5
 800cd6e:	3301      	adds	r3, #1
 800cd70:	ed92 7a00 	vldr	s14, [r2]
 800cd74:	4452      	add	r2, sl
 800cd76:	b21b      	sxth	r3, r3
 800cd78:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800cd7c:	4299      	cmp	r1, r3
 800cd7e:	d1f6      	bne.n	800cd6e <pool_func_mp_array_f32+0xfe>
 800cd80:	3001      	adds	r0, #1
 800cd82:	445c      	add	r4, fp
 800cd84:	b200      	sxth	r0, r0
 800cd86:	4286      	cmp	r6, r0
 800cd88:	d1ed      	bne.n	800cd66 <pool_func_mp_array_f32+0xf6>
 800cd8a:	eb08 0307 	add.w	r3, r8, r7
 800cd8e:	9a04      	ldr	r2, [sp, #16]
 800cd90:	f10c 0c01 	add.w	ip, ip, #1
 800cd94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cd98:	fa0f fc8c 	sxth.w	ip, ip
 800cd9c:	edc3 7a00 	vstr	s15, [r3]
 800cda0:	9b03      	ldr	r3, [sp, #12]
 800cda2:	4667      	mov	r7, ip
 800cda4:	459c      	cmp	ip, r3
 800cda6:	dbd4      	blt.n	800cd52 <pool_func_mp_array_f32+0xe2>
 800cda8:	9b07      	ldr	r3, [sp, #28]
 800cdaa:	980e      	ldr	r0, [sp, #56]	; 0x38
 800cdac:	461a      	mov	r2, r3
 800cdae:	9b05      	ldr	r3, [sp, #20]
 800cdb0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cdb2:	4403      	add	r3, r0
 800cdb4:	4402      	add	r2, r0
 800cdb6:	3101      	adds	r1, #1
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	b209      	sxth	r1, r1
 800cdbc:	9305      	str	r3, [sp, #20]
 800cdbe:	b292      	uxth	r2, r2
 800cdc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cdc2:	4688      	mov	r8, r1
 800cdc4:	910a      	str	r1, [sp, #40]	; 0x28
 800cdc6:	428b      	cmp	r3, r1
 800cdc8:	9207      	str	r2, [sp, #28]
 800cdca:	dcb1      	bgt.n	800cd30 <pool_func_mp_array_f32+0xc0>
 800cdcc:	9b01      	ldr	r3, [sp, #4]
 800cdce:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cdd4:	9b02      	ldr	r3, [sp, #8]
 800cdd6:	4402      	add	r2, r0
 800cdd8:	3101      	adds	r1, #1
 800cdda:	4403      	add	r3, r0
 800cddc:	b292      	uxth	r2, r2
 800cdde:	b209      	sxth	r1, r1
 800cde0:	9201      	str	r2, [sp, #4]
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cde6:	9302      	str	r3, [sp, #8]
 800cde8:	460b      	mov	r3, r1
 800cdea:	428a      	cmp	r2, r1
 800cdec:	9109      	str	r1, [sp, #36]	; 0x24
 800cdee:	dc8d      	bgt.n	800cd0c <pool_func_mp_array_f32+0x9c>
 800cdf0:	b019      	add	sp, #100	; 0x64
 800cdf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf6:	eddf 7a63 	vldr	s15, [pc, #396]	; 800cf84 <pool_func_mp_array_f32+0x314>
 800cdfa:	e7c6      	b.n	800cd8a <pool_func_mp_array_f32+0x11a>
 800cdfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d0f6      	beq.n	800cdf0 <pool_func_mp_array_f32+0x180>
 800ce02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d0f3      	beq.n	800cdf0 <pool_func_mp_array_f32+0x180>
 800ce08:	9d03      	ldr	r5, [sp, #12]
 800ce0a:	2d00      	cmp	r5, #0
 800ce0c:	d0f0      	beq.n	800cdf0 <pool_func_mp_array_f32+0x180>
 800ce0e:	9b01      	ldr	r3, [sp, #4]
 800ce10:	ea4f 0b85 	mov.w	fp, r5, lsl #2
 800ce14:	1a9c      	subs	r4, r3, r2
 800ce16:	9b08      	ldr	r3, [sp, #32]
 800ce18:	4252      	negs	r2, r2
 800ce1a:	1a58      	subs	r0, r3, r1
 800ce1c:	9b00      	ldr	r3, [sp, #0]
 800ce1e:	b292      	uxth	r2, r2
 800ce20:	4249      	negs	r1, r1
 800ce22:	461e      	mov	r6, r3
 800ce24:	462b      	mov	r3, r5
 800ce26:	b2a4      	uxth	r4, r4
 800ce28:	9208      	str	r2, [sp, #32]
 800ce2a:	fb06 f303 	mul.w	r3, r6, r3
 800ce2e:	2600      	movs	r6, #0
 800ce30:	b280      	uxth	r0, r0
 800ce32:	9412      	str	r4, [sp, #72]	; 0x48
 800ce34:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800ce38:	4632      	mov	r2, r6
 800ce3a:	b289      	uxth	r1, r1
 800ce3c:	9614      	str	r6, [sp, #80]	; 0x50
 800ce3e:	46d1      	mov	r9, sl
 800ce40:	9016      	str	r0, [sp, #88]	; 0x58
 800ce42:	9117      	str	r1, [sp, #92]	; 0x5c
 800ce44:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ce46:	2000      	movs	r0, #0
 800ce48:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ce4a:	1e4b      	subs	r3, r1, #1
 800ce4c:	9d08      	ldr	r5, [sp, #32]
 800ce4e:	fb04 f202 	mul.w	r2, r4, r2
 800ce52:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
 800ce56:	4698      	mov	r8, r3
 800ce58:	fa0f fa85 	sxth.w	sl, r5
 800ce5c:	920f      	str	r2, [sp, #60]	; 0x3c
 800ce5e:	b20a      	sxth	r2, r1
 800ce60:	eba8 0805 	sub.w	r8, r8, r5
 800ce64:	9b00      	ldr	r3, [sp, #0]
 800ce66:	9207      	str	r2, [sp, #28]
 800ce68:	fb03 f30a 	mul.w	r3, r3, sl
 800ce6c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ce6e:	fa1f f888 	uxth.w	r8, r8
 800ce72:	900d      	str	r0, [sp, #52]	; 0x34
 800ce74:	9310      	str	r3, [sp, #64]	; 0x40
 800ce76:	4603      	mov	r3, r0
 800ce78:	920b      	str	r2, [sp, #44]	; 0x2c
 800ce7a:	f108 0801 	add.w	r8, r8, #1
 800ce7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ce80:	920a      	str	r2, [sp, #40]	; 0x28
 800ce82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ce84:	f04f 0c00 	mov.w	ip, #0
 800ce88:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 800ce8c:	189a      	adds	r2, r3, r2
 800ce8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce90:	9903      	ldr	r1, [sp, #12]
 800ce92:	18fb      	adds	r3, r7, r3
 800ce94:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 800ce98:	fb01 f202 	mul.w	r2, r1, r2
 800ce9c:	fb01 f303 	mul.w	r3, r1, r3
 800cea0:	9205      	str	r2, [sp, #20]
 800cea2:	f8cd c004 	str.w	ip, [sp, #4]
 800cea6:	9309      	str	r3, [sp, #36]	; 0x24
 800cea8:	9b07      	ldr	r3, [sp, #28]
 800ceaa:	4553      	cmp	r3, sl
 800ceac:	dd67      	ble.n	800cf7e <pool_func_mp_array_f32+0x30e>
 800ceae:	9b01      	ldr	r3, [sp, #4]
 800ceb0:	2400      	movs	r4, #0
 800ceb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ceb4:	f8cd c008 	str.w	ip, [sp, #8]
 800ceb8:	189e      	adds	r6, r3, r2
 800ceba:	9b06      	ldr	r3, [sp, #24]
 800cebc:	eddf 7a31 	vldr	s15, [pc, #196]	; 800cf84 <pool_func_mp_array_f32+0x314>
 800cec0:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800cec4:	f8dd c020 	ldr.w	ip, [sp, #32]
 800cec8:	42bd      	cmp	r5, r7
 800ceca:	dd19      	ble.n	800cf00 <pool_func_mp_array_f32+0x290>
 800cecc:	eb0c 0204 	add.w	r2, ip, r4
 800ced0:	eb0a 0304 	add.w	r3, sl, r4
 800ced4:	43d2      	mvns	r2, r2
 800ced6:	459e      	cmp	lr, r3
 800ced8:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800cedc:	dd10      	ble.n	800cf00 <pool_func_mp_array_f32+0x290>
 800cede:	4631      	mov	r1, r6
 800cee0:	463b      	mov	r3, r7
 800cee2:	0418      	lsls	r0, r3, #16
 800cee4:	d407      	bmi.n	800cef6 <pool_func_mp_array_f32+0x286>
 800cee6:	b132      	cbz	r2, 800cef6 <pool_func_mp_array_f32+0x286>
 800cee8:	9800      	ldr	r0, [sp, #0]
 800ceea:	4298      	cmp	r0, r3
 800ceec:	dd03      	ble.n	800cef6 <pool_func_mp_array_f32+0x286>
 800ceee:	ed91 7a00 	vldr	s14, [r1]
 800cef2:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800cef6:	3301      	adds	r3, #1
 800cef8:	4459      	add	r1, fp
 800cefa:	b218      	sxth	r0, r3
 800cefc:	4285      	cmp	r5, r0
 800cefe:	dcf0      	bgt.n	800cee2 <pool_func_mp_array_f32+0x272>
 800cf00:	3401      	adds	r4, #1
 800cf02:	444e      	add	r6, r9
 800cf04:	45a0      	cmp	r8, r4
 800cf06:	d1df      	bne.n	800cec8 <pool_func_mp_array_f32+0x258>
 800cf08:	f8dd c008 	ldr.w	ip, [sp, #8]
 800cf0c:	9b01      	ldr	r3, [sp, #4]
 800cf0e:	f10c 0c01 	add.w	ip, ip, #1
 800cf12:	9a05      	ldr	r2, [sp, #20]
 800cf14:	fa0f fc8c 	sxth.w	ip, ip
 800cf18:	4413      	add	r3, r2
 800cf1a:	9a04      	ldr	r2, [sp, #16]
 800cf1c:	f8cd c004 	str.w	ip, [sp, #4]
 800cf20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf24:	edc3 7a00 	vstr	s15, [r3]
 800cf28:	9b03      	ldr	r3, [sp, #12]
 800cf2a:	459c      	cmp	ip, r3
 800cf2c:	dbbc      	blt.n	800cea8 <pool_func_mp_array_f32+0x238>
 800cf2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf30:	980e      	ldr	r0, [sp, #56]	; 0x38
 800cf32:	461a      	mov	r2, r3
 800cf34:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cf36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf38:	4402      	add	r2, r0
 800cf3a:	3101      	adds	r1, #1
 800cf3c:	4403      	add	r3, r0
 800cf3e:	b292      	uxth	r2, r2
 800cf40:	b209      	sxth	r1, r1
 800cf42:	920b      	str	r2, [sp, #44]	; 0x2c
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf48:	930a      	str	r3, [sp, #40]	; 0x28
 800cf4a:	460b      	mov	r3, r1
 800cf4c:	428a      	cmp	r2, r1
 800cf4e:	910d      	str	r1, [sp, #52]	; 0x34
 800cf50:	dc97      	bgt.n	800ce82 <pool_func_mp_array_f32+0x212>
 800cf52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cf54:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cf56:	461a      	mov	r2, r3
 800cf58:	9b08      	ldr	r3, [sp, #32]
 800cf5a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800cf5c:	4403      	add	r3, r0
 800cf5e:	4402      	add	r2, r0
 800cf60:	3101      	adds	r1, #1
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	b209      	sxth	r1, r1
 800cf66:	9308      	str	r3, [sp, #32]
 800cf68:	b292      	uxth	r2, r2
 800cf6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cf6c:	9212      	str	r2, [sp, #72]	; 0x48
 800cf6e:	460a      	mov	r2, r1
 800cf70:	428b      	cmp	r3, r1
 800cf72:	9114      	str	r1, [sp, #80]	; 0x50
 800cf74:	f73f af66 	bgt.w	800ce44 <pool_func_mp_array_f32+0x1d4>
 800cf78:	b019      	add	sp, #100	; 0x64
 800cf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf7e:	eddf 7a01 	vldr	s15, [pc, #4]	; 800cf84 <pool_func_mp_array_f32+0x314>
 800cf82:	e7c3      	b.n	800cf0c <pool_func_mp_array_f32+0x29c>
 800cf84:	cf000000 	.word	0xcf000000

0800cf88 <ai_check_custom_types>:
 800cf88:	4b13      	ldr	r3, [pc, #76]	; (800cfd8 <ai_check_custom_types+0x50>)
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	9301      	str	r3, [sp, #4]
 800cf90:	b118      	cbz	r0, 800cf9a <ai_check_custom_types+0x12>
 800cf92:	7803      	ldrb	r3, [r0, #0]
 800cf94:	2b03      	cmp	r3, #3
 800cf96:	d002      	beq.n	800cf9e <ai_check_custom_types+0x16>
 800cf98:	2000      	movs	r0, #0
 800cf9a:	b002      	add	sp, #8
 800cf9c:	4770      	bx	lr
 800cf9e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d004      	beq.n	800cfb0 <ai_check_custom_types+0x28>
 800cfa6:	2001      	movs	r0, #1
 800cfa8:	f080 0001 	eor.w	r0, r0, #1
 800cfac:	b002      	add	sp, #8
 800cfae:	4770      	bx	lr
 800cfb0:	7842      	ldrb	r2, [r0, #1]
 800cfb2:	3001      	adds	r0, #1
 800cfb4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d1f4      	bne.n	800cfa6 <ai_check_custom_types+0x1e>
 800cfbc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800cfc0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d1ee      	bne.n	800cfa6 <ai_check_custom_types+0x1e>
 800cfc8:	7842      	ldrb	r2, [r0, #1]
 800cfca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d1e9      	bne.n	800cfa6 <ai_check_custom_types+0x1e>
 800cfd2:	2000      	movs	r0, #0
 800cfd4:	e7e8      	b.n	800cfa8 <ai_check_custom_types+0x20>
 800cfd6:	bf00      	nop
 800cfd8:	0801061c 	.word	0x0801061c

0800cfdc <ai_layers_forward_all>:
 800cfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfde:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800cfe0:	4604      	mov	r4, r0
 800cfe2:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800cfe4:	b316      	cbz	r6, 800d02c <ai_layers_forward_all+0x50>
 800cfe6:	b1c5      	cbz	r5, 800d01a <ai_layers_forward_all+0x3e>
 800cfe8:	6545      	str	r5, [r0, #84]	; 0x54
 800cfea:	4629      	mov	r1, r5
 800cfec:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800cfee:	2001      	movs	r0, #1
 800cff0:	47b0      	blx	r6
 800cff2:	2700      	movs	r7, #0
 800cff4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800cff6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800cff8:	2002      	movs	r0, #2
 800cffa:	47b0      	blx	r6
 800cffc:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800cffe:	692b      	ldr	r3, [r5, #16]
 800d000:	4628      	mov	r0, r5
 800d002:	4798      	blx	r3
 800d004:	68eb      	ldr	r3, [r5, #12]
 800d006:	2003      	movs	r0, #3
 800d008:	429d      	cmp	r5, r3
 800d00a:	4619      	mov	r1, r3
 800d00c:	d006      	beq.n	800d01c <ai_layers_forward_all+0x40>
 800d00e:	6563      	str	r3, [r4, #84]	; 0x54
 800d010:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800d012:	47b0      	blx	r6
 800d014:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800d016:	2900      	cmp	r1, #0
 800d018:	d1ed      	bne.n	800cff6 <ai_layers_forward_all+0x1a>
 800d01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d01c:	2100      	movs	r1, #0
 800d01e:	6567      	str	r7, [r4, #84]	; 0x54
 800d020:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800d022:	47b0      	blx	r6
 800d024:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800d026:	2900      	cmp	r1, #0
 800d028:	d1e5      	bne.n	800cff6 <ai_layers_forward_all+0x1a>
 800d02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d02c:	2d00      	cmp	r5, #0
 800d02e:	d0f4      	beq.n	800d01a <ai_layers_forward_all+0x3e>
 800d030:	6545      	str	r5, [r0, #84]	; 0x54
 800d032:	692b      	ldr	r3, [r5, #16]
 800d034:	4628      	mov	r0, r5
 800d036:	4798      	blx	r3
 800d038:	68eb      	ldr	r3, [r5, #12]
 800d03a:	42ab      	cmp	r3, r5
 800d03c:	461d      	mov	r5, r3
 800d03e:	d003      	beq.n	800d048 <ai_layers_forward_all+0x6c>
 800d040:	6563      	str	r3, [r4, #84]	; 0x54
 800d042:	2b00      	cmp	r3, #0
 800d044:	d1f5      	bne.n	800d032 <ai_layers_forward_all+0x56>
 800d046:	e7e8      	b.n	800d01a <ai_layers_forward_all+0x3e>
 800d048:	2300      	movs	r3, #0
 800d04a:	6563      	str	r3, [r4, #84]	; 0x54
 800d04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d04e:	bf00      	nop

0800d050 <ai_array_to_buffer_fmt>:
 800d050:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800d054:	2b02      	cmp	r3, #2
 800d056:	d01f      	beq.n	800d098 <ai_array_to_buffer_fmt+0x48>
 800d058:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800d05c:	4a1b      	ldr	r2, [pc, #108]	; (800d0cc <ai_array_to_buffer_fmt+0x7c>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d00a      	beq.n	800d078 <ai_array_to_buffer_fmt+0x28>
 800d062:	dc0d      	bgt.n	800d080 <ai_array_to_buffer_fmt+0x30>
 800d064:	4a1a      	ldr	r2, [pc, #104]	; (800d0d0 <ai_array_to_buffer_fmt+0x80>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d006      	beq.n	800d078 <ai_array_to_buffer_fmt+0x28>
 800d06a:	dd1d      	ble.n	800d0a8 <ai_array_to_buffer_fmt+0x58>
 800d06c:	4a19      	ldr	r2, [pc, #100]	; (800d0d4 <ai_array_to_buffer_fmt+0x84>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d002      	beq.n	800d078 <ai_array_to_buffer_fmt+0x28>
 800d072:	320f      	adds	r2, #15
 800d074:	4293      	cmp	r3, r2
 800d076:	d10d      	bne.n	800d094 <ai_array_to_buffer_fmt+0x44>
 800d078:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800d07c:	4318      	orrs	r0, r3
 800d07e:	4770      	bx	lr
 800d080:	4a15      	ldr	r2, [pc, #84]	; (800d0d8 <ai_array_to_buffer_fmt+0x88>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d0f8      	beq.n	800d078 <ai_array_to_buffer_fmt+0x28>
 800d086:	dd18      	ble.n	800d0ba <ai_array_to_buffer_fmt+0x6a>
 800d088:	4a14      	ldr	r2, [pc, #80]	; (800d0dc <ai_array_to_buffer_fmt+0x8c>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d0f4      	beq.n	800d078 <ai_array_to_buffer_fmt+0x28>
 800d08e:	4a14      	ldr	r2, [pc, #80]	; (800d0e0 <ai_array_to_buffer_fmt+0x90>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d0f1      	beq.n	800d078 <ai_array_to_buffer_fmt+0x28>
 800d094:	2340      	movs	r3, #64	; 0x40
 800d096:	e7ef      	b.n	800d078 <ai_array_to_buffer_fmt+0x28>
 800d098:	4b12      	ldr	r3, [pc, #72]	; (800d0e4 <ai_array_to_buffer_fmt+0x94>)
 800d09a:	4003      	ands	r3, r0
 800d09c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800d0a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d0a4:	4318      	orrs	r0, r3
 800d0a6:	4770      	bx	lr
 800d0a8:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d0e3      	beq.n	800d078 <ai_array_to_buffer_fmt+0x28>
 800d0b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d0df      	beq.n	800d078 <ai_array_to_buffer_fmt+0x28>
 800d0b8:	e7ec      	b.n	800d094 <ai_array_to_buffer_fmt+0x44>
 800d0ba:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d0da      	beq.n	800d078 <ai_array_to_buffer_fmt+0x28>
 800d0c2:	3207      	adds	r2, #7
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d0d7      	beq.n	800d078 <ai_array_to_buffer_fmt+0x28>
 800d0c8:	e7e4      	b.n	800d094 <ai_array_to_buffer_fmt+0x44>
 800d0ca:	bf00      	nop
 800d0cc:	00840040 	.word	0x00840040
 800d0d0:	00040447 	.word	0x00040447
 800d0d4:	00040840 	.word	0x00040840
 800d0d8:	00840840 	.word	0x00840840
 800d0dc:	0084084f 	.word	0x0084084f
 800d0e0:	01821040 	.word	0x01821040
 800d0e4:	00803fff 	.word	0x00803fff

0800d0e8 <ai_array_get_byte_size>:
 800d0e8:	b1e1      	cbz	r1, 800d124 <ai_array_get_byte_size+0x3c>
 800d0ea:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800d0ee:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800d0f2:	b410      	push	{r4}
 800d0f4:	f3c0 3482 	ubfx	r4, r0, #14, #3
 800d0f8:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800d0fc:	4423      	add	r3, r4
 800d0fe:	2804      	cmp	r0, #4
 800d100:	fb01 f103 	mul.w	r1, r1, r3
 800d104:	f101 0107 	add.w	r1, r1, #7
 800d108:	f021 0107 	bic.w	r1, r1, #7
 800d10c:	fa21 f102 	lsr.w	r1, r1, r2
 800d110:	d00a      	beq.n	800d128 <ai_array_get_byte_size+0x40>
 800d112:	2808      	cmp	r0, #8
 800d114:	d101      	bne.n	800d11a <ai_array_get_byte_size+0x32>
 800d116:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800d11a:	3107      	adds	r1, #7
 800d11c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d120:	08c8      	lsrs	r0, r1, #3
 800d122:	4770      	bx	lr
 800d124:	4608      	mov	r0, r1
 800d126:	4770      	bx	lr
 800d128:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800d12c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d130:	3107      	adds	r1, #7
 800d132:	08c8      	lsrs	r0, r1, #3
 800d134:	4770      	bx	lr
 800d136:	bf00      	nop

0800d138 <__errno>:
 800d138:	4b01      	ldr	r3, [pc, #4]	; (800d140 <__errno+0x8>)
 800d13a:	6818      	ldr	r0, [r3, #0]
 800d13c:	4770      	bx	lr
 800d13e:	bf00      	nop
 800d140:	240006ac 	.word	0x240006ac

0800d144 <__sflush_r>:
 800d144:	898a      	ldrh	r2, [r1, #12]
 800d146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d14a:	4605      	mov	r5, r0
 800d14c:	0710      	lsls	r0, r2, #28
 800d14e:	460c      	mov	r4, r1
 800d150:	d458      	bmi.n	800d204 <__sflush_r+0xc0>
 800d152:	684b      	ldr	r3, [r1, #4]
 800d154:	2b00      	cmp	r3, #0
 800d156:	dc05      	bgt.n	800d164 <__sflush_r+0x20>
 800d158:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	dc02      	bgt.n	800d164 <__sflush_r+0x20>
 800d15e:	2000      	movs	r0, #0
 800d160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d166:	2e00      	cmp	r6, #0
 800d168:	d0f9      	beq.n	800d15e <__sflush_r+0x1a>
 800d16a:	2300      	movs	r3, #0
 800d16c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d170:	682f      	ldr	r7, [r5, #0]
 800d172:	6a21      	ldr	r1, [r4, #32]
 800d174:	602b      	str	r3, [r5, #0]
 800d176:	d032      	beq.n	800d1de <__sflush_r+0x9a>
 800d178:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d17a:	89a3      	ldrh	r3, [r4, #12]
 800d17c:	075a      	lsls	r2, r3, #29
 800d17e:	d505      	bpl.n	800d18c <__sflush_r+0x48>
 800d180:	6863      	ldr	r3, [r4, #4]
 800d182:	1ac0      	subs	r0, r0, r3
 800d184:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d186:	b10b      	cbz	r3, 800d18c <__sflush_r+0x48>
 800d188:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d18a:	1ac0      	subs	r0, r0, r3
 800d18c:	2300      	movs	r3, #0
 800d18e:	4602      	mov	r2, r0
 800d190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d192:	6a21      	ldr	r1, [r4, #32]
 800d194:	4628      	mov	r0, r5
 800d196:	47b0      	blx	r6
 800d198:	1c43      	adds	r3, r0, #1
 800d19a:	89a3      	ldrh	r3, [r4, #12]
 800d19c:	d106      	bne.n	800d1ac <__sflush_r+0x68>
 800d19e:	6829      	ldr	r1, [r5, #0]
 800d1a0:	291d      	cmp	r1, #29
 800d1a2:	d848      	bhi.n	800d236 <__sflush_r+0xf2>
 800d1a4:	4a29      	ldr	r2, [pc, #164]	; (800d24c <__sflush_r+0x108>)
 800d1a6:	40ca      	lsrs	r2, r1
 800d1a8:	07d6      	lsls	r6, r2, #31
 800d1aa:	d544      	bpl.n	800d236 <__sflush_r+0xf2>
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	6062      	str	r2, [r4, #4]
 800d1b0:	04d9      	lsls	r1, r3, #19
 800d1b2:	6922      	ldr	r2, [r4, #16]
 800d1b4:	6022      	str	r2, [r4, #0]
 800d1b6:	d504      	bpl.n	800d1c2 <__sflush_r+0x7e>
 800d1b8:	1c42      	adds	r2, r0, #1
 800d1ba:	d101      	bne.n	800d1c0 <__sflush_r+0x7c>
 800d1bc:	682b      	ldr	r3, [r5, #0]
 800d1be:	b903      	cbnz	r3, 800d1c2 <__sflush_r+0x7e>
 800d1c0:	6560      	str	r0, [r4, #84]	; 0x54
 800d1c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1c4:	602f      	str	r7, [r5, #0]
 800d1c6:	2900      	cmp	r1, #0
 800d1c8:	d0c9      	beq.n	800d15e <__sflush_r+0x1a>
 800d1ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1ce:	4299      	cmp	r1, r3
 800d1d0:	d002      	beq.n	800d1d8 <__sflush_r+0x94>
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	f000 f970 	bl	800d4b8 <_free_r>
 800d1d8:	2000      	movs	r0, #0
 800d1da:	6360      	str	r0, [r4, #52]	; 0x34
 800d1dc:	e7c0      	b.n	800d160 <__sflush_r+0x1c>
 800d1de:	2301      	movs	r3, #1
 800d1e0:	4628      	mov	r0, r5
 800d1e2:	47b0      	blx	r6
 800d1e4:	1c41      	adds	r1, r0, #1
 800d1e6:	d1c8      	bne.n	800d17a <__sflush_r+0x36>
 800d1e8:	682b      	ldr	r3, [r5, #0]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d0c5      	beq.n	800d17a <__sflush_r+0x36>
 800d1ee:	2b1d      	cmp	r3, #29
 800d1f0:	d001      	beq.n	800d1f6 <__sflush_r+0xb2>
 800d1f2:	2b16      	cmp	r3, #22
 800d1f4:	d101      	bne.n	800d1fa <__sflush_r+0xb6>
 800d1f6:	602f      	str	r7, [r5, #0]
 800d1f8:	e7b1      	b.n	800d15e <__sflush_r+0x1a>
 800d1fa:	89a3      	ldrh	r3, [r4, #12]
 800d1fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d200:	81a3      	strh	r3, [r4, #12]
 800d202:	e7ad      	b.n	800d160 <__sflush_r+0x1c>
 800d204:	690f      	ldr	r7, [r1, #16]
 800d206:	2f00      	cmp	r7, #0
 800d208:	d0a9      	beq.n	800d15e <__sflush_r+0x1a>
 800d20a:	0793      	lsls	r3, r2, #30
 800d20c:	680e      	ldr	r6, [r1, #0]
 800d20e:	bf08      	it	eq
 800d210:	694b      	ldreq	r3, [r1, #20]
 800d212:	600f      	str	r7, [r1, #0]
 800d214:	bf18      	it	ne
 800d216:	2300      	movne	r3, #0
 800d218:	eba6 0807 	sub.w	r8, r6, r7
 800d21c:	608b      	str	r3, [r1, #8]
 800d21e:	f1b8 0f00 	cmp.w	r8, #0
 800d222:	dd9c      	ble.n	800d15e <__sflush_r+0x1a>
 800d224:	4643      	mov	r3, r8
 800d226:	463a      	mov	r2, r7
 800d228:	6a21      	ldr	r1, [r4, #32]
 800d22a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d22c:	4628      	mov	r0, r5
 800d22e:	47b0      	blx	r6
 800d230:	2800      	cmp	r0, #0
 800d232:	dc06      	bgt.n	800d242 <__sflush_r+0xfe>
 800d234:	89a3      	ldrh	r3, [r4, #12]
 800d236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d23a:	81a3      	strh	r3, [r4, #12]
 800d23c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d240:	e78e      	b.n	800d160 <__sflush_r+0x1c>
 800d242:	4407      	add	r7, r0
 800d244:	eba8 0800 	sub.w	r8, r8, r0
 800d248:	e7e9      	b.n	800d21e <__sflush_r+0xda>
 800d24a:	bf00      	nop
 800d24c:	20400001 	.word	0x20400001

0800d250 <_fflush_r>:
 800d250:	b538      	push	{r3, r4, r5, lr}
 800d252:	690b      	ldr	r3, [r1, #16]
 800d254:	4605      	mov	r5, r0
 800d256:	460c      	mov	r4, r1
 800d258:	b1db      	cbz	r3, 800d292 <_fflush_r+0x42>
 800d25a:	b118      	cbz	r0, 800d264 <_fflush_r+0x14>
 800d25c:	6983      	ldr	r3, [r0, #24]
 800d25e:	b90b      	cbnz	r3, 800d264 <_fflush_r+0x14>
 800d260:	f000 f860 	bl	800d324 <__sinit>
 800d264:	4b0c      	ldr	r3, [pc, #48]	; (800d298 <_fflush_r+0x48>)
 800d266:	429c      	cmp	r4, r3
 800d268:	d109      	bne.n	800d27e <_fflush_r+0x2e>
 800d26a:	686c      	ldr	r4, [r5, #4]
 800d26c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d270:	b17b      	cbz	r3, 800d292 <_fflush_r+0x42>
 800d272:	4621      	mov	r1, r4
 800d274:	4628      	mov	r0, r5
 800d276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d27a:	f7ff bf63 	b.w	800d144 <__sflush_r>
 800d27e:	4b07      	ldr	r3, [pc, #28]	; (800d29c <_fflush_r+0x4c>)
 800d280:	429c      	cmp	r4, r3
 800d282:	d101      	bne.n	800d288 <_fflush_r+0x38>
 800d284:	68ac      	ldr	r4, [r5, #8]
 800d286:	e7f1      	b.n	800d26c <_fflush_r+0x1c>
 800d288:	4b05      	ldr	r3, [pc, #20]	; (800d2a0 <_fflush_r+0x50>)
 800d28a:	429c      	cmp	r4, r3
 800d28c:	bf08      	it	eq
 800d28e:	68ec      	ldreq	r4, [r5, #12]
 800d290:	e7ec      	b.n	800d26c <_fflush_r+0x1c>
 800d292:	2000      	movs	r0, #0
 800d294:	bd38      	pop	{r3, r4, r5, pc}
 800d296:	bf00      	nop
 800d298:	08012b88 	.word	0x08012b88
 800d29c:	08012ba8 	.word	0x08012ba8
 800d2a0:	08012b68 	.word	0x08012b68

0800d2a4 <std>:
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	b510      	push	{r4, lr}
 800d2a8:	4604      	mov	r4, r0
 800d2aa:	e9c0 3300 	strd	r3, r3, [r0]
 800d2ae:	6083      	str	r3, [r0, #8]
 800d2b0:	8181      	strh	r1, [r0, #12]
 800d2b2:	6643      	str	r3, [r0, #100]	; 0x64
 800d2b4:	81c2      	strh	r2, [r0, #14]
 800d2b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d2ba:	6183      	str	r3, [r0, #24]
 800d2bc:	4619      	mov	r1, r3
 800d2be:	2208      	movs	r2, #8
 800d2c0:	305c      	adds	r0, #92	; 0x5c
 800d2c2:	f000 f8f0 	bl	800d4a6 <memset>
 800d2c6:	4b05      	ldr	r3, [pc, #20]	; (800d2dc <std+0x38>)
 800d2c8:	6263      	str	r3, [r4, #36]	; 0x24
 800d2ca:	4b05      	ldr	r3, [pc, #20]	; (800d2e0 <std+0x3c>)
 800d2cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800d2ce:	4b05      	ldr	r3, [pc, #20]	; (800d2e4 <std+0x40>)
 800d2d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d2d2:	4b05      	ldr	r3, [pc, #20]	; (800d2e8 <std+0x44>)
 800d2d4:	6224      	str	r4, [r4, #32]
 800d2d6:	6323      	str	r3, [r4, #48]	; 0x30
 800d2d8:	bd10      	pop	{r4, pc}
 800d2da:	bf00      	nop
 800d2dc:	0800dfe1 	.word	0x0800dfe1
 800d2e0:	0800e003 	.word	0x0800e003
 800d2e4:	0800e03b 	.word	0x0800e03b
 800d2e8:	0800e05f 	.word	0x0800e05f

0800d2ec <_cleanup_r>:
 800d2ec:	4901      	ldr	r1, [pc, #4]	; (800d2f4 <_cleanup_r+0x8>)
 800d2ee:	f000 b885 	b.w	800d3fc <_fwalk_reent>
 800d2f2:	bf00      	nop
 800d2f4:	0800d251 	.word	0x0800d251

0800d2f8 <__sfmoreglue>:
 800d2f8:	b570      	push	{r4, r5, r6, lr}
 800d2fa:	1e4a      	subs	r2, r1, #1
 800d2fc:	2568      	movs	r5, #104	; 0x68
 800d2fe:	4355      	muls	r5, r2
 800d300:	460e      	mov	r6, r1
 800d302:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d306:	f000 f925 	bl	800d554 <_malloc_r>
 800d30a:	4604      	mov	r4, r0
 800d30c:	b140      	cbz	r0, 800d320 <__sfmoreglue+0x28>
 800d30e:	2100      	movs	r1, #0
 800d310:	e9c0 1600 	strd	r1, r6, [r0]
 800d314:	300c      	adds	r0, #12
 800d316:	60a0      	str	r0, [r4, #8]
 800d318:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d31c:	f000 f8c3 	bl	800d4a6 <memset>
 800d320:	4620      	mov	r0, r4
 800d322:	bd70      	pop	{r4, r5, r6, pc}

0800d324 <__sinit>:
 800d324:	6983      	ldr	r3, [r0, #24]
 800d326:	b510      	push	{r4, lr}
 800d328:	4604      	mov	r4, r0
 800d32a:	bb33      	cbnz	r3, 800d37a <__sinit+0x56>
 800d32c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d330:	6503      	str	r3, [r0, #80]	; 0x50
 800d332:	4b12      	ldr	r3, [pc, #72]	; (800d37c <__sinit+0x58>)
 800d334:	4a12      	ldr	r2, [pc, #72]	; (800d380 <__sinit+0x5c>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	6282      	str	r2, [r0, #40]	; 0x28
 800d33a:	4298      	cmp	r0, r3
 800d33c:	bf04      	itt	eq
 800d33e:	2301      	moveq	r3, #1
 800d340:	6183      	streq	r3, [r0, #24]
 800d342:	f000 f81f 	bl	800d384 <__sfp>
 800d346:	6060      	str	r0, [r4, #4]
 800d348:	4620      	mov	r0, r4
 800d34a:	f000 f81b 	bl	800d384 <__sfp>
 800d34e:	60a0      	str	r0, [r4, #8]
 800d350:	4620      	mov	r0, r4
 800d352:	f000 f817 	bl	800d384 <__sfp>
 800d356:	2200      	movs	r2, #0
 800d358:	60e0      	str	r0, [r4, #12]
 800d35a:	2104      	movs	r1, #4
 800d35c:	6860      	ldr	r0, [r4, #4]
 800d35e:	f7ff ffa1 	bl	800d2a4 <std>
 800d362:	2201      	movs	r2, #1
 800d364:	2109      	movs	r1, #9
 800d366:	68a0      	ldr	r0, [r4, #8]
 800d368:	f7ff ff9c 	bl	800d2a4 <std>
 800d36c:	2202      	movs	r2, #2
 800d36e:	2112      	movs	r1, #18
 800d370:	68e0      	ldr	r0, [r4, #12]
 800d372:	f7ff ff97 	bl	800d2a4 <std>
 800d376:	2301      	movs	r3, #1
 800d378:	61a3      	str	r3, [r4, #24]
 800d37a:	bd10      	pop	{r4, pc}
 800d37c:	08012bc8 	.word	0x08012bc8
 800d380:	0800d2ed 	.word	0x0800d2ed

0800d384 <__sfp>:
 800d384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d386:	4b1b      	ldr	r3, [pc, #108]	; (800d3f4 <__sfp+0x70>)
 800d388:	681e      	ldr	r6, [r3, #0]
 800d38a:	69b3      	ldr	r3, [r6, #24]
 800d38c:	4607      	mov	r7, r0
 800d38e:	b913      	cbnz	r3, 800d396 <__sfp+0x12>
 800d390:	4630      	mov	r0, r6
 800d392:	f7ff ffc7 	bl	800d324 <__sinit>
 800d396:	3648      	adds	r6, #72	; 0x48
 800d398:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d39c:	3b01      	subs	r3, #1
 800d39e:	d503      	bpl.n	800d3a8 <__sfp+0x24>
 800d3a0:	6833      	ldr	r3, [r6, #0]
 800d3a2:	b133      	cbz	r3, 800d3b2 <__sfp+0x2e>
 800d3a4:	6836      	ldr	r6, [r6, #0]
 800d3a6:	e7f7      	b.n	800d398 <__sfp+0x14>
 800d3a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d3ac:	b16d      	cbz	r5, 800d3ca <__sfp+0x46>
 800d3ae:	3468      	adds	r4, #104	; 0x68
 800d3b0:	e7f4      	b.n	800d39c <__sfp+0x18>
 800d3b2:	2104      	movs	r1, #4
 800d3b4:	4638      	mov	r0, r7
 800d3b6:	f7ff ff9f 	bl	800d2f8 <__sfmoreglue>
 800d3ba:	6030      	str	r0, [r6, #0]
 800d3bc:	2800      	cmp	r0, #0
 800d3be:	d1f1      	bne.n	800d3a4 <__sfp+0x20>
 800d3c0:	230c      	movs	r3, #12
 800d3c2:	603b      	str	r3, [r7, #0]
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3ca:	4b0b      	ldr	r3, [pc, #44]	; (800d3f8 <__sfp+0x74>)
 800d3cc:	6665      	str	r5, [r4, #100]	; 0x64
 800d3ce:	e9c4 5500 	strd	r5, r5, [r4]
 800d3d2:	60a5      	str	r5, [r4, #8]
 800d3d4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d3d8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d3dc:	2208      	movs	r2, #8
 800d3de:	4629      	mov	r1, r5
 800d3e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d3e4:	f000 f85f 	bl	800d4a6 <memset>
 800d3e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d3ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d3f0:	e7e9      	b.n	800d3c6 <__sfp+0x42>
 800d3f2:	bf00      	nop
 800d3f4:	08012bc8 	.word	0x08012bc8
 800d3f8:	ffff0001 	.word	0xffff0001

0800d3fc <_fwalk_reent>:
 800d3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d400:	4680      	mov	r8, r0
 800d402:	4689      	mov	r9, r1
 800d404:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d408:	2600      	movs	r6, #0
 800d40a:	b914      	cbnz	r4, 800d412 <_fwalk_reent+0x16>
 800d40c:	4630      	mov	r0, r6
 800d40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d412:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d416:	3f01      	subs	r7, #1
 800d418:	d501      	bpl.n	800d41e <_fwalk_reent+0x22>
 800d41a:	6824      	ldr	r4, [r4, #0]
 800d41c:	e7f5      	b.n	800d40a <_fwalk_reent+0xe>
 800d41e:	89ab      	ldrh	r3, [r5, #12]
 800d420:	2b01      	cmp	r3, #1
 800d422:	d907      	bls.n	800d434 <_fwalk_reent+0x38>
 800d424:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d428:	3301      	adds	r3, #1
 800d42a:	d003      	beq.n	800d434 <_fwalk_reent+0x38>
 800d42c:	4629      	mov	r1, r5
 800d42e:	4640      	mov	r0, r8
 800d430:	47c8      	blx	r9
 800d432:	4306      	orrs	r6, r0
 800d434:	3568      	adds	r5, #104	; 0x68
 800d436:	e7ee      	b.n	800d416 <_fwalk_reent+0x1a>

0800d438 <__libc_init_array>:
 800d438:	b570      	push	{r4, r5, r6, lr}
 800d43a:	4e0d      	ldr	r6, [pc, #52]	; (800d470 <__libc_init_array+0x38>)
 800d43c:	4c0d      	ldr	r4, [pc, #52]	; (800d474 <__libc_init_array+0x3c>)
 800d43e:	1ba4      	subs	r4, r4, r6
 800d440:	10a4      	asrs	r4, r4, #2
 800d442:	2500      	movs	r5, #0
 800d444:	42a5      	cmp	r5, r4
 800d446:	d109      	bne.n	800d45c <__libc_init_array+0x24>
 800d448:	4e0b      	ldr	r6, [pc, #44]	; (800d478 <__libc_init_array+0x40>)
 800d44a:	4c0c      	ldr	r4, [pc, #48]	; (800d47c <__libc_init_array+0x44>)
 800d44c:	f002 fa86 	bl	800f95c <_init>
 800d450:	1ba4      	subs	r4, r4, r6
 800d452:	10a4      	asrs	r4, r4, #2
 800d454:	2500      	movs	r5, #0
 800d456:	42a5      	cmp	r5, r4
 800d458:	d105      	bne.n	800d466 <__libc_init_array+0x2e>
 800d45a:	bd70      	pop	{r4, r5, r6, pc}
 800d45c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d460:	4798      	blx	r3
 800d462:	3501      	adds	r5, #1
 800d464:	e7ee      	b.n	800d444 <__libc_init_array+0xc>
 800d466:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d46a:	4798      	blx	r3
 800d46c:	3501      	adds	r5, #1
 800d46e:	e7f2      	b.n	800d456 <__libc_init_array+0x1e>
 800d470:	08012f78 	.word	0x08012f78
 800d474:	08012f78 	.word	0x08012f78
 800d478:	08012f78 	.word	0x08012f78
 800d47c:	08012f7c 	.word	0x08012f7c

0800d480 <malloc>:
 800d480:	4b02      	ldr	r3, [pc, #8]	; (800d48c <malloc+0xc>)
 800d482:	4601      	mov	r1, r0
 800d484:	6818      	ldr	r0, [r3, #0]
 800d486:	f000 b865 	b.w	800d554 <_malloc_r>
 800d48a:	bf00      	nop
 800d48c:	240006ac 	.word	0x240006ac

0800d490 <memcpy>:
 800d490:	b510      	push	{r4, lr}
 800d492:	1e43      	subs	r3, r0, #1
 800d494:	440a      	add	r2, r1
 800d496:	4291      	cmp	r1, r2
 800d498:	d100      	bne.n	800d49c <memcpy+0xc>
 800d49a:	bd10      	pop	{r4, pc}
 800d49c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4a4:	e7f7      	b.n	800d496 <memcpy+0x6>

0800d4a6 <memset>:
 800d4a6:	4402      	add	r2, r0
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d100      	bne.n	800d4b0 <memset+0xa>
 800d4ae:	4770      	bx	lr
 800d4b0:	f803 1b01 	strb.w	r1, [r3], #1
 800d4b4:	e7f9      	b.n	800d4aa <memset+0x4>
	...

0800d4b8 <_free_r>:
 800d4b8:	b538      	push	{r3, r4, r5, lr}
 800d4ba:	4605      	mov	r5, r0
 800d4bc:	2900      	cmp	r1, #0
 800d4be:	d045      	beq.n	800d54c <_free_r+0x94>
 800d4c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4c4:	1f0c      	subs	r4, r1, #4
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	bfb8      	it	lt
 800d4ca:	18e4      	addlt	r4, r4, r3
 800d4cc:	f001 fd1c 	bl	800ef08 <__malloc_lock>
 800d4d0:	4a1f      	ldr	r2, [pc, #124]	; (800d550 <_free_r+0x98>)
 800d4d2:	6813      	ldr	r3, [r2, #0]
 800d4d4:	4610      	mov	r0, r2
 800d4d6:	b933      	cbnz	r3, 800d4e6 <_free_r+0x2e>
 800d4d8:	6063      	str	r3, [r4, #4]
 800d4da:	6014      	str	r4, [r2, #0]
 800d4dc:	4628      	mov	r0, r5
 800d4de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4e2:	f001 bd12 	b.w	800ef0a <__malloc_unlock>
 800d4e6:	42a3      	cmp	r3, r4
 800d4e8:	d90c      	bls.n	800d504 <_free_r+0x4c>
 800d4ea:	6821      	ldr	r1, [r4, #0]
 800d4ec:	1862      	adds	r2, r4, r1
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	bf04      	itt	eq
 800d4f2:	681a      	ldreq	r2, [r3, #0]
 800d4f4:	685b      	ldreq	r3, [r3, #4]
 800d4f6:	6063      	str	r3, [r4, #4]
 800d4f8:	bf04      	itt	eq
 800d4fa:	1852      	addeq	r2, r2, r1
 800d4fc:	6022      	streq	r2, [r4, #0]
 800d4fe:	6004      	str	r4, [r0, #0]
 800d500:	e7ec      	b.n	800d4dc <_free_r+0x24>
 800d502:	4613      	mov	r3, r2
 800d504:	685a      	ldr	r2, [r3, #4]
 800d506:	b10a      	cbz	r2, 800d50c <_free_r+0x54>
 800d508:	42a2      	cmp	r2, r4
 800d50a:	d9fa      	bls.n	800d502 <_free_r+0x4a>
 800d50c:	6819      	ldr	r1, [r3, #0]
 800d50e:	1858      	adds	r0, r3, r1
 800d510:	42a0      	cmp	r0, r4
 800d512:	d10b      	bne.n	800d52c <_free_r+0x74>
 800d514:	6820      	ldr	r0, [r4, #0]
 800d516:	4401      	add	r1, r0
 800d518:	1858      	adds	r0, r3, r1
 800d51a:	4282      	cmp	r2, r0
 800d51c:	6019      	str	r1, [r3, #0]
 800d51e:	d1dd      	bne.n	800d4dc <_free_r+0x24>
 800d520:	6810      	ldr	r0, [r2, #0]
 800d522:	6852      	ldr	r2, [r2, #4]
 800d524:	605a      	str	r2, [r3, #4]
 800d526:	4401      	add	r1, r0
 800d528:	6019      	str	r1, [r3, #0]
 800d52a:	e7d7      	b.n	800d4dc <_free_r+0x24>
 800d52c:	d902      	bls.n	800d534 <_free_r+0x7c>
 800d52e:	230c      	movs	r3, #12
 800d530:	602b      	str	r3, [r5, #0]
 800d532:	e7d3      	b.n	800d4dc <_free_r+0x24>
 800d534:	6820      	ldr	r0, [r4, #0]
 800d536:	1821      	adds	r1, r4, r0
 800d538:	428a      	cmp	r2, r1
 800d53a:	bf04      	itt	eq
 800d53c:	6811      	ldreq	r1, [r2, #0]
 800d53e:	6852      	ldreq	r2, [r2, #4]
 800d540:	6062      	str	r2, [r4, #4]
 800d542:	bf04      	itt	eq
 800d544:	1809      	addeq	r1, r1, r0
 800d546:	6021      	streq	r1, [r4, #0]
 800d548:	605c      	str	r4, [r3, #4]
 800d54a:	e7c7      	b.n	800d4dc <_free_r+0x24>
 800d54c:	bd38      	pop	{r3, r4, r5, pc}
 800d54e:	bf00      	nop
 800d550:	24001954 	.word	0x24001954

0800d554 <_malloc_r>:
 800d554:	b570      	push	{r4, r5, r6, lr}
 800d556:	1ccd      	adds	r5, r1, #3
 800d558:	f025 0503 	bic.w	r5, r5, #3
 800d55c:	3508      	adds	r5, #8
 800d55e:	2d0c      	cmp	r5, #12
 800d560:	bf38      	it	cc
 800d562:	250c      	movcc	r5, #12
 800d564:	2d00      	cmp	r5, #0
 800d566:	4606      	mov	r6, r0
 800d568:	db01      	blt.n	800d56e <_malloc_r+0x1a>
 800d56a:	42a9      	cmp	r1, r5
 800d56c:	d903      	bls.n	800d576 <_malloc_r+0x22>
 800d56e:	230c      	movs	r3, #12
 800d570:	6033      	str	r3, [r6, #0]
 800d572:	2000      	movs	r0, #0
 800d574:	bd70      	pop	{r4, r5, r6, pc}
 800d576:	f001 fcc7 	bl	800ef08 <__malloc_lock>
 800d57a:	4a21      	ldr	r2, [pc, #132]	; (800d600 <_malloc_r+0xac>)
 800d57c:	6814      	ldr	r4, [r2, #0]
 800d57e:	4621      	mov	r1, r4
 800d580:	b991      	cbnz	r1, 800d5a8 <_malloc_r+0x54>
 800d582:	4c20      	ldr	r4, [pc, #128]	; (800d604 <_malloc_r+0xb0>)
 800d584:	6823      	ldr	r3, [r4, #0]
 800d586:	b91b      	cbnz	r3, 800d590 <_malloc_r+0x3c>
 800d588:	4630      	mov	r0, r6
 800d58a:	f000 fd19 	bl	800dfc0 <_sbrk_r>
 800d58e:	6020      	str	r0, [r4, #0]
 800d590:	4629      	mov	r1, r5
 800d592:	4630      	mov	r0, r6
 800d594:	f000 fd14 	bl	800dfc0 <_sbrk_r>
 800d598:	1c43      	adds	r3, r0, #1
 800d59a:	d124      	bne.n	800d5e6 <_malloc_r+0x92>
 800d59c:	230c      	movs	r3, #12
 800d59e:	6033      	str	r3, [r6, #0]
 800d5a0:	4630      	mov	r0, r6
 800d5a2:	f001 fcb2 	bl	800ef0a <__malloc_unlock>
 800d5a6:	e7e4      	b.n	800d572 <_malloc_r+0x1e>
 800d5a8:	680b      	ldr	r3, [r1, #0]
 800d5aa:	1b5b      	subs	r3, r3, r5
 800d5ac:	d418      	bmi.n	800d5e0 <_malloc_r+0x8c>
 800d5ae:	2b0b      	cmp	r3, #11
 800d5b0:	d90f      	bls.n	800d5d2 <_malloc_r+0x7e>
 800d5b2:	600b      	str	r3, [r1, #0]
 800d5b4:	50cd      	str	r5, [r1, r3]
 800d5b6:	18cc      	adds	r4, r1, r3
 800d5b8:	4630      	mov	r0, r6
 800d5ba:	f001 fca6 	bl	800ef0a <__malloc_unlock>
 800d5be:	f104 000b 	add.w	r0, r4, #11
 800d5c2:	1d23      	adds	r3, r4, #4
 800d5c4:	f020 0007 	bic.w	r0, r0, #7
 800d5c8:	1ac3      	subs	r3, r0, r3
 800d5ca:	d0d3      	beq.n	800d574 <_malloc_r+0x20>
 800d5cc:	425a      	negs	r2, r3
 800d5ce:	50e2      	str	r2, [r4, r3]
 800d5d0:	e7d0      	b.n	800d574 <_malloc_r+0x20>
 800d5d2:	428c      	cmp	r4, r1
 800d5d4:	684b      	ldr	r3, [r1, #4]
 800d5d6:	bf16      	itet	ne
 800d5d8:	6063      	strne	r3, [r4, #4]
 800d5da:	6013      	streq	r3, [r2, #0]
 800d5dc:	460c      	movne	r4, r1
 800d5de:	e7eb      	b.n	800d5b8 <_malloc_r+0x64>
 800d5e0:	460c      	mov	r4, r1
 800d5e2:	6849      	ldr	r1, [r1, #4]
 800d5e4:	e7cc      	b.n	800d580 <_malloc_r+0x2c>
 800d5e6:	1cc4      	adds	r4, r0, #3
 800d5e8:	f024 0403 	bic.w	r4, r4, #3
 800d5ec:	42a0      	cmp	r0, r4
 800d5ee:	d005      	beq.n	800d5fc <_malloc_r+0xa8>
 800d5f0:	1a21      	subs	r1, r4, r0
 800d5f2:	4630      	mov	r0, r6
 800d5f4:	f000 fce4 	bl	800dfc0 <_sbrk_r>
 800d5f8:	3001      	adds	r0, #1
 800d5fa:	d0cf      	beq.n	800d59c <_malloc_r+0x48>
 800d5fc:	6025      	str	r5, [r4, #0]
 800d5fe:	e7db      	b.n	800d5b8 <_malloc_r+0x64>
 800d600:	24001954 	.word	0x24001954
 800d604:	24001958 	.word	0x24001958

0800d608 <__cvt>:
 800d608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d60a:	ed2d 8b02 	vpush	{d8}
 800d60e:	eeb0 8b40 	vmov.f64	d8, d0
 800d612:	b085      	sub	sp, #20
 800d614:	4617      	mov	r7, r2
 800d616:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d618:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d61a:	ee18 2a90 	vmov	r2, s17
 800d61e:	f025 0520 	bic.w	r5, r5, #32
 800d622:	2a00      	cmp	r2, #0
 800d624:	bfb6      	itet	lt
 800d626:	222d      	movlt	r2, #45	; 0x2d
 800d628:	2200      	movge	r2, #0
 800d62a:	eeb1 8b40 	vneglt.f64	d8, d0
 800d62e:	2d46      	cmp	r5, #70	; 0x46
 800d630:	460c      	mov	r4, r1
 800d632:	701a      	strb	r2, [r3, #0]
 800d634:	d004      	beq.n	800d640 <__cvt+0x38>
 800d636:	2d45      	cmp	r5, #69	; 0x45
 800d638:	d100      	bne.n	800d63c <__cvt+0x34>
 800d63a:	3401      	adds	r4, #1
 800d63c:	2102      	movs	r1, #2
 800d63e:	e000      	b.n	800d642 <__cvt+0x3a>
 800d640:	2103      	movs	r1, #3
 800d642:	ab03      	add	r3, sp, #12
 800d644:	9301      	str	r3, [sp, #4]
 800d646:	ab02      	add	r3, sp, #8
 800d648:	9300      	str	r3, [sp, #0]
 800d64a:	4622      	mov	r2, r4
 800d64c:	4633      	mov	r3, r6
 800d64e:	eeb0 0b48 	vmov.f64	d0, d8
 800d652:	f000 fe89 	bl	800e368 <_dtoa_r>
 800d656:	2d47      	cmp	r5, #71	; 0x47
 800d658:	d101      	bne.n	800d65e <__cvt+0x56>
 800d65a:	07fb      	lsls	r3, r7, #31
 800d65c:	d51e      	bpl.n	800d69c <__cvt+0x94>
 800d65e:	2d46      	cmp	r5, #70	; 0x46
 800d660:	eb00 0304 	add.w	r3, r0, r4
 800d664:	d10c      	bne.n	800d680 <__cvt+0x78>
 800d666:	7802      	ldrb	r2, [r0, #0]
 800d668:	2a30      	cmp	r2, #48	; 0x30
 800d66a:	d107      	bne.n	800d67c <__cvt+0x74>
 800d66c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d674:	bf1c      	itt	ne
 800d676:	f1c4 0401 	rsbne	r4, r4, #1
 800d67a:	6034      	strne	r4, [r6, #0]
 800d67c:	6832      	ldr	r2, [r6, #0]
 800d67e:	4413      	add	r3, r2
 800d680:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d688:	d007      	beq.n	800d69a <__cvt+0x92>
 800d68a:	2130      	movs	r1, #48	; 0x30
 800d68c:	9a03      	ldr	r2, [sp, #12]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d204      	bcs.n	800d69c <__cvt+0x94>
 800d692:	1c54      	adds	r4, r2, #1
 800d694:	9403      	str	r4, [sp, #12]
 800d696:	7011      	strb	r1, [r2, #0]
 800d698:	e7f8      	b.n	800d68c <__cvt+0x84>
 800d69a:	9303      	str	r3, [sp, #12]
 800d69c:	9b03      	ldr	r3, [sp, #12]
 800d69e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6a0:	1a1b      	subs	r3, r3, r0
 800d6a2:	6013      	str	r3, [r2, #0]
 800d6a4:	b005      	add	sp, #20
 800d6a6:	ecbd 8b02 	vpop	{d8}
 800d6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d6ac <__exponent>:
 800d6ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6ae:	2900      	cmp	r1, #0
 800d6b0:	4604      	mov	r4, r0
 800d6b2:	bfba      	itte	lt
 800d6b4:	4249      	neglt	r1, r1
 800d6b6:	232d      	movlt	r3, #45	; 0x2d
 800d6b8:	232b      	movge	r3, #43	; 0x2b
 800d6ba:	2909      	cmp	r1, #9
 800d6bc:	f804 2b02 	strb.w	r2, [r4], #2
 800d6c0:	7043      	strb	r3, [r0, #1]
 800d6c2:	dd20      	ble.n	800d706 <__exponent+0x5a>
 800d6c4:	f10d 0307 	add.w	r3, sp, #7
 800d6c8:	461f      	mov	r7, r3
 800d6ca:	260a      	movs	r6, #10
 800d6cc:	fb91 f5f6 	sdiv	r5, r1, r6
 800d6d0:	fb06 1115 	mls	r1, r6, r5, r1
 800d6d4:	3130      	adds	r1, #48	; 0x30
 800d6d6:	2d09      	cmp	r5, #9
 800d6d8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d6dc:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800d6e0:	4629      	mov	r1, r5
 800d6e2:	dc09      	bgt.n	800d6f8 <__exponent+0x4c>
 800d6e4:	3130      	adds	r1, #48	; 0x30
 800d6e6:	3b02      	subs	r3, #2
 800d6e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d6ec:	42bb      	cmp	r3, r7
 800d6ee:	4622      	mov	r2, r4
 800d6f0:	d304      	bcc.n	800d6fc <__exponent+0x50>
 800d6f2:	1a10      	subs	r0, r2, r0
 800d6f4:	b003      	add	sp, #12
 800d6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6f8:	4613      	mov	r3, r2
 800d6fa:	e7e7      	b.n	800d6cc <__exponent+0x20>
 800d6fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d700:	f804 2b01 	strb.w	r2, [r4], #1
 800d704:	e7f2      	b.n	800d6ec <__exponent+0x40>
 800d706:	2330      	movs	r3, #48	; 0x30
 800d708:	4419      	add	r1, r3
 800d70a:	7083      	strb	r3, [r0, #2]
 800d70c:	1d02      	adds	r2, r0, #4
 800d70e:	70c1      	strb	r1, [r0, #3]
 800d710:	e7ef      	b.n	800d6f2 <__exponent+0x46>
 800d712:	0000      	movs	r0, r0
 800d714:	0000      	movs	r0, r0
	...

0800d718 <_printf_float>:
 800d718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d71c:	b08d      	sub	sp, #52	; 0x34
 800d71e:	460c      	mov	r4, r1
 800d720:	4616      	mov	r6, r2
 800d722:	461f      	mov	r7, r3
 800d724:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800d728:	4605      	mov	r5, r0
 800d72a:	f001 fb69 	bl	800ee00 <_localeconv_r>
 800d72e:	f8d0 b000 	ldr.w	fp, [r0]
 800d732:	4658      	mov	r0, fp
 800d734:	f7f2 fdd4 	bl	80002e0 <strlen>
 800d738:	2300      	movs	r3, #0
 800d73a:	930a      	str	r3, [sp, #40]	; 0x28
 800d73c:	f8d8 3000 	ldr.w	r3, [r8]
 800d740:	9005      	str	r0, [sp, #20]
 800d742:	3307      	adds	r3, #7
 800d744:	f023 0307 	bic.w	r3, r3, #7
 800d748:	f103 0108 	add.w	r1, r3, #8
 800d74c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d750:	6822      	ldr	r2, [r4, #0]
 800d752:	f8c8 1000 	str.w	r1, [r8]
 800d756:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d75a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d75e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800d9e8 <_printf_float+0x2d0>
 800d762:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d766:	eeb0 6bc0 	vabs.f64	d6, d0
 800d76a:	eeb4 6b47 	vcmp.f64	d6, d7
 800d76e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d772:	dd24      	ble.n	800d7be <_printf_float+0xa6>
 800d774:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d77c:	d502      	bpl.n	800d784 <_printf_float+0x6c>
 800d77e:	232d      	movs	r3, #45	; 0x2d
 800d780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d784:	499a      	ldr	r1, [pc, #616]	; (800d9f0 <_printf_float+0x2d8>)
 800d786:	4b9b      	ldr	r3, [pc, #620]	; (800d9f4 <_printf_float+0x2dc>)
 800d788:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d78c:	bf8c      	ite	hi
 800d78e:	4688      	movhi	r8, r1
 800d790:	4698      	movls	r8, r3
 800d792:	f022 0204 	bic.w	r2, r2, #4
 800d796:	2303      	movs	r3, #3
 800d798:	6123      	str	r3, [r4, #16]
 800d79a:	6022      	str	r2, [r4, #0]
 800d79c:	f04f 0a00 	mov.w	sl, #0
 800d7a0:	9700      	str	r7, [sp, #0]
 800d7a2:	4633      	mov	r3, r6
 800d7a4:	aa0b      	add	r2, sp, #44	; 0x2c
 800d7a6:	4621      	mov	r1, r4
 800d7a8:	4628      	mov	r0, r5
 800d7aa:	f000 f9e1 	bl	800db70 <_printf_common>
 800d7ae:	3001      	adds	r0, #1
 800d7b0:	f040 8089 	bne.w	800d8c6 <_printf_float+0x1ae>
 800d7b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7b8:	b00d      	add	sp, #52	; 0x34
 800d7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7be:	eeb4 0b40 	vcmp.f64	d0, d0
 800d7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7c6:	d702      	bvc.n	800d7ce <_printf_float+0xb6>
 800d7c8:	498b      	ldr	r1, [pc, #556]	; (800d9f8 <_printf_float+0x2e0>)
 800d7ca:	4b8c      	ldr	r3, [pc, #560]	; (800d9fc <_printf_float+0x2e4>)
 800d7cc:	e7dc      	b.n	800d788 <_printf_float+0x70>
 800d7ce:	6861      	ldr	r1, [r4, #4]
 800d7d0:	1c4b      	adds	r3, r1, #1
 800d7d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d7d6:	ab0a      	add	r3, sp, #40	; 0x28
 800d7d8:	a809      	add	r0, sp, #36	; 0x24
 800d7da:	d13b      	bne.n	800d854 <_printf_float+0x13c>
 800d7dc:	2106      	movs	r1, #6
 800d7de:	6061      	str	r1, [r4, #4]
 800d7e0:	f04f 0c00 	mov.w	ip, #0
 800d7e4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800d7e8:	e9cd 0900 	strd	r0, r9, [sp]
 800d7ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d7f0:	6022      	str	r2, [r4, #0]
 800d7f2:	6861      	ldr	r1, [r4, #4]
 800d7f4:	4628      	mov	r0, r5
 800d7f6:	f7ff ff07 	bl	800d608 <__cvt>
 800d7fa:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800d7fe:	2b47      	cmp	r3, #71	; 0x47
 800d800:	4680      	mov	r8, r0
 800d802:	d109      	bne.n	800d818 <_printf_float+0x100>
 800d804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d806:	1cd8      	adds	r0, r3, #3
 800d808:	db02      	blt.n	800d810 <_printf_float+0xf8>
 800d80a:	6862      	ldr	r2, [r4, #4]
 800d80c:	4293      	cmp	r3, r2
 800d80e:	dd47      	ble.n	800d8a0 <_printf_float+0x188>
 800d810:	f1a9 0902 	sub.w	r9, r9, #2
 800d814:	fa5f f989 	uxtb.w	r9, r9
 800d818:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d81c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d81e:	d824      	bhi.n	800d86a <_printf_float+0x152>
 800d820:	3901      	subs	r1, #1
 800d822:	464a      	mov	r2, r9
 800d824:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d828:	9109      	str	r1, [sp, #36]	; 0x24
 800d82a:	f7ff ff3f 	bl	800d6ac <__exponent>
 800d82e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d830:	1813      	adds	r3, r2, r0
 800d832:	2a01      	cmp	r2, #1
 800d834:	4682      	mov	sl, r0
 800d836:	6123      	str	r3, [r4, #16]
 800d838:	dc02      	bgt.n	800d840 <_printf_float+0x128>
 800d83a:	6822      	ldr	r2, [r4, #0]
 800d83c:	07d1      	lsls	r1, r2, #31
 800d83e:	d501      	bpl.n	800d844 <_printf_float+0x12c>
 800d840:	3301      	adds	r3, #1
 800d842:	6123      	str	r3, [r4, #16]
 800d844:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d0a9      	beq.n	800d7a0 <_printf_float+0x88>
 800d84c:	232d      	movs	r3, #45	; 0x2d
 800d84e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d852:	e7a5      	b.n	800d7a0 <_printf_float+0x88>
 800d854:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800d858:	f000 8178 	beq.w	800db4c <_printf_float+0x434>
 800d85c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d860:	d1be      	bne.n	800d7e0 <_printf_float+0xc8>
 800d862:	2900      	cmp	r1, #0
 800d864:	d1bc      	bne.n	800d7e0 <_printf_float+0xc8>
 800d866:	2101      	movs	r1, #1
 800d868:	e7b9      	b.n	800d7de <_printf_float+0xc6>
 800d86a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d86e:	d119      	bne.n	800d8a4 <_printf_float+0x18c>
 800d870:	2900      	cmp	r1, #0
 800d872:	6863      	ldr	r3, [r4, #4]
 800d874:	dd0c      	ble.n	800d890 <_printf_float+0x178>
 800d876:	6121      	str	r1, [r4, #16]
 800d878:	b913      	cbnz	r3, 800d880 <_printf_float+0x168>
 800d87a:	6822      	ldr	r2, [r4, #0]
 800d87c:	07d2      	lsls	r2, r2, #31
 800d87e:	d502      	bpl.n	800d886 <_printf_float+0x16e>
 800d880:	3301      	adds	r3, #1
 800d882:	440b      	add	r3, r1
 800d884:	6123      	str	r3, [r4, #16]
 800d886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d888:	65a3      	str	r3, [r4, #88]	; 0x58
 800d88a:	f04f 0a00 	mov.w	sl, #0
 800d88e:	e7d9      	b.n	800d844 <_printf_float+0x12c>
 800d890:	b913      	cbnz	r3, 800d898 <_printf_float+0x180>
 800d892:	6822      	ldr	r2, [r4, #0]
 800d894:	07d0      	lsls	r0, r2, #31
 800d896:	d501      	bpl.n	800d89c <_printf_float+0x184>
 800d898:	3302      	adds	r3, #2
 800d89a:	e7f3      	b.n	800d884 <_printf_float+0x16c>
 800d89c:	2301      	movs	r3, #1
 800d89e:	e7f1      	b.n	800d884 <_printf_float+0x16c>
 800d8a0:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d8a4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	db05      	blt.n	800d8b8 <_printf_float+0x1a0>
 800d8ac:	6822      	ldr	r2, [r4, #0]
 800d8ae:	6123      	str	r3, [r4, #16]
 800d8b0:	07d1      	lsls	r1, r2, #31
 800d8b2:	d5e8      	bpl.n	800d886 <_printf_float+0x16e>
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	e7e5      	b.n	800d884 <_printf_float+0x16c>
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	bfd4      	ite	le
 800d8bc:	f1c3 0302 	rsble	r3, r3, #2
 800d8c0:	2301      	movgt	r3, #1
 800d8c2:	4413      	add	r3, r2
 800d8c4:	e7de      	b.n	800d884 <_printf_float+0x16c>
 800d8c6:	6823      	ldr	r3, [r4, #0]
 800d8c8:	055a      	lsls	r2, r3, #21
 800d8ca:	d407      	bmi.n	800d8dc <_printf_float+0x1c4>
 800d8cc:	6923      	ldr	r3, [r4, #16]
 800d8ce:	4642      	mov	r2, r8
 800d8d0:	4631      	mov	r1, r6
 800d8d2:	4628      	mov	r0, r5
 800d8d4:	47b8      	blx	r7
 800d8d6:	3001      	adds	r0, #1
 800d8d8:	d12a      	bne.n	800d930 <_printf_float+0x218>
 800d8da:	e76b      	b.n	800d7b4 <_printf_float+0x9c>
 800d8dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d8e0:	f240 80de 	bls.w	800daa0 <_printf_float+0x388>
 800d8e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d8e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8f0:	d133      	bne.n	800d95a <_printf_float+0x242>
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	4a42      	ldr	r2, [pc, #264]	; (800da00 <_printf_float+0x2e8>)
 800d8f6:	4631      	mov	r1, r6
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	47b8      	blx	r7
 800d8fc:	3001      	adds	r0, #1
 800d8fe:	f43f af59 	beq.w	800d7b4 <_printf_float+0x9c>
 800d902:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d906:	429a      	cmp	r2, r3
 800d908:	db02      	blt.n	800d910 <_printf_float+0x1f8>
 800d90a:	6823      	ldr	r3, [r4, #0]
 800d90c:	07d8      	lsls	r0, r3, #31
 800d90e:	d50f      	bpl.n	800d930 <_printf_float+0x218>
 800d910:	9b05      	ldr	r3, [sp, #20]
 800d912:	465a      	mov	r2, fp
 800d914:	4631      	mov	r1, r6
 800d916:	4628      	mov	r0, r5
 800d918:	47b8      	blx	r7
 800d91a:	3001      	adds	r0, #1
 800d91c:	f43f af4a 	beq.w	800d7b4 <_printf_float+0x9c>
 800d920:	f04f 0800 	mov.w	r8, #0
 800d924:	f104 091a 	add.w	r9, r4, #26
 800d928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d92a:	3b01      	subs	r3, #1
 800d92c:	4543      	cmp	r3, r8
 800d92e:	dc09      	bgt.n	800d944 <_printf_float+0x22c>
 800d930:	6823      	ldr	r3, [r4, #0]
 800d932:	079b      	lsls	r3, r3, #30
 800d934:	f100 8105 	bmi.w	800db42 <_printf_float+0x42a>
 800d938:	68e0      	ldr	r0, [r4, #12]
 800d93a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d93c:	4298      	cmp	r0, r3
 800d93e:	bfb8      	it	lt
 800d940:	4618      	movlt	r0, r3
 800d942:	e739      	b.n	800d7b8 <_printf_float+0xa0>
 800d944:	2301      	movs	r3, #1
 800d946:	464a      	mov	r2, r9
 800d948:	4631      	mov	r1, r6
 800d94a:	4628      	mov	r0, r5
 800d94c:	47b8      	blx	r7
 800d94e:	3001      	adds	r0, #1
 800d950:	f43f af30 	beq.w	800d7b4 <_printf_float+0x9c>
 800d954:	f108 0801 	add.w	r8, r8, #1
 800d958:	e7e6      	b.n	800d928 <_printf_float+0x210>
 800d95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	dc2b      	bgt.n	800d9b8 <_printf_float+0x2a0>
 800d960:	2301      	movs	r3, #1
 800d962:	4a27      	ldr	r2, [pc, #156]	; (800da00 <_printf_float+0x2e8>)
 800d964:	4631      	mov	r1, r6
 800d966:	4628      	mov	r0, r5
 800d968:	47b8      	blx	r7
 800d96a:	3001      	adds	r0, #1
 800d96c:	f43f af22 	beq.w	800d7b4 <_printf_float+0x9c>
 800d970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d972:	b923      	cbnz	r3, 800d97e <_printf_float+0x266>
 800d974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d976:	b913      	cbnz	r3, 800d97e <_printf_float+0x266>
 800d978:	6823      	ldr	r3, [r4, #0]
 800d97a:	07d9      	lsls	r1, r3, #31
 800d97c:	d5d8      	bpl.n	800d930 <_printf_float+0x218>
 800d97e:	9b05      	ldr	r3, [sp, #20]
 800d980:	465a      	mov	r2, fp
 800d982:	4631      	mov	r1, r6
 800d984:	4628      	mov	r0, r5
 800d986:	47b8      	blx	r7
 800d988:	3001      	adds	r0, #1
 800d98a:	f43f af13 	beq.w	800d7b4 <_printf_float+0x9c>
 800d98e:	f04f 0900 	mov.w	r9, #0
 800d992:	f104 0a1a 	add.w	sl, r4, #26
 800d996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d998:	425b      	negs	r3, r3
 800d99a:	454b      	cmp	r3, r9
 800d99c:	dc01      	bgt.n	800d9a2 <_printf_float+0x28a>
 800d99e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9a0:	e795      	b.n	800d8ce <_printf_float+0x1b6>
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	4652      	mov	r2, sl
 800d9a6:	4631      	mov	r1, r6
 800d9a8:	4628      	mov	r0, r5
 800d9aa:	47b8      	blx	r7
 800d9ac:	3001      	adds	r0, #1
 800d9ae:	f43f af01 	beq.w	800d7b4 <_printf_float+0x9c>
 800d9b2:	f109 0901 	add.w	r9, r9, #1
 800d9b6:	e7ee      	b.n	800d996 <_printf_float+0x27e>
 800d9b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	bfa8      	it	ge
 800d9c0:	461a      	movge	r2, r3
 800d9c2:	2a00      	cmp	r2, #0
 800d9c4:	4691      	mov	r9, r2
 800d9c6:	dd07      	ble.n	800d9d8 <_printf_float+0x2c0>
 800d9c8:	4613      	mov	r3, r2
 800d9ca:	4631      	mov	r1, r6
 800d9cc:	4642      	mov	r2, r8
 800d9ce:	4628      	mov	r0, r5
 800d9d0:	47b8      	blx	r7
 800d9d2:	3001      	adds	r0, #1
 800d9d4:	f43f aeee 	beq.w	800d7b4 <_printf_float+0x9c>
 800d9d8:	f104 031a 	add.w	r3, r4, #26
 800d9dc:	f04f 0a00 	mov.w	sl, #0
 800d9e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d9e4:	9307      	str	r3, [sp, #28]
 800d9e6:	e017      	b.n	800da18 <_printf_float+0x300>
 800d9e8:	ffffffff 	.word	0xffffffff
 800d9ec:	7fefffff 	.word	0x7fefffff
 800d9f0:	08012bd0 	.word	0x08012bd0
 800d9f4:	08012bcc 	.word	0x08012bcc
 800d9f8:	08012bd8 	.word	0x08012bd8
 800d9fc:	08012bd4 	.word	0x08012bd4
 800da00:	08012bdc 	.word	0x08012bdc
 800da04:	2301      	movs	r3, #1
 800da06:	9a07      	ldr	r2, [sp, #28]
 800da08:	4631      	mov	r1, r6
 800da0a:	4628      	mov	r0, r5
 800da0c:	47b8      	blx	r7
 800da0e:	3001      	adds	r0, #1
 800da10:	f43f aed0 	beq.w	800d7b4 <_printf_float+0x9c>
 800da14:	f10a 0a01 	add.w	sl, sl, #1
 800da18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da1a:	9306      	str	r3, [sp, #24]
 800da1c:	eba3 0309 	sub.w	r3, r3, r9
 800da20:	4553      	cmp	r3, sl
 800da22:	dcef      	bgt.n	800da04 <_printf_float+0x2ec>
 800da24:	9b06      	ldr	r3, [sp, #24]
 800da26:	4498      	add	r8, r3
 800da28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da2c:	429a      	cmp	r2, r3
 800da2e:	db15      	blt.n	800da5c <_printf_float+0x344>
 800da30:	6823      	ldr	r3, [r4, #0]
 800da32:	07da      	lsls	r2, r3, #31
 800da34:	d412      	bmi.n	800da5c <_printf_float+0x344>
 800da36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da38:	9a06      	ldr	r2, [sp, #24]
 800da3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da3c:	1a9a      	subs	r2, r3, r2
 800da3e:	eba3 0a01 	sub.w	sl, r3, r1
 800da42:	4592      	cmp	sl, r2
 800da44:	bfa8      	it	ge
 800da46:	4692      	movge	sl, r2
 800da48:	f1ba 0f00 	cmp.w	sl, #0
 800da4c:	dc0e      	bgt.n	800da6c <_printf_float+0x354>
 800da4e:	f04f 0800 	mov.w	r8, #0
 800da52:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da56:	f104 091a 	add.w	r9, r4, #26
 800da5a:	e019      	b.n	800da90 <_printf_float+0x378>
 800da5c:	9b05      	ldr	r3, [sp, #20]
 800da5e:	465a      	mov	r2, fp
 800da60:	4631      	mov	r1, r6
 800da62:	4628      	mov	r0, r5
 800da64:	47b8      	blx	r7
 800da66:	3001      	adds	r0, #1
 800da68:	d1e5      	bne.n	800da36 <_printf_float+0x31e>
 800da6a:	e6a3      	b.n	800d7b4 <_printf_float+0x9c>
 800da6c:	4653      	mov	r3, sl
 800da6e:	4642      	mov	r2, r8
 800da70:	4631      	mov	r1, r6
 800da72:	4628      	mov	r0, r5
 800da74:	47b8      	blx	r7
 800da76:	3001      	adds	r0, #1
 800da78:	d1e9      	bne.n	800da4e <_printf_float+0x336>
 800da7a:	e69b      	b.n	800d7b4 <_printf_float+0x9c>
 800da7c:	2301      	movs	r3, #1
 800da7e:	464a      	mov	r2, r9
 800da80:	4631      	mov	r1, r6
 800da82:	4628      	mov	r0, r5
 800da84:	47b8      	blx	r7
 800da86:	3001      	adds	r0, #1
 800da88:	f43f ae94 	beq.w	800d7b4 <_printf_float+0x9c>
 800da8c:	f108 0801 	add.w	r8, r8, #1
 800da90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da94:	1a9b      	subs	r3, r3, r2
 800da96:	eba3 030a 	sub.w	r3, r3, sl
 800da9a:	4543      	cmp	r3, r8
 800da9c:	dcee      	bgt.n	800da7c <_printf_float+0x364>
 800da9e:	e747      	b.n	800d930 <_printf_float+0x218>
 800daa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800daa2:	2a01      	cmp	r2, #1
 800daa4:	dc01      	bgt.n	800daaa <_printf_float+0x392>
 800daa6:	07db      	lsls	r3, r3, #31
 800daa8:	d539      	bpl.n	800db1e <_printf_float+0x406>
 800daaa:	2301      	movs	r3, #1
 800daac:	4642      	mov	r2, r8
 800daae:	4631      	mov	r1, r6
 800dab0:	4628      	mov	r0, r5
 800dab2:	47b8      	blx	r7
 800dab4:	3001      	adds	r0, #1
 800dab6:	f43f ae7d 	beq.w	800d7b4 <_printf_float+0x9c>
 800daba:	9b05      	ldr	r3, [sp, #20]
 800dabc:	465a      	mov	r2, fp
 800dabe:	4631      	mov	r1, r6
 800dac0:	4628      	mov	r0, r5
 800dac2:	47b8      	blx	r7
 800dac4:	3001      	adds	r0, #1
 800dac6:	f108 0801 	add.w	r8, r8, #1
 800daca:	f43f ae73 	beq.w	800d7b4 <_printf_float+0x9c>
 800dace:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800dad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dad4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dadc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800dae0:	d018      	beq.n	800db14 <_printf_float+0x3fc>
 800dae2:	4642      	mov	r2, r8
 800dae4:	4631      	mov	r1, r6
 800dae6:	4628      	mov	r0, r5
 800dae8:	47b8      	blx	r7
 800daea:	3001      	adds	r0, #1
 800daec:	d10e      	bne.n	800db0c <_printf_float+0x3f4>
 800daee:	e661      	b.n	800d7b4 <_printf_float+0x9c>
 800daf0:	2301      	movs	r3, #1
 800daf2:	464a      	mov	r2, r9
 800daf4:	4631      	mov	r1, r6
 800daf6:	4628      	mov	r0, r5
 800daf8:	47b8      	blx	r7
 800dafa:	3001      	adds	r0, #1
 800dafc:	f43f ae5a 	beq.w	800d7b4 <_printf_float+0x9c>
 800db00:	f108 0801 	add.w	r8, r8, #1
 800db04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db06:	3b01      	subs	r3, #1
 800db08:	4543      	cmp	r3, r8
 800db0a:	dcf1      	bgt.n	800daf0 <_printf_float+0x3d8>
 800db0c:	4653      	mov	r3, sl
 800db0e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800db12:	e6dd      	b.n	800d8d0 <_printf_float+0x1b8>
 800db14:	f04f 0800 	mov.w	r8, #0
 800db18:	f104 091a 	add.w	r9, r4, #26
 800db1c:	e7f2      	b.n	800db04 <_printf_float+0x3ec>
 800db1e:	2301      	movs	r3, #1
 800db20:	e7df      	b.n	800dae2 <_printf_float+0x3ca>
 800db22:	2301      	movs	r3, #1
 800db24:	464a      	mov	r2, r9
 800db26:	4631      	mov	r1, r6
 800db28:	4628      	mov	r0, r5
 800db2a:	47b8      	blx	r7
 800db2c:	3001      	adds	r0, #1
 800db2e:	f43f ae41 	beq.w	800d7b4 <_printf_float+0x9c>
 800db32:	f108 0801 	add.w	r8, r8, #1
 800db36:	68e3      	ldr	r3, [r4, #12]
 800db38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db3a:	1a9b      	subs	r3, r3, r2
 800db3c:	4543      	cmp	r3, r8
 800db3e:	dcf0      	bgt.n	800db22 <_printf_float+0x40a>
 800db40:	e6fa      	b.n	800d938 <_printf_float+0x220>
 800db42:	f04f 0800 	mov.w	r8, #0
 800db46:	f104 0919 	add.w	r9, r4, #25
 800db4a:	e7f4      	b.n	800db36 <_printf_float+0x41e>
 800db4c:	2900      	cmp	r1, #0
 800db4e:	f43f ae8a 	beq.w	800d866 <_printf_float+0x14e>
 800db52:	f04f 0c00 	mov.w	ip, #0
 800db56:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800db5a:	e9cd 0900 	strd	r0, r9, [sp]
 800db5e:	6022      	str	r2, [r4, #0]
 800db60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800db64:	4628      	mov	r0, r5
 800db66:	f7ff fd4f 	bl	800d608 <__cvt>
 800db6a:	4680      	mov	r8, r0
 800db6c:	e64a      	b.n	800d804 <_printf_float+0xec>
 800db6e:	bf00      	nop

0800db70 <_printf_common>:
 800db70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db74:	4691      	mov	r9, r2
 800db76:	461f      	mov	r7, r3
 800db78:	688a      	ldr	r2, [r1, #8]
 800db7a:	690b      	ldr	r3, [r1, #16]
 800db7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800db80:	4293      	cmp	r3, r2
 800db82:	bfb8      	it	lt
 800db84:	4613      	movlt	r3, r2
 800db86:	f8c9 3000 	str.w	r3, [r9]
 800db8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800db8e:	4606      	mov	r6, r0
 800db90:	460c      	mov	r4, r1
 800db92:	b112      	cbz	r2, 800db9a <_printf_common+0x2a>
 800db94:	3301      	adds	r3, #1
 800db96:	f8c9 3000 	str.w	r3, [r9]
 800db9a:	6823      	ldr	r3, [r4, #0]
 800db9c:	0699      	lsls	r1, r3, #26
 800db9e:	bf42      	ittt	mi
 800dba0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dba4:	3302      	addmi	r3, #2
 800dba6:	f8c9 3000 	strmi.w	r3, [r9]
 800dbaa:	6825      	ldr	r5, [r4, #0]
 800dbac:	f015 0506 	ands.w	r5, r5, #6
 800dbb0:	d107      	bne.n	800dbc2 <_printf_common+0x52>
 800dbb2:	f104 0a19 	add.w	sl, r4, #25
 800dbb6:	68e3      	ldr	r3, [r4, #12]
 800dbb8:	f8d9 2000 	ldr.w	r2, [r9]
 800dbbc:	1a9b      	subs	r3, r3, r2
 800dbbe:	42ab      	cmp	r3, r5
 800dbc0:	dc28      	bgt.n	800dc14 <_printf_common+0xa4>
 800dbc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dbc6:	6822      	ldr	r2, [r4, #0]
 800dbc8:	3300      	adds	r3, #0
 800dbca:	bf18      	it	ne
 800dbcc:	2301      	movne	r3, #1
 800dbce:	0692      	lsls	r2, r2, #26
 800dbd0:	d42d      	bmi.n	800dc2e <_printf_common+0xbe>
 800dbd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dbd6:	4639      	mov	r1, r7
 800dbd8:	4630      	mov	r0, r6
 800dbda:	47c0      	blx	r8
 800dbdc:	3001      	adds	r0, #1
 800dbde:	d020      	beq.n	800dc22 <_printf_common+0xb2>
 800dbe0:	6823      	ldr	r3, [r4, #0]
 800dbe2:	68e5      	ldr	r5, [r4, #12]
 800dbe4:	f8d9 2000 	ldr.w	r2, [r9]
 800dbe8:	f003 0306 	and.w	r3, r3, #6
 800dbec:	2b04      	cmp	r3, #4
 800dbee:	bf08      	it	eq
 800dbf0:	1aad      	subeq	r5, r5, r2
 800dbf2:	68a3      	ldr	r3, [r4, #8]
 800dbf4:	6922      	ldr	r2, [r4, #16]
 800dbf6:	bf0c      	ite	eq
 800dbf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dbfc:	2500      	movne	r5, #0
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	bfc4      	itt	gt
 800dc02:	1a9b      	subgt	r3, r3, r2
 800dc04:	18ed      	addgt	r5, r5, r3
 800dc06:	f04f 0900 	mov.w	r9, #0
 800dc0a:	341a      	adds	r4, #26
 800dc0c:	454d      	cmp	r5, r9
 800dc0e:	d11a      	bne.n	800dc46 <_printf_common+0xd6>
 800dc10:	2000      	movs	r0, #0
 800dc12:	e008      	b.n	800dc26 <_printf_common+0xb6>
 800dc14:	2301      	movs	r3, #1
 800dc16:	4652      	mov	r2, sl
 800dc18:	4639      	mov	r1, r7
 800dc1a:	4630      	mov	r0, r6
 800dc1c:	47c0      	blx	r8
 800dc1e:	3001      	adds	r0, #1
 800dc20:	d103      	bne.n	800dc2a <_printf_common+0xba>
 800dc22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc2a:	3501      	adds	r5, #1
 800dc2c:	e7c3      	b.n	800dbb6 <_printf_common+0x46>
 800dc2e:	18e1      	adds	r1, r4, r3
 800dc30:	1c5a      	adds	r2, r3, #1
 800dc32:	2030      	movs	r0, #48	; 0x30
 800dc34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dc38:	4422      	add	r2, r4
 800dc3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dc3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dc42:	3302      	adds	r3, #2
 800dc44:	e7c5      	b.n	800dbd2 <_printf_common+0x62>
 800dc46:	2301      	movs	r3, #1
 800dc48:	4622      	mov	r2, r4
 800dc4a:	4639      	mov	r1, r7
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	47c0      	blx	r8
 800dc50:	3001      	adds	r0, #1
 800dc52:	d0e6      	beq.n	800dc22 <_printf_common+0xb2>
 800dc54:	f109 0901 	add.w	r9, r9, #1
 800dc58:	e7d8      	b.n	800dc0c <_printf_common+0x9c>
	...

0800dc5c <_printf_i>:
 800dc5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dc64:	460c      	mov	r4, r1
 800dc66:	7e09      	ldrb	r1, [r1, #24]
 800dc68:	b085      	sub	sp, #20
 800dc6a:	296e      	cmp	r1, #110	; 0x6e
 800dc6c:	4617      	mov	r7, r2
 800dc6e:	4606      	mov	r6, r0
 800dc70:	4698      	mov	r8, r3
 800dc72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dc74:	f000 80b3 	beq.w	800ddde <_printf_i+0x182>
 800dc78:	d822      	bhi.n	800dcc0 <_printf_i+0x64>
 800dc7a:	2963      	cmp	r1, #99	; 0x63
 800dc7c:	d036      	beq.n	800dcec <_printf_i+0x90>
 800dc7e:	d80a      	bhi.n	800dc96 <_printf_i+0x3a>
 800dc80:	2900      	cmp	r1, #0
 800dc82:	f000 80b9 	beq.w	800ddf8 <_printf_i+0x19c>
 800dc86:	2958      	cmp	r1, #88	; 0x58
 800dc88:	f000 8083 	beq.w	800dd92 <_printf_i+0x136>
 800dc8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800dc94:	e032      	b.n	800dcfc <_printf_i+0xa0>
 800dc96:	2964      	cmp	r1, #100	; 0x64
 800dc98:	d001      	beq.n	800dc9e <_printf_i+0x42>
 800dc9a:	2969      	cmp	r1, #105	; 0x69
 800dc9c:	d1f6      	bne.n	800dc8c <_printf_i+0x30>
 800dc9e:	6820      	ldr	r0, [r4, #0]
 800dca0:	6813      	ldr	r3, [r2, #0]
 800dca2:	0605      	lsls	r5, r0, #24
 800dca4:	f103 0104 	add.w	r1, r3, #4
 800dca8:	d52a      	bpl.n	800dd00 <_printf_i+0xa4>
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	6011      	str	r1, [r2, #0]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	da03      	bge.n	800dcba <_printf_i+0x5e>
 800dcb2:	222d      	movs	r2, #45	; 0x2d
 800dcb4:	425b      	negs	r3, r3
 800dcb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dcba:	486f      	ldr	r0, [pc, #444]	; (800de78 <_printf_i+0x21c>)
 800dcbc:	220a      	movs	r2, #10
 800dcbe:	e039      	b.n	800dd34 <_printf_i+0xd8>
 800dcc0:	2973      	cmp	r1, #115	; 0x73
 800dcc2:	f000 809d 	beq.w	800de00 <_printf_i+0x1a4>
 800dcc6:	d808      	bhi.n	800dcda <_printf_i+0x7e>
 800dcc8:	296f      	cmp	r1, #111	; 0x6f
 800dcca:	d020      	beq.n	800dd0e <_printf_i+0xb2>
 800dccc:	2970      	cmp	r1, #112	; 0x70
 800dcce:	d1dd      	bne.n	800dc8c <_printf_i+0x30>
 800dcd0:	6823      	ldr	r3, [r4, #0]
 800dcd2:	f043 0320 	orr.w	r3, r3, #32
 800dcd6:	6023      	str	r3, [r4, #0]
 800dcd8:	e003      	b.n	800dce2 <_printf_i+0x86>
 800dcda:	2975      	cmp	r1, #117	; 0x75
 800dcdc:	d017      	beq.n	800dd0e <_printf_i+0xb2>
 800dcde:	2978      	cmp	r1, #120	; 0x78
 800dce0:	d1d4      	bne.n	800dc8c <_printf_i+0x30>
 800dce2:	2378      	movs	r3, #120	; 0x78
 800dce4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dce8:	4864      	ldr	r0, [pc, #400]	; (800de7c <_printf_i+0x220>)
 800dcea:	e055      	b.n	800dd98 <_printf_i+0x13c>
 800dcec:	6813      	ldr	r3, [r2, #0]
 800dcee:	1d19      	adds	r1, r3, #4
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	6011      	str	r1, [r2, #0]
 800dcf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dcf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	e08c      	b.n	800de1a <_printf_i+0x1be>
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	6011      	str	r1, [r2, #0]
 800dd04:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dd08:	bf18      	it	ne
 800dd0a:	b21b      	sxthne	r3, r3
 800dd0c:	e7cf      	b.n	800dcae <_printf_i+0x52>
 800dd0e:	6813      	ldr	r3, [r2, #0]
 800dd10:	6825      	ldr	r5, [r4, #0]
 800dd12:	1d18      	adds	r0, r3, #4
 800dd14:	6010      	str	r0, [r2, #0]
 800dd16:	0628      	lsls	r0, r5, #24
 800dd18:	d501      	bpl.n	800dd1e <_printf_i+0xc2>
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	e002      	b.n	800dd24 <_printf_i+0xc8>
 800dd1e:	0668      	lsls	r0, r5, #25
 800dd20:	d5fb      	bpl.n	800dd1a <_printf_i+0xbe>
 800dd22:	881b      	ldrh	r3, [r3, #0]
 800dd24:	4854      	ldr	r0, [pc, #336]	; (800de78 <_printf_i+0x21c>)
 800dd26:	296f      	cmp	r1, #111	; 0x6f
 800dd28:	bf14      	ite	ne
 800dd2a:	220a      	movne	r2, #10
 800dd2c:	2208      	moveq	r2, #8
 800dd2e:	2100      	movs	r1, #0
 800dd30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dd34:	6865      	ldr	r5, [r4, #4]
 800dd36:	60a5      	str	r5, [r4, #8]
 800dd38:	2d00      	cmp	r5, #0
 800dd3a:	f2c0 8095 	blt.w	800de68 <_printf_i+0x20c>
 800dd3e:	6821      	ldr	r1, [r4, #0]
 800dd40:	f021 0104 	bic.w	r1, r1, #4
 800dd44:	6021      	str	r1, [r4, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d13d      	bne.n	800ddc6 <_printf_i+0x16a>
 800dd4a:	2d00      	cmp	r5, #0
 800dd4c:	f040 808e 	bne.w	800de6c <_printf_i+0x210>
 800dd50:	4665      	mov	r5, ip
 800dd52:	2a08      	cmp	r2, #8
 800dd54:	d10b      	bne.n	800dd6e <_printf_i+0x112>
 800dd56:	6823      	ldr	r3, [r4, #0]
 800dd58:	07db      	lsls	r3, r3, #31
 800dd5a:	d508      	bpl.n	800dd6e <_printf_i+0x112>
 800dd5c:	6923      	ldr	r3, [r4, #16]
 800dd5e:	6862      	ldr	r2, [r4, #4]
 800dd60:	429a      	cmp	r2, r3
 800dd62:	bfde      	ittt	le
 800dd64:	2330      	movle	r3, #48	; 0x30
 800dd66:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dd6a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800dd6e:	ebac 0305 	sub.w	r3, ip, r5
 800dd72:	6123      	str	r3, [r4, #16]
 800dd74:	f8cd 8000 	str.w	r8, [sp]
 800dd78:	463b      	mov	r3, r7
 800dd7a:	aa03      	add	r2, sp, #12
 800dd7c:	4621      	mov	r1, r4
 800dd7e:	4630      	mov	r0, r6
 800dd80:	f7ff fef6 	bl	800db70 <_printf_common>
 800dd84:	3001      	adds	r0, #1
 800dd86:	d14d      	bne.n	800de24 <_printf_i+0x1c8>
 800dd88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd8c:	b005      	add	sp, #20
 800dd8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd92:	4839      	ldr	r0, [pc, #228]	; (800de78 <_printf_i+0x21c>)
 800dd94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800dd98:	6813      	ldr	r3, [r2, #0]
 800dd9a:	6821      	ldr	r1, [r4, #0]
 800dd9c:	1d1d      	adds	r5, r3, #4
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	6015      	str	r5, [r2, #0]
 800dda2:	060a      	lsls	r2, r1, #24
 800dda4:	d50b      	bpl.n	800ddbe <_printf_i+0x162>
 800dda6:	07ca      	lsls	r2, r1, #31
 800dda8:	bf44      	itt	mi
 800ddaa:	f041 0120 	orrmi.w	r1, r1, #32
 800ddae:	6021      	strmi	r1, [r4, #0]
 800ddb0:	b91b      	cbnz	r3, 800ddba <_printf_i+0x15e>
 800ddb2:	6822      	ldr	r2, [r4, #0]
 800ddb4:	f022 0220 	bic.w	r2, r2, #32
 800ddb8:	6022      	str	r2, [r4, #0]
 800ddba:	2210      	movs	r2, #16
 800ddbc:	e7b7      	b.n	800dd2e <_printf_i+0xd2>
 800ddbe:	064d      	lsls	r5, r1, #25
 800ddc0:	bf48      	it	mi
 800ddc2:	b29b      	uxthmi	r3, r3
 800ddc4:	e7ef      	b.n	800dda6 <_printf_i+0x14a>
 800ddc6:	4665      	mov	r5, ip
 800ddc8:	fbb3 f1f2 	udiv	r1, r3, r2
 800ddcc:	fb02 3311 	mls	r3, r2, r1, r3
 800ddd0:	5cc3      	ldrb	r3, [r0, r3]
 800ddd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ddd6:	460b      	mov	r3, r1
 800ddd8:	2900      	cmp	r1, #0
 800ddda:	d1f5      	bne.n	800ddc8 <_printf_i+0x16c>
 800dddc:	e7b9      	b.n	800dd52 <_printf_i+0xf6>
 800ddde:	6813      	ldr	r3, [r2, #0]
 800dde0:	6825      	ldr	r5, [r4, #0]
 800dde2:	6961      	ldr	r1, [r4, #20]
 800dde4:	1d18      	adds	r0, r3, #4
 800dde6:	6010      	str	r0, [r2, #0]
 800dde8:	0628      	lsls	r0, r5, #24
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	d501      	bpl.n	800ddf2 <_printf_i+0x196>
 800ddee:	6019      	str	r1, [r3, #0]
 800ddf0:	e002      	b.n	800ddf8 <_printf_i+0x19c>
 800ddf2:	066a      	lsls	r2, r5, #25
 800ddf4:	d5fb      	bpl.n	800ddee <_printf_i+0x192>
 800ddf6:	8019      	strh	r1, [r3, #0]
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	6123      	str	r3, [r4, #16]
 800ddfc:	4665      	mov	r5, ip
 800ddfe:	e7b9      	b.n	800dd74 <_printf_i+0x118>
 800de00:	6813      	ldr	r3, [r2, #0]
 800de02:	1d19      	adds	r1, r3, #4
 800de04:	6011      	str	r1, [r2, #0]
 800de06:	681d      	ldr	r5, [r3, #0]
 800de08:	6862      	ldr	r2, [r4, #4]
 800de0a:	2100      	movs	r1, #0
 800de0c:	4628      	mov	r0, r5
 800de0e:	f7f2 fa6f 	bl	80002f0 <memchr>
 800de12:	b108      	cbz	r0, 800de18 <_printf_i+0x1bc>
 800de14:	1b40      	subs	r0, r0, r5
 800de16:	6060      	str	r0, [r4, #4]
 800de18:	6863      	ldr	r3, [r4, #4]
 800de1a:	6123      	str	r3, [r4, #16]
 800de1c:	2300      	movs	r3, #0
 800de1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de22:	e7a7      	b.n	800dd74 <_printf_i+0x118>
 800de24:	6923      	ldr	r3, [r4, #16]
 800de26:	462a      	mov	r2, r5
 800de28:	4639      	mov	r1, r7
 800de2a:	4630      	mov	r0, r6
 800de2c:	47c0      	blx	r8
 800de2e:	3001      	adds	r0, #1
 800de30:	d0aa      	beq.n	800dd88 <_printf_i+0x12c>
 800de32:	6823      	ldr	r3, [r4, #0]
 800de34:	079b      	lsls	r3, r3, #30
 800de36:	d413      	bmi.n	800de60 <_printf_i+0x204>
 800de38:	68e0      	ldr	r0, [r4, #12]
 800de3a:	9b03      	ldr	r3, [sp, #12]
 800de3c:	4298      	cmp	r0, r3
 800de3e:	bfb8      	it	lt
 800de40:	4618      	movlt	r0, r3
 800de42:	e7a3      	b.n	800dd8c <_printf_i+0x130>
 800de44:	2301      	movs	r3, #1
 800de46:	464a      	mov	r2, r9
 800de48:	4639      	mov	r1, r7
 800de4a:	4630      	mov	r0, r6
 800de4c:	47c0      	blx	r8
 800de4e:	3001      	adds	r0, #1
 800de50:	d09a      	beq.n	800dd88 <_printf_i+0x12c>
 800de52:	3501      	adds	r5, #1
 800de54:	68e3      	ldr	r3, [r4, #12]
 800de56:	9a03      	ldr	r2, [sp, #12]
 800de58:	1a9b      	subs	r3, r3, r2
 800de5a:	42ab      	cmp	r3, r5
 800de5c:	dcf2      	bgt.n	800de44 <_printf_i+0x1e8>
 800de5e:	e7eb      	b.n	800de38 <_printf_i+0x1dc>
 800de60:	2500      	movs	r5, #0
 800de62:	f104 0919 	add.w	r9, r4, #25
 800de66:	e7f5      	b.n	800de54 <_printf_i+0x1f8>
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d1ac      	bne.n	800ddc6 <_printf_i+0x16a>
 800de6c:	7803      	ldrb	r3, [r0, #0]
 800de6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de76:	e76c      	b.n	800dd52 <_printf_i+0xf6>
 800de78:	08012bde 	.word	0x08012bde
 800de7c:	08012bef 	.word	0x08012bef

0800de80 <iprintf>:
 800de80:	b40f      	push	{r0, r1, r2, r3}
 800de82:	4b0a      	ldr	r3, [pc, #40]	; (800deac <iprintf+0x2c>)
 800de84:	b513      	push	{r0, r1, r4, lr}
 800de86:	681c      	ldr	r4, [r3, #0]
 800de88:	b124      	cbz	r4, 800de94 <iprintf+0x14>
 800de8a:	69a3      	ldr	r3, [r4, #24]
 800de8c:	b913      	cbnz	r3, 800de94 <iprintf+0x14>
 800de8e:	4620      	mov	r0, r4
 800de90:	f7ff fa48 	bl	800d324 <__sinit>
 800de94:	ab05      	add	r3, sp, #20
 800de96:	9a04      	ldr	r2, [sp, #16]
 800de98:	68a1      	ldr	r1, [r4, #8]
 800de9a:	9301      	str	r3, [sp, #4]
 800de9c:	4620      	mov	r0, r4
 800de9e:	f001 fb49 	bl	800f534 <_vfiprintf_r>
 800dea2:	b002      	add	sp, #8
 800dea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dea8:	b004      	add	sp, #16
 800deaa:	4770      	bx	lr
 800deac:	240006ac 	.word	0x240006ac

0800deb0 <_puts_r>:
 800deb0:	b570      	push	{r4, r5, r6, lr}
 800deb2:	460e      	mov	r6, r1
 800deb4:	4605      	mov	r5, r0
 800deb6:	b118      	cbz	r0, 800dec0 <_puts_r+0x10>
 800deb8:	6983      	ldr	r3, [r0, #24]
 800deba:	b90b      	cbnz	r3, 800dec0 <_puts_r+0x10>
 800debc:	f7ff fa32 	bl	800d324 <__sinit>
 800dec0:	69ab      	ldr	r3, [r5, #24]
 800dec2:	68ac      	ldr	r4, [r5, #8]
 800dec4:	b913      	cbnz	r3, 800decc <_puts_r+0x1c>
 800dec6:	4628      	mov	r0, r5
 800dec8:	f7ff fa2c 	bl	800d324 <__sinit>
 800decc:	4b23      	ldr	r3, [pc, #140]	; (800df5c <_puts_r+0xac>)
 800dece:	429c      	cmp	r4, r3
 800ded0:	d117      	bne.n	800df02 <_puts_r+0x52>
 800ded2:	686c      	ldr	r4, [r5, #4]
 800ded4:	89a3      	ldrh	r3, [r4, #12]
 800ded6:	071b      	lsls	r3, r3, #28
 800ded8:	d51d      	bpl.n	800df16 <_puts_r+0x66>
 800deda:	6923      	ldr	r3, [r4, #16]
 800dedc:	b1db      	cbz	r3, 800df16 <_puts_r+0x66>
 800dede:	3e01      	subs	r6, #1
 800dee0:	68a3      	ldr	r3, [r4, #8]
 800dee2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dee6:	3b01      	subs	r3, #1
 800dee8:	60a3      	str	r3, [r4, #8]
 800deea:	b9e9      	cbnz	r1, 800df28 <_puts_r+0x78>
 800deec:	2b00      	cmp	r3, #0
 800deee:	da2e      	bge.n	800df4e <_puts_r+0x9e>
 800def0:	4622      	mov	r2, r4
 800def2:	210a      	movs	r1, #10
 800def4:	4628      	mov	r0, r5
 800def6:	f000 f8c9 	bl	800e08c <__swbuf_r>
 800defa:	3001      	adds	r0, #1
 800defc:	d011      	beq.n	800df22 <_puts_r+0x72>
 800defe:	200a      	movs	r0, #10
 800df00:	e011      	b.n	800df26 <_puts_r+0x76>
 800df02:	4b17      	ldr	r3, [pc, #92]	; (800df60 <_puts_r+0xb0>)
 800df04:	429c      	cmp	r4, r3
 800df06:	d101      	bne.n	800df0c <_puts_r+0x5c>
 800df08:	68ac      	ldr	r4, [r5, #8]
 800df0a:	e7e3      	b.n	800ded4 <_puts_r+0x24>
 800df0c:	4b15      	ldr	r3, [pc, #84]	; (800df64 <_puts_r+0xb4>)
 800df0e:	429c      	cmp	r4, r3
 800df10:	bf08      	it	eq
 800df12:	68ec      	ldreq	r4, [r5, #12]
 800df14:	e7de      	b.n	800ded4 <_puts_r+0x24>
 800df16:	4621      	mov	r1, r4
 800df18:	4628      	mov	r0, r5
 800df1a:	f000 f91b 	bl	800e154 <__swsetup_r>
 800df1e:	2800      	cmp	r0, #0
 800df20:	d0dd      	beq.n	800dede <_puts_r+0x2e>
 800df22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df26:	bd70      	pop	{r4, r5, r6, pc}
 800df28:	2b00      	cmp	r3, #0
 800df2a:	da04      	bge.n	800df36 <_puts_r+0x86>
 800df2c:	69a2      	ldr	r2, [r4, #24]
 800df2e:	429a      	cmp	r2, r3
 800df30:	dc06      	bgt.n	800df40 <_puts_r+0x90>
 800df32:	290a      	cmp	r1, #10
 800df34:	d004      	beq.n	800df40 <_puts_r+0x90>
 800df36:	6823      	ldr	r3, [r4, #0]
 800df38:	1c5a      	adds	r2, r3, #1
 800df3a:	6022      	str	r2, [r4, #0]
 800df3c:	7019      	strb	r1, [r3, #0]
 800df3e:	e7cf      	b.n	800dee0 <_puts_r+0x30>
 800df40:	4622      	mov	r2, r4
 800df42:	4628      	mov	r0, r5
 800df44:	f000 f8a2 	bl	800e08c <__swbuf_r>
 800df48:	3001      	adds	r0, #1
 800df4a:	d1c9      	bne.n	800dee0 <_puts_r+0x30>
 800df4c:	e7e9      	b.n	800df22 <_puts_r+0x72>
 800df4e:	6823      	ldr	r3, [r4, #0]
 800df50:	200a      	movs	r0, #10
 800df52:	1c5a      	adds	r2, r3, #1
 800df54:	6022      	str	r2, [r4, #0]
 800df56:	7018      	strb	r0, [r3, #0]
 800df58:	e7e5      	b.n	800df26 <_puts_r+0x76>
 800df5a:	bf00      	nop
 800df5c:	08012b88 	.word	0x08012b88
 800df60:	08012ba8 	.word	0x08012ba8
 800df64:	08012b68 	.word	0x08012b68

0800df68 <puts>:
 800df68:	4b02      	ldr	r3, [pc, #8]	; (800df74 <puts+0xc>)
 800df6a:	4601      	mov	r1, r0
 800df6c:	6818      	ldr	r0, [r3, #0]
 800df6e:	f7ff bf9f 	b.w	800deb0 <_puts_r>
 800df72:	bf00      	nop
 800df74:	240006ac 	.word	0x240006ac

0800df78 <srand>:
 800df78:	b538      	push	{r3, r4, r5, lr}
 800df7a:	4b0d      	ldr	r3, [pc, #52]	; (800dfb0 <srand+0x38>)
 800df7c:	681c      	ldr	r4, [r3, #0]
 800df7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df80:	4605      	mov	r5, r0
 800df82:	b97b      	cbnz	r3, 800dfa4 <srand+0x2c>
 800df84:	2018      	movs	r0, #24
 800df86:	f7ff fa7b 	bl	800d480 <malloc>
 800df8a:	4a0a      	ldr	r2, [pc, #40]	; (800dfb4 <srand+0x3c>)
 800df8c:	4b0a      	ldr	r3, [pc, #40]	; (800dfb8 <srand+0x40>)
 800df8e:	63a0      	str	r0, [r4, #56]	; 0x38
 800df90:	e9c0 2300 	strd	r2, r3, [r0]
 800df94:	4b09      	ldr	r3, [pc, #36]	; (800dfbc <srand+0x44>)
 800df96:	6083      	str	r3, [r0, #8]
 800df98:	230b      	movs	r3, #11
 800df9a:	8183      	strh	r3, [r0, #12]
 800df9c:	2201      	movs	r2, #1
 800df9e:	2300      	movs	r3, #0
 800dfa0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800dfa4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	611d      	str	r5, [r3, #16]
 800dfaa:	615a      	str	r2, [r3, #20]
 800dfac:	bd38      	pop	{r3, r4, r5, pc}
 800dfae:	bf00      	nop
 800dfb0:	240006ac 	.word	0x240006ac
 800dfb4:	abcd330e 	.word	0xabcd330e
 800dfb8:	e66d1234 	.word	0xe66d1234
 800dfbc:	0005deec 	.word	0x0005deec

0800dfc0 <_sbrk_r>:
 800dfc0:	b538      	push	{r3, r4, r5, lr}
 800dfc2:	4c06      	ldr	r4, [pc, #24]	; (800dfdc <_sbrk_r+0x1c>)
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	4605      	mov	r5, r0
 800dfc8:	4608      	mov	r0, r1
 800dfca:	6023      	str	r3, [r4, #0]
 800dfcc:	f7fb fd86 	bl	8009adc <_sbrk>
 800dfd0:	1c43      	adds	r3, r0, #1
 800dfd2:	d102      	bne.n	800dfda <_sbrk_r+0x1a>
 800dfd4:	6823      	ldr	r3, [r4, #0]
 800dfd6:	b103      	cbz	r3, 800dfda <_sbrk_r+0x1a>
 800dfd8:	602b      	str	r3, [r5, #0]
 800dfda:	bd38      	pop	{r3, r4, r5, pc}
 800dfdc:	24001ebc 	.word	0x24001ebc

0800dfe0 <__sread>:
 800dfe0:	b510      	push	{r4, lr}
 800dfe2:	460c      	mov	r4, r1
 800dfe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfe8:	f001 fbba 	bl	800f760 <_read_r>
 800dfec:	2800      	cmp	r0, #0
 800dfee:	bfab      	itete	ge
 800dff0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dff2:	89a3      	ldrhlt	r3, [r4, #12]
 800dff4:	181b      	addge	r3, r3, r0
 800dff6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dffa:	bfac      	ite	ge
 800dffc:	6563      	strge	r3, [r4, #84]	; 0x54
 800dffe:	81a3      	strhlt	r3, [r4, #12]
 800e000:	bd10      	pop	{r4, pc}

0800e002 <__swrite>:
 800e002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e006:	461f      	mov	r7, r3
 800e008:	898b      	ldrh	r3, [r1, #12]
 800e00a:	05db      	lsls	r3, r3, #23
 800e00c:	4605      	mov	r5, r0
 800e00e:	460c      	mov	r4, r1
 800e010:	4616      	mov	r6, r2
 800e012:	d505      	bpl.n	800e020 <__swrite+0x1e>
 800e014:	2302      	movs	r3, #2
 800e016:	2200      	movs	r2, #0
 800e018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e01c:	f000 fefe 	bl	800ee1c <_lseek_r>
 800e020:	89a3      	ldrh	r3, [r4, #12]
 800e022:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e026:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e02a:	81a3      	strh	r3, [r4, #12]
 800e02c:	4632      	mov	r2, r6
 800e02e:	463b      	mov	r3, r7
 800e030:	4628      	mov	r0, r5
 800e032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e036:	f000 b87b 	b.w	800e130 <_write_r>

0800e03a <__sseek>:
 800e03a:	b510      	push	{r4, lr}
 800e03c:	460c      	mov	r4, r1
 800e03e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e042:	f000 feeb 	bl	800ee1c <_lseek_r>
 800e046:	1c43      	adds	r3, r0, #1
 800e048:	89a3      	ldrh	r3, [r4, #12]
 800e04a:	bf15      	itete	ne
 800e04c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e04e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e052:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e056:	81a3      	strheq	r3, [r4, #12]
 800e058:	bf18      	it	ne
 800e05a:	81a3      	strhne	r3, [r4, #12]
 800e05c:	bd10      	pop	{r4, pc}

0800e05e <__sclose>:
 800e05e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e062:	f000 b8e5 	b.w	800e230 <_close_r>

0800e066 <strncmp>:
 800e066:	b510      	push	{r4, lr}
 800e068:	b16a      	cbz	r2, 800e086 <strncmp+0x20>
 800e06a:	3901      	subs	r1, #1
 800e06c:	1884      	adds	r4, r0, r2
 800e06e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e072:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e076:	4293      	cmp	r3, r2
 800e078:	d103      	bne.n	800e082 <strncmp+0x1c>
 800e07a:	42a0      	cmp	r0, r4
 800e07c:	d001      	beq.n	800e082 <strncmp+0x1c>
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d1f5      	bne.n	800e06e <strncmp+0x8>
 800e082:	1a98      	subs	r0, r3, r2
 800e084:	bd10      	pop	{r4, pc}
 800e086:	4610      	mov	r0, r2
 800e088:	e7fc      	b.n	800e084 <strncmp+0x1e>
	...

0800e08c <__swbuf_r>:
 800e08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e08e:	460e      	mov	r6, r1
 800e090:	4614      	mov	r4, r2
 800e092:	4605      	mov	r5, r0
 800e094:	b118      	cbz	r0, 800e09e <__swbuf_r+0x12>
 800e096:	6983      	ldr	r3, [r0, #24]
 800e098:	b90b      	cbnz	r3, 800e09e <__swbuf_r+0x12>
 800e09a:	f7ff f943 	bl	800d324 <__sinit>
 800e09e:	4b21      	ldr	r3, [pc, #132]	; (800e124 <__swbuf_r+0x98>)
 800e0a0:	429c      	cmp	r4, r3
 800e0a2:	d12a      	bne.n	800e0fa <__swbuf_r+0x6e>
 800e0a4:	686c      	ldr	r4, [r5, #4]
 800e0a6:	69a3      	ldr	r3, [r4, #24]
 800e0a8:	60a3      	str	r3, [r4, #8]
 800e0aa:	89a3      	ldrh	r3, [r4, #12]
 800e0ac:	071a      	lsls	r2, r3, #28
 800e0ae:	d52e      	bpl.n	800e10e <__swbuf_r+0x82>
 800e0b0:	6923      	ldr	r3, [r4, #16]
 800e0b2:	b363      	cbz	r3, 800e10e <__swbuf_r+0x82>
 800e0b4:	6923      	ldr	r3, [r4, #16]
 800e0b6:	6820      	ldr	r0, [r4, #0]
 800e0b8:	1ac0      	subs	r0, r0, r3
 800e0ba:	6963      	ldr	r3, [r4, #20]
 800e0bc:	b2f6      	uxtb	r6, r6
 800e0be:	4283      	cmp	r3, r0
 800e0c0:	4637      	mov	r7, r6
 800e0c2:	dc04      	bgt.n	800e0ce <__swbuf_r+0x42>
 800e0c4:	4621      	mov	r1, r4
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	f7ff f8c2 	bl	800d250 <_fflush_r>
 800e0cc:	bb28      	cbnz	r0, 800e11a <__swbuf_r+0x8e>
 800e0ce:	68a3      	ldr	r3, [r4, #8]
 800e0d0:	3b01      	subs	r3, #1
 800e0d2:	60a3      	str	r3, [r4, #8]
 800e0d4:	6823      	ldr	r3, [r4, #0]
 800e0d6:	1c5a      	adds	r2, r3, #1
 800e0d8:	6022      	str	r2, [r4, #0]
 800e0da:	701e      	strb	r6, [r3, #0]
 800e0dc:	6963      	ldr	r3, [r4, #20]
 800e0de:	3001      	adds	r0, #1
 800e0e0:	4283      	cmp	r3, r0
 800e0e2:	d004      	beq.n	800e0ee <__swbuf_r+0x62>
 800e0e4:	89a3      	ldrh	r3, [r4, #12]
 800e0e6:	07db      	lsls	r3, r3, #31
 800e0e8:	d519      	bpl.n	800e11e <__swbuf_r+0x92>
 800e0ea:	2e0a      	cmp	r6, #10
 800e0ec:	d117      	bne.n	800e11e <__swbuf_r+0x92>
 800e0ee:	4621      	mov	r1, r4
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	f7ff f8ad 	bl	800d250 <_fflush_r>
 800e0f6:	b190      	cbz	r0, 800e11e <__swbuf_r+0x92>
 800e0f8:	e00f      	b.n	800e11a <__swbuf_r+0x8e>
 800e0fa:	4b0b      	ldr	r3, [pc, #44]	; (800e128 <__swbuf_r+0x9c>)
 800e0fc:	429c      	cmp	r4, r3
 800e0fe:	d101      	bne.n	800e104 <__swbuf_r+0x78>
 800e100:	68ac      	ldr	r4, [r5, #8]
 800e102:	e7d0      	b.n	800e0a6 <__swbuf_r+0x1a>
 800e104:	4b09      	ldr	r3, [pc, #36]	; (800e12c <__swbuf_r+0xa0>)
 800e106:	429c      	cmp	r4, r3
 800e108:	bf08      	it	eq
 800e10a:	68ec      	ldreq	r4, [r5, #12]
 800e10c:	e7cb      	b.n	800e0a6 <__swbuf_r+0x1a>
 800e10e:	4621      	mov	r1, r4
 800e110:	4628      	mov	r0, r5
 800e112:	f000 f81f 	bl	800e154 <__swsetup_r>
 800e116:	2800      	cmp	r0, #0
 800e118:	d0cc      	beq.n	800e0b4 <__swbuf_r+0x28>
 800e11a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e11e:	4638      	mov	r0, r7
 800e120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e122:	bf00      	nop
 800e124:	08012b88 	.word	0x08012b88
 800e128:	08012ba8 	.word	0x08012ba8
 800e12c:	08012b68 	.word	0x08012b68

0800e130 <_write_r>:
 800e130:	b538      	push	{r3, r4, r5, lr}
 800e132:	4c07      	ldr	r4, [pc, #28]	; (800e150 <_write_r+0x20>)
 800e134:	4605      	mov	r5, r0
 800e136:	4608      	mov	r0, r1
 800e138:	4611      	mov	r1, r2
 800e13a:	2200      	movs	r2, #0
 800e13c:	6022      	str	r2, [r4, #0]
 800e13e:	461a      	mov	r2, r3
 800e140:	f7f9 fa2c 	bl	800759c <_write>
 800e144:	1c43      	adds	r3, r0, #1
 800e146:	d102      	bne.n	800e14e <_write_r+0x1e>
 800e148:	6823      	ldr	r3, [r4, #0]
 800e14a:	b103      	cbz	r3, 800e14e <_write_r+0x1e>
 800e14c:	602b      	str	r3, [r5, #0]
 800e14e:	bd38      	pop	{r3, r4, r5, pc}
 800e150:	24001ebc 	.word	0x24001ebc

0800e154 <__swsetup_r>:
 800e154:	4b32      	ldr	r3, [pc, #200]	; (800e220 <__swsetup_r+0xcc>)
 800e156:	b570      	push	{r4, r5, r6, lr}
 800e158:	681d      	ldr	r5, [r3, #0]
 800e15a:	4606      	mov	r6, r0
 800e15c:	460c      	mov	r4, r1
 800e15e:	b125      	cbz	r5, 800e16a <__swsetup_r+0x16>
 800e160:	69ab      	ldr	r3, [r5, #24]
 800e162:	b913      	cbnz	r3, 800e16a <__swsetup_r+0x16>
 800e164:	4628      	mov	r0, r5
 800e166:	f7ff f8dd 	bl	800d324 <__sinit>
 800e16a:	4b2e      	ldr	r3, [pc, #184]	; (800e224 <__swsetup_r+0xd0>)
 800e16c:	429c      	cmp	r4, r3
 800e16e:	d10f      	bne.n	800e190 <__swsetup_r+0x3c>
 800e170:	686c      	ldr	r4, [r5, #4]
 800e172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e176:	b29a      	uxth	r2, r3
 800e178:	0715      	lsls	r5, r2, #28
 800e17a:	d42c      	bmi.n	800e1d6 <__swsetup_r+0x82>
 800e17c:	06d0      	lsls	r0, r2, #27
 800e17e:	d411      	bmi.n	800e1a4 <__swsetup_r+0x50>
 800e180:	2209      	movs	r2, #9
 800e182:	6032      	str	r2, [r6, #0]
 800e184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e188:	81a3      	strh	r3, [r4, #12]
 800e18a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e18e:	e03e      	b.n	800e20e <__swsetup_r+0xba>
 800e190:	4b25      	ldr	r3, [pc, #148]	; (800e228 <__swsetup_r+0xd4>)
 800e192:	429c      	cmp	r4, r3
 800e194:	d101      	bne.n	800e19a <__swsetup_r+0x46>
 800e196:	68ac      	ldr	r4, [r5, #8]
 800e198:	e7eb      	b.n	800e172 <__swsetup_r+0x1e>
 800e19a:	4b24      	ldr	r3, [pc, #144]	; (800e22c <__swsetup_r+0xd8>)
 800e19c:	429c      	cmp	r4, r3
 800e19e:	bf08      	it	eq
 800e1a0:	68ec      	ldreq	r4, [r5, #12]
 800e1a2:	e7e6      	b.n	800e172 <__swsetup_r+0x1e>
 800e1a4:	0751      	lsls	r1, r2, #29
 800e1a6:	d512      	bpl.n	800e1ce <__swsetup_r+0x7a>
 800e1a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1aa:	b141      	cbz	r1, 800e1be <__swsetup_r+0x6a>
 800e1ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1b0:	4299      	cmp	r1, r3
 800e1b2:	d002      	beq.n	800e1ba <__swsetup_r+0x66>
 800e1b4:	4630      	mov	r0, r6
 800e1b6:	f7ff f97f 	bl	800d4b8 <_free_r>
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	6363      	str	r3, [r4, #52]	; 0x34
 800e1be:	89a3      	ldrh	r3, [r4, #12]
 800e1c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e1c4:	81a3      	strh	r3, [r4, #12]
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	6063      	str	r3, [r4, #4]
 800e1ca:	6923      	ldr	r3, [r4, #16]
 800e1cc:	6023      	str	r3, [r4, #0]
 800e1ce:	89a3      	ldrh	r3, [r4, #12]
 800e1d0:	f043 0308 	orr.w	r3, r3, #8
 800e1d4:	81a3      	strh	r3, [r4, #12]
 800e1d6:	6923      	ldr	r3, [r4, #16]
 800e1d8:	b94b      	cbnz	r3, 800e1ee <__swsetup_r+0x9a>
 800e1da:	89a3      	ldrh	r3, [r4, #12]
 800e1dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e1e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1e4:	d003      	beq.n	800e1ee <__swsetup_r+0x9a>
 800e1e6:	4621      	mov	r1, r4
 800e1e8:	4630      	mov	r0, r6
 800e1ea:	f000 fe4d 	bl	800ee88 <__smakebuf_r>
 800e1ee:	89a2      	ldrh	r2, [r4, #12]
 800e1f0:	f012 0301 	ands.w	r3, r2, #1
 800e1f4:	d00c      	beq.n	800e210 <__swsetup_r+0xbc>
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	60a3      	str	r3, [r4, #8]
 800e1fa:	6963      	ldr	r3, [r4, #20]
 800e1fc:	425b      	negs	r3, r3
 800e1fe:	61a3      	str	r3, [r4, #24]
 800e200:	6923      	ldr	r3, [r4, #16]
 800e202:	b953      	cbnz	r3, 800e21a <__swsetup_r+0xc6>
 800e204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e208:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e20c:	d1ba      	bne.n	800e184 <__swsetup_r+0x30>
 800e20e:	bd70      	pop	{r4, r5, r6, pc}
 800e210:	0792      	lsls	r2, r2, #30
 800e212:	bf58      	it	pl
 800e214:	6963      	ldrpl	r3, [r4, #20]
 800e216:	60a3      	str	r3, [r4, #8]
 800e218:	e7f2      	b.n	800e200 <__swsetup_r+0xac>
 800e21a:	2000      	movs	r0, #0
 800e21c:	e7f7      	b.n	800e20e <__swsetup_r+0xba>
 800e21e:	bf00      	nop
 800e220:	240006ac 	.word	0x240006ac
 800e224:	08012b88 	.word	0x08012b88
 800e228:	08012ba8 	.word	0x08012ba8
 800e22c:	08012b68 	.word	0x08012b68

0800e230 <_close_r>:
 800e230:	b538      	push	{r3, r4, r5, lr}
 800e232:	4c06      	ldr	r4, [pc, #24]	; (800e24c <_close_r+0x1c>)
 800e234:	2300      	movs	r3, #0
 800e236:	4605      	mov	r5, r0
 800e238:	4608      	mov	r0, r1
 800e23a:	6023      	str	r3, [r4, #0]
 800e23c:	f7fb fc19 	bl	8009a72 <_close>
 800e240:	1c43      	adds	r3, r0, #1
 800e242:	d102      	bne.n	800e24a <_close_r+0x1a>
 800e244:	6823      	ldr	r3, [r4, #0]
 800e246:	b103      	cbz	r3, 800e24a <_close_r+0x1a>
 800e248:	602b      	str	r3, [r5, #0]
 800e24a:	bd38      	pop	{r3, r4, r5, pc}
 800e24c:	24001ebc 	.word	0x24001ebc

0800e250 <quorem>:
 800e250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e254:	6903      	ldr	r3, [r0, #16]
 800e256:	690c      	ldr	r4, [r1, #16]
 800e258:	42a3      	cmp	r3, r4
 800e25a:	4680      	mov	r8, r0
 800e25c:	f2c0 8082 	blt.w	800e364 <quorem+0x114>
 800e260:	3c01      	subs	r4, #1
 800e262:	f101 0714 	add.w	r7, r1, #20
 800e266:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e26a:	f100 0614 	add.w	r6, r0, #20
 800e26e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e272:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e276:	eb06 030c 	add.w	r3, r6, ip
 800e27a:	3501      	adds	r5, #1
 800e27c:	eb07 090c 	add.w	r9, r7, ip
 800e280:	9301      	str	r3, [sp, #4]
 800e282:	fbb0 f5f5 	udiv	r5, r0, r5
 800e286:	b395      	cbz	r5, 800e2ee <quorem+0x9e>
 800e288:	f04f 0a00 	mov.w	sl, #0
 800e28c:	4638      	mov	r0, r7
 800e28e:	46b6      	mov	lr, r6
 800e290:	46d3      	mov	fp, sl
 800e292:	f850 2b04 	ldr.w	r2, [r0], #4
 800e296:	b293      	uxth	r3, r2
 800e298:	fb05 a303 	mla	r3, r5, r3, sl
 800e29c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	ebab 0303 	sub.w	r3, fp, r3
 800e2a6:	0c12      	lsrs	r2, r2, #16
 800e2a8:	f8de b000 	ldr.w	fp, [lr]
 800e2ac:	fb05 a202 	mla	r2, r5, r2, sl
 800e2b0:	fa13 f38b 	uxtah	r3, r3, fp
 800e2b4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e2b8:	fa1f fb82 	uxth.w	fp, r2
 800e2bc:	f8de 2000 	ldr.w	r2, [lr]
 800e2c0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e2c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2ce:	4581      	cmp	r9, r0
 800e2d0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e2d4:	f84e 3b04 	str.w	r3, [lr], #4
 800e2d8:	d2db      	bcs.n	800e292 <quorem+0x42>
 800e2da:	f856 300c 	ldr.w	r3, [r6, ip]
 800e2de:	b933      	cbnz	r3, 800e2ee <quorem+0x9e>
 800e2e0:	9b01      	ldr	r3, [sp, #4]
 800e2e2:	3b04      	subs	r3, #4
 800e2e4:	429e      	cmp	r6, r3
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	d330      	bcc.n	800e34c <quorem+0xfc>
 800e2ea:	f8c8 4010 	str.w	r4, [r8, #16]
 800e2ee:	4640      	mov	r0, r8
 800e2f0:	f001 f822 	bl	800f338 <__mcmp>
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	db25      	blt.n	800e344 <quorem+0xf4>
 800e2f8:	3501      	adds	r5, #1
 800e2fa:	4630      	mov	r0, r6
 800e2fc:	f04f 0c00 	mov.w	ip, #0
 800e300:	f857 2b04 	ldr.w	r2, [r7], #4
 800e304:	f8d0 e000 	ldr.w	lr, [r0]
 800e308:	b293      	uxth	r3, r2
 800e30a:	ebac 0303 	sub.w	r3, ip, r3
 800e30e:	0c12      	lsrs	r2, r2, #16
 800e310:	fa13 f38e 	uxtah	r3, r3, lr
 800e314:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e318:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e322:	45b9      	cmp	r9, r7
 800e324:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e328:	f840 3b04 	str.w	r3, [r0], #4
 800e32c:	d2e8      	bcs.n	800e300 <quorem+0xb0>
 800e32e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e332:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e336:	b92a      	cbnz	r2, 800e344 <quorem+0xf4>
 800e338:	3b04      	subs	r3, #4
 800e33a:	429e      	cmp	r6, r3
 800e33c:	461a      	mov	r2, r3
 800e33e:	d30b      	bcc.n	800e358 <quorem+0x108>
 800e340:	f8c8 4010 	str.w	r4, [r8, #16]
 800e344:	4628      	mov	r0, r5
 800e346:	b003      	add	sp, #12
 800e348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e34c:	6812      	ldr	r2, [r2, #0]
 800e34e:	3b04      	subs	r3, #4
 800e350:	2a00      	cmp	r2, #0
 800e352:	d1ca      	bne.n	800e2ea <quorem+0x9a>
 800e354:	3c01      	subs	r4, #1
 800e356:	e7c5      	b.n	800e2e4 <quorem+0x94>
 800e358:	6812      	ldr	r2, [r2, #0]
 800e35a:	3b04      	subs	r3, #4
 800e35c:	2a00      	cmp	r2, #0
 800e35e:	d1ef      	bne.n	800e340 <quorem+0xf0>
 800e360:	3c01      	subs	r4, #1
 800e362:	e7ea      	b.n	800e33a <quorem+0xea>
 800e364:	2000      	movs	r0, #0
 800e366:	e7ee      	b.n	800e346 <quorem+0xf6>

0800e368 <_dtoa_r>:
 800e368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e36c:	ec57 6b10 	vmov	r6, r7, d0
 800e370:	b095      	sub	sp, #84	; 0x54
 800e372:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e374:	9108      	str	r1, [sp, #32]
 800e376:	4604      	mov	r4, r0
 800e378:	920a      	str	r2, [sp, #40]	; 0x28
 800e37a:	9311      	str	r3, [sp, #68]	; 0x44
 800e37c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800e380:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e384:	b93d      	cbnz	r5, 800e396 <_dtoa_r+0x2e>
 800e386:	2010      	movs	r0, #16
 800e388:	f7ff f87a 	bl	800d480 <malloc>
 800e38c:	6260      	str	r0, [r4, #36]	; 0x24
 800e38e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e392:	6005      	str	r5, [r0, #0]
 800e394:	60c5      	str	r5, [r0, #12]
 800e396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e398:	6819      	ldr	r1, [r3, #0]
 800e39a:	b151      	cbz	r1, 800e3b2 <_dtoa_r+0x4a>
 800e39c:	685a      	ldr	r2, [r3, #4]
 800e39e:	604a      	str	r2, [r1, #4]
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	4093      	lsls	r3, r2
 800e3a4:	608b      	str	r3, [r1, #8]
 800e3a6:	4620      	mov	r0, r4
 800e3a8:	f000 fde4 	bl	800ef74 <_Bfree>
 800e3ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	601a      	str	r2, [r3, #0]
 800e3b2:	1e3b      	subs	r3, r7, #0
 800e3b4:	bfb9      	ittee	lt
 800e3b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e3ba:	9303      	strlt	r3, [sp, #12]
 800e3bc:	2300      	movge	r3, #0
 800e3be:	f8c8 3000 	strge.w	r3, [r8]
 800e3c2:	9d03      	ldr	r5, [sp, #12]
 800e3c4:	4bac      	ldr	r3, [pc, #688]	; (800e678 <_dtoa_r+0x310>)
 800e3c6:	bfbc      	itt	lt
 800e3c8:	2201      	movlt	r2, #1
 800e3ca:	f8c8 2000 	strlt.w	r2, [r8]
 800e3ce:	43ab      	bics	r3, r5
 800e3d0:	d11b      	bne.n	800e40a <_dtoa_r+0xa2>
 800e3d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e3d4:	f242 730f 	movw	r3, #9999	; 0x270f
 800e3d8:	6013      	str	r3, [r2, #0]
 800e3da:	9b02      	ldr	r3, [sp, #8]
 800e3dc:	b923      	cbnz	r3, 800e3e8 <_dtoa_r+0x80>
 800e3de:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e3e2:	2d00      	cmp	r5, #0
 800e3e4:	f000 84dd 	beq.w	800eda2 <_dtoa_r+0xa3a>
 800e3e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e3ea:	b953      	cbnz	r3, 800e402 <_dtoa_r+0x9a>
 800e3ec:	4ba3      	ldr	r3, [pc, #652]	; (800e67c <_dtoa_r+0x314>)
 800e3ee:	e020      	b.n	800e432 <_dtoa_r+0xca>
 800e3f0:	4ba3      	ldr	r3, [pc, #652]	; (800e680 <_dtoa_r+0x318>)
 800e3f2:	9304      	str	r3, [sp, #16]
 800e3f4:	3308      	adds	r3, #8
 800e3f6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e3f8:	6013      	str	r3, [r2, #0]
 800e3fa:	9804      	ldr	r0, [sp, #16]
 800e3fc:	b015      	add	sp, #84	; 0x54
 800e3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e402:	4b9e      	ldr	r3, [pc, #632]	; (800e67c <_dtoa_r+0x314>)
 800e404:	9304      	str	r3, [sp, #16]
 800e406:	3303      	adds	r3, #3
 800e408:	e7f5      	b.n	800e3f6 <_dtoa_r+0x8e>
 800e40a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e40e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e416:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e41a:	d10c      	bne.n	800e436 <_dtoa_r+0xce>
 800e41c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e41e:	2301      	movs	r3, #1
 800e420:	6013      	str	r3, [r2, #0]
 800e422:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e424:	2b00      	cmp	r3, #0
 800e426:	f000 84b9 	beq.w	800ed9c <_dtoa_r+0xa34>
 800e42a:	4b96      	ldr	r3, [pc, #600]	; (800e684 <_dtoa_r+0x31c>)
 800e42c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e42e:	6013      	str	r3, [r2, #0]
 800e430:	3b01      	subs	r3, #1
 800e432:	9304      	str	r3, [sp, #16]
 800e434:	e7e1      	b.n	800e3fa <_dtoa_r+0x92>
 800e436:	a913      	add	r1, sp, #76	; 0x4c
 800e438:	aa12      	add	r2, sp, #72	; 0x48
 800e43a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800e43e:	4620      	mov	r0, r4
 800e440:	f000 fff1 	bl	800f426 <__d2b>
 800e444:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800e448:	9001      	str	r0, [sp, #4]
 800e44a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e44c:	2e00      	cmp	r6, #0
 800e44e:	d046      	beq.n	800e4de <_dtoa_r+0x176>
 800e450:	9805      	ldr	r0, [sp, #20]
 800e452:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800e456:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e45a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800e45e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e462:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800e466:	2700      	movs	r7, #0
 800e468:	ee07 aa90 	vmov	s15, sl
 800e46c:	ec43 2b16 	vmov	d6, r2, r3
 800e470:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e474:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800e660 <_dtoa_r+0x2f8>
 800e478:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800e47c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e480:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800e668 <_dtoa_r+0x300>
 800e484:	eea7 6b04 	vfma.f64	d6, d7, d4
 800e488:	eeb0 7b46 	vmov.f64	d7, d6
 800e48c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800e670 <_dtoa_r+0x308>
 800e490:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e494:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e498:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e49c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4a0:	ee16 ba90 	vmov	fp, s13
 800e4a4:	d508      	bpl.n	800e4b8 <_dtoa_r+0x150>
 800e4a6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e4aa:	eeb4 6b47 	vcmp.f64	d6, d7
 800e4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4b2:	bf18      	it	ne
 800e4b4:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800e4b8:	f1bb 0f16 	cmp.w	fp, #22
 800e4bc:	d834      	bhi.n	800e528 <_dtoa_r+0x1c0>
 800e4be:	4b72      	ldr	r3, [pc, #456]	; (800e688 <_dtoa_r+0x320>)
 800e4c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e4c4:	ed93 7b00 	vldr	d7, [r3]
 800e4c8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e4cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4d4:	dd01      	ble.n	800e4da <_dtoa_r+0x172>
 800e4d6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e4da:	2300      	movs	r3, #0
 800e4dc:	e025      	b.n	800e52a <_dtoa_r+0x1c2>
 800e4de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e4e0:	eb01 0a03 	add.w	sl, r1, r3
 800e4e4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800e4e8:	2b20      	cmp	r3, #32
 800e4ea:	dd17      	ble.n	800e51c <_dtoa_r+0x1b4>
 800e4ec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800e4f0:	9a02      	ldr	r2, [sp, #8]
 800e4f2:	409d      	lsls	r5, r3
 800e4f4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800e4f8:	fa22 f303 	lsr.w	r3, r2, r3
 800e4fc:	432b      	orrs	r3, r5
 800e4fe:	ee07 3a90 	vmov	s15, r3
 800e502:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e506:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e50a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e50e:	9805      	ldr	r0, [sp, #20]
 800e510:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e514:	2701      	movs	r7, #1
 800e516:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800e51a:	e7a5      	b.n	800e468 <_dtoa_r+0x100>
 800e51c:	9a02      	ldr	r2, [sp, #8]
 800e51e:	f1c3 0320 	rsb	r3, r3, #32
 800e522:	fa02 f303 	lsl.w	r3, r2, r3
 800e526:	e7ea      	b.n	800e4fe <_dtoa_r+0x196>
 800e528:	2301      	movs	r3, #1
 800e52a:	eba1 0a0a 	sub.w	sl, r1, sl
 800e52e:	9310      	str	r3, [sp, #64]	; 0x40
 800e530:	f1ba 0301 	subs.w	r3, sl, #1
 800e534:	9307      	str	r3, [sp, #28]
 800e536:	bf43      	ittte	mi
 800e538:	2300      	movmi	r3, #0
 800e53a:	f1ca 0a01 	rsbmi	sl, sl, #1
 800e53e:	9307      	strmi	r3, [sp, #28]
 800e540:	f04f 0a00 	movpl.w	sl, #0
 800e544:	f1bb 0f00 	cmp.w	fp, #0
 800e548:	db19      	blt.n	800e57e <_dtoa_r+0x216>
 800e54a:	9b07      	ldr	r3, [sp, #28]
 800e54c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e550:	445b      	add	r3, fp
 800e552:	9307      	str	r3, [sp, #28]
 800e554:	f04f 0800 	mov.w	r8, #0
 800e558:	9b08      	ldr	r3, [sp, #32]
 800e55a:	2b09      	cmp	r3, #9
 800e55c:	d866      	bhi.n	800e62c <_dtoa_r+0x2c4>
 800e55e:	2b05      	cmp	r3, #5
 800e560:	bfc4      	itt	gt
 800e562:	3b04      	subgt	r3, #4
 800e564:	9308      	strgt	r3, [sp, #32]
 800e566:	9b08      	ldr	r3, [sp, #32]
 800e568:	f1a3 0302 	sub.w	r3, r3, #2
 800e56c:	bfcc      	ite	gt
 800e56e:	2500      	movgt	r5, #0
 800e570:	2501      	movle	r5, #1
 800e572:	2b03      	cmp	r3, #3
 800e574:	d866      	bhi.n	800e644 <_dtoa_r+0x2dc>
 800e576:	e8df f003 	tbb	[pc, r3]
 800e57a:	5755      	.short	0x5755
 800e57c:	4909      	.short	0x4909
 800e57e:	2300      	movs	r3, #0
 800e580:	ebaa 0a0b 	sub.w	sl, sl, fp
 800e584:	f1cb 0800 	rsb	r8, fp, #0
 800e588:	930b      	str	r3, [sp, #44]	; 0x2c
 800e58a:	e7e5      	b.n	800e558 <_dtoa_r+0x1f0>
 800e58c:	2301      	movs	r3, #1
 800e58e:	9309      	str	r3, [sp, #36]	; 0x24
 800e590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e592:	2b00      	cmp	r3, #0
 800e594:	dd59      	ble.n	800e64a <_dtoa_r+0x2e2>
 800e596:	9306      	str	r3, [sp, #24]
 800e598:	4699      	mov	r9, r3
 800e59a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e59c:	2200      	movs	r2, #0
 800e59e:	6072      	str	r2, [r6, #4]
 800e5a0:	2204      	movs	r2, #4
 800e5a2:	f102 0014 	add.w	r0, r2, #20
 800e5a6:	4298      	cmp	r0, r3
 800e5a8:	6871      	ldr	r1, [r6, #4]
 800e5aa:	d953      	bls.n	800e654 <_dtoa_r+0x2ec>
 800e5ac:	4620      	mov	r0, r4
 800e5ae:	f000 fcad 	bl	800ef0c <_Balloc>
 800e5b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5b4:	6030      	str	r0, [r6, #0]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	9304      	str	r3, [sp, #16]
 800e5ba:	f1b9 0f0e 	cmp.w	r9, #14
 800e5be:	f200 80c2 	bhi.w	800e746 <_dtoa_r+0x3de>
 800e5c2:	2d00      	cmp	r5, #0
 800e5c4:	f000 80bf 	beq.w	800e746 <_dtoa_r+0x3de>
 800e5c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e5cc:	f1bb 0f00 	cmp.w	fp, #0
 800e5d0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800e5d4:	f340 80e6 	ble.w	800e7a4 <_dtoa_r+0x43c>
 800e5d8:	4a2b      	ldr	r2, [pc, #172]	; (800e688 <_dtoa_r+0x320>)
 800e5da:	f00b 030f 	and.w	r3, fp, #15
 800e5de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e5e2:	ed93 7b00 	vldr	d7, [r3]
 800e5e6:	ea4f 132b 	mov.w	r3, fp, asr #4
 800e5ea:	06da      	lsls	r2, r3, #27
 800e5ec:	f140 80d8 	bpl.w	800e7a0 <_dtoa_r+0x438>
 800e5f0:	4a26      	ldr	r2, [pc, #152]	; (800e68c <_dtoa_r+0x324>)
 800e5f2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800e5f6:	ed92 6b08 	vldr	d6, [r2, #32]
 800e5fa:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800e5fe:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e602:	f003 030f 	and.w	r3, r3, #15
 800e606:	2203      	movs	r2, #3
 800e608:	4920      	ldr	r1, [pc, #128]	; (800e68c <_dtoa_r+0x324>)
 800e60a:	e04a      	b.n	800e6a2 <_dtoa_r+0x33a>
 800e60c:	2301      	movs	r3, #1
 800e60e:	9309      	str	r3, [sp, #36]	; 0x24
 800e610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e612:	445b      	add	r3, fp
 800e614:	f103 0901 	add.w	r9, r3, #1
 800e618:	9306      	str	r3, [sp, #24]
 800e61a:	464b      	mov	r3, r9
 800e61c:	2b01      	cmp	r3, #1
 800e61e:	bfb8      	it	lt
 800e620:	2301      	movlt	r3, #1
 800e622:	e7ba      	b.n	800e59a <_dtoa_r+0x232>
 800e624:	2300      	movs	r3, #0
 800e626:	e7b2      	b.n	800e58e <_dtoa_r+0x226>
 800e628:	2300      	movs	r3, #0
 800e62a:	e7f0      	b.n	800e60e <_dtoa_r+0x2a6>
 800e62c:	2501      	movs	r5, #1
 800e62e:	2300      	movs	r3, #0
 800e630:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800e634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e638:	9306      	str	r3, [sp, #24]
 800e63a:	4699      	mov	r9, r3
 800e63c:	2200      	movs	r2, #0
 800e63e:	2312      	movs	r3, #18
 800e640:	920a      	str	r2, [sp, #40]	; 0x28
 800e642:	e7aa      	b.n	800e59a <_dtoa_r+0x232>
 800e644:	2301      	movs	r3, #1
 800e646:	9309      	str	r3, [sp, #36]	; 0x24
 800e648:	e7f4      	b.n	800e634 <_dtoa_r+0x2cc>
 800e64a:	2301      	movs	r3, #1
 800e64c:	9306      	str	r3, [sp, #24]
 800e64e:	4699      	mov	r9, r3
 800e650:	461a      	mov	r2, r3
 800e652:	e7f5      	b.n	800e640 <_dtoa_r+0x2d8>
 800e654:	3101      	adds	r1, #1
 800e656:	6071      	str	r1, [r6, #4]
 800e658:	0052      	lsls	r2, r2, #1
 800e65a:	e7a2      	b.n	800e5a2 <_dtoa_r+0x23a>
 800e65c:	f3af 8000 	nop.w
 800e660:	636f4361 	.word	0x636f4361
 800e664:	3fd287a7 	.word	0x3fd287a7
 800e668:	8b60c8b3 	.word	0x8b60c8b3
 800e66c:	3fc68a28 	.word	0x3fc68a28
 800e670:	509f79fb 	.word	0x509f79fb
 800e674:	3fd34413 	.word	0x3fd34413
 800e678:	7ff00000 	.word	0x7ff00000
 800e67c:	08012c09 	.word	0x08012c09
 800e680:	08012c00 	.word	0x08012c00
 800e684:	08012bdd 	.word	0x08012bdd
 800e688:	08012c38 	.word	0x08012c38
 800e68c:	08012c10 	.word	0x08012c10
 800e690:	07de      	lsls	r6, r3, #31
 800e692:	d504      	bpl.n	800e69e <_dtoa_r+0x336>
 800e694:	ed91 6b00 	vldr	d6, [r1]
 800e698:	3201      	adds	r2, #1
 800e69a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e69e:	105b      	asrs	r3, r3, #1
 800e6a0:	3108      	adds	r1, #8
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d1f4      	bne.n	800e690 <_dtoa_r+0x328>
 800e6a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e6aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e6ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e6b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f000 80a7 	beq.w	800e808 <_dtoa_r+0x4a0>
 800e6ba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e6be:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e6c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ca:	f140 809d 	bpl.w	800e808 <_dtoa_r+0x4a0>
 800e6ce:	f1b9 0f00 	cmp.w	r9, #0
 800e6d2:	f000 8099 	beq.w	800e808 <_dtoa_r+0x4a0>
 800e6d6:	9b06      	ldr	r3, [sp, #24]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	dd30      	ble.n	800e73e <_dtoa_r+0x3d6>
 800e6dc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e6e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e6e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e6e8:	9d06      	ldr	r5, [sp, #24]
 800e6ea:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800e6ee:	3201      	adds	r2, #1
 800e6f0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e6f4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e6f8:	ee07 2a90 	vmov	s15, r2
 800e6fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e700:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e704:	ed8d 5b02 	vstr	d5, [sp, #8]
 800e708:	9a03      	ldr	r2, [sp, #12]
 800e70a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e70e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800e712:	2d00      	cmp	r5, #0
 800e714:	d17b      	bne.n	800e80e <_dtoa_r+0x4a6>
 800e716:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e71a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e71e:	ec41 0b17 	vmov	d7, r0, r1
 800e722:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e72a:	f300 8253 	bgt.w	800ebd4 <_dtoa_r+0x86c>
 800e72e:	eeb1 7b47 	vneg.f64	d7, d7
 800e732:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e73a:	f100 8249 	bmi.w	800ebd0 <_dtoa_r+0x868>
 800e73e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e742:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e746:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e748:	2b00      	cmp	r3, #0
 800e74a:	f2c0 8119 	blt.w	800e980 <_dtoa_r+0x618>
 800e74e:	f1bb 0f0e 	cmp.w	fp, #14
 800e752:	f300 8115 	bgt.w	800e980 <_dtoa_r+0x618>
 800e756:	4bc3      	ldr	r3, [pc, #780]	; (800ea64 <_dtoa_r+0x6fc>)
 800e758:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e75c:	ed93 6b00 	vldr	d6, [r3]
 800e760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e762:	2b00      	cmp	r3, #0
 800e764:	f280 80ba 	bge.w	800e8dc <_dtoa_r+0x574>
 800e768:	f1b9 0f00 	cmp.w	r9, #0
 800e76c:	f300 80b6 	bgt.w	800e8dc <_dtoa_r+0x574>
 800e770:	f040 822d 	bne.w	800ebce <_dtoa_r+0x866>
 800e774:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e778:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e77c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e780:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e788:	464d      	mov	r5, r9
 800e78a:	464f      	mov	r7, r9
 800e78c:	f280 8204 	bge.w	800eb98 <_dtoa_r+0x830>
 800e790:	9b04      	ldr	r3, [sp, #16]
 800e792:	9a04      	ldr	r2, [sp, #16]
 800e794:	1c5e      	adds	r6, r3, #1
 800e796:	2331      	movs	r3, #49	; 0x31
 800e798:	7013      	strb	r3, [r2, #0]
 800e79a:	f10b 0b01 	add.w	fp, fp, #1
 800e79e:	e1ff      	b.n	800eba0 <_dtoa_r+0x838>
 800e7a0:	2202      	movs	r2, #2
 800e7a2:	e731      	b.n	800e608 <_dtoa_r+0x2a0>
 800e7a4:	d02e      	beq.n	800e804 <_dtoa_r+0x49c>
 800e7a6:	f1cb 0300 	rsb	r3, fp, #0
 800e7aa:	4aae      	ldr	r2, [pc, #696]	; (800ea64 <_dtoa_r+0x6fc>)
 800e7ac:	f003 010f 	and.w	r1, r3, #15
 800e7b0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e7b4:	ed92 7b00 	vldr	d7, [r2]
 800e7b8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800e7bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e7c0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e7c4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800e7c8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e7cc:	49a6      	ldr	r1, [pc, #664]	; (800ea68 <_dtoa_r+0x700>)
 800e7ce:	111b      	asrs	r3, r3, #4
 800e7d0:	2000      	movs	r0, #0
 800e7d2:	2202      	movs	r2, #2
 800e7d4:	b93b      	cbnz	r3, 800e7e6 <_dtoa_r+0x47e>
 800e7d6:	2800      	cmp	r0, #0
 800e7d8:	f43f af6b 	beq.w	800e6b2 <_dtoa_r+0x34a>
 800e7dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e7e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7e4:	e765      	b.n	800e6b2 <_dtoa_r+0x34a>
 800e7e6:	07dd      	lsls	r5, r3, #31
 800e7e8:	d509      	bpl.n	800e7fe <_dtoa_r+0x496>
 800e7ea:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800e7ee:	ed91 7b00 	vldr	d7, [r1]
 800e7f2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e7f6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e7fa:	3201      	adds	r2, #1
 800e7fc:	2001      	movs	r0, #1
 800e7fe:	105b      	asrs	r3, r3, #1
 800e800:	3108      	adds	r1, #8
 800e802:	e7e7      	b.n	800e7d4 <_dtoa_r+0x46c>
 800e804:	2202      	movs	r2, #2
 800e806:	e754      	b.n	800e6b2 <_dtoa_r+0x34a>
 800e808:	465b      	mov	r3, fp
 800e80a:	464d      	mov	r5, r9
 800e80c:	e770      	b.n	800e6f0 <_dtoa_r+0x388>
 800e80e:	4a95      	ldr	r2, [pc, #596]	; (800ea64 <_dtoa_r+0x6fc>)
 800e810:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800e814:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e818:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e81a:	ec41 0b17 	vmov	d7, r0, r1
 800e81e:	b35a      	cbz	r2, 800e878 <_dtoa_r+0x510>
 800e820:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e824:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e828:	9e04      	ldr	r6, [sp, #16]
 800e82a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e82e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e832:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e836:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e83a:	ee14 2a90 	vmov	r2, s9
 800e83e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e842:	3230      	adds	r2, #48	; 0x30
 800e844:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e848:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e850:	f806 2b01 	strb.w	r2, [r6], #1
 800e854:	d43b      	bmi.n	800e8ce <_dtoa_r+0x566>
 800e856:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e85a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e862:	d472      	bmi.n	800e94a <_dtoa_r+0x5e2>
 800e864:	9a04      	ldr	r2, [sp, #16]
 800e866:	1ab2      	subs	r2, r6, r2
 800e868:	4295      	cmp	r5, r2
 800e86a:	f77f af68 	ble.w	800e73e <_dtoa_r+0x3d6>
 800e86e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e872:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e876:	e7de      	b.n	800e836 <_dtoa_r+0x4ce>
 800e878:	9a04      	ldr	r2, [sp, #16]
 800e87a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e87e:	1956      	adds	r6, r2, r5
 800e880:	4611      	mov	r1, r2
 800e882:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e886:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e88a:	ee14 2a90 	vmov	r2, s9
 800e88e:	3230      	adds	r2, #48	; 0x30
 800e890:	f801 2b01 	strb.w	r2, [r1], #1
 800e894:	42b1      	cmp	r1, r6
 800e896:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e89a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e89e:	d11a      	bne.n	800e8d6 <_dtoa_r+0x56e>
 800e8a0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e8a4:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e8a8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e8ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b0:	dc4b      	bgt.n	800e94a <_dtoa_r+0x5e2>
 800e8b2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e8b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8be:	f57f af3e 	bpl.w	800e73e <_dtoa_r+0x3d6>
 800e8c2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e8c6:	2a30      	cmp	r2, #48	; 0x30
 800e8c8:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 800e8cc:	d001      	beq.n	800e8d2 <_dtoa_r+0x56a>
 800e8ce:	469b      	mov	fp, r3
 800e8d0:	e02a      	b.n	800e928 <_dtoa_r+0x5c0>
 800e8d2:	460e      	mov	r6, r1
 800e8d4:	e7f5      	b.n	800e8c2 <_dtoa_r+0x55a>
 800e8d6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e8da:	e7d4      	b.n	800e886 <_dtoa_r+0x51e>
 800e8dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e8e0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e8e4:	9e04      	ldr	r6, [sp, #16]
 800e8e6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e8ea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e8ee:	ee15 3a10 	vmov	r3, s10
 800e8f2:	3330      	adds	r3, #48	; 0x30
 800e8f4:	f806 3b01 	strb.w	r3, [r6], #1
 800e8f8:	9b04      	ldr	r3, [sp, #16]
 800e8fa:	1af3      	subs	r3, r6, r3
 800e8fc:	4599      	cmp	r9, r3
 800e8fe:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e902:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e906:	d133      	bne.n	800e970 <_dtoa_r+0x608>
 800e908:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e90c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e914:	dc18      	bgt.n	800e948 <_dtoa_r+0x5e0>
 800e916:	eeb4 7b46 	vcmp.f64	d7, d6
 800e91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e91e:	d103      	bne.n	800e928 <_dtoa_r+0x5c0>
 800e920:	ee15 3a10 	vmov	r3, s10
 800e924:	07db      	lsls	r3, r3, #31
 800e926:	d40f      	bmi.n	800e948 <_dtoa_r+0x5e0>
 800e928:	9901      	ldr	r1, [sp, #4]
 800e92a:	4620      	mov	r0, r4
 800e92c:	f000 fb22 	bl	800ef74 <_Bfree>
 800e930:	2300      	movs	r3, #0
 800e932:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e934:	7033      	strb	r3, [r6, #0]
 800e936:	f10b 0301 	add.w	r3, fp, #1
 800e93a:	6013      	str	r3, [r2, #0]
 800e93c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e93e:	2b00      	cmp	r3, #0
 800e940:	f43f ad5b 	beq.w	800e3fa <_dtoa_r+0x92>
 800e944:	601e      	str	r6, [r3, #0]
 800e946:	e558      	b.n	800e3fa <_dtoa_r+0x92>
 800e948:	465b      	mov	r3, fp
 800e94a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e94e:	2939      	cmp	r1, #57	; 0x39
 800e950:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800e954:	d106      	bne.n	800e964 <_dtoa_r+0x5fc>
 800e956:	9904      	ldr	r1, [sp, #16]
 800e958:	4291      	cmp	r1, r2
 800e95a:	d107      	bne.n	800e96c <_dtoa_r+0x604>
 800e95c:	2230      	movs	r2, #48	; 0x30
 800e95e:	700a      	strb	r2, [r1, #0]
 800e960:	3301      	adds	r3, #1
 800e962:	460a      	mov	r2, r1
 800e964:	7811      	ldrb	r1, [r2, #0]
 800e966:	3101      	adds	r1, #1
 800e968:	7011      	strb	r1, [r2, #0]
 800e96a:	e7b0      	b.n	800e8ce <_dtoa_r+0x566>
 800e96c:	4616      	mov	r6, r2
 800e96e:	e7ec      	b.n	800e94a <_dtoa_r+0x5e2>
 800e970:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e974:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e97c:	d1b3      	bne.n	800e8e6 <_dtoa_r+0x57e>
 800e97e:	e7d3      	b.n	800e928 <_dtoa_r+0x5c0>
 800e980:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e982:	2a00      	cmp	r2, #0
 800e984:	f000 808d 	beq.w	800eaa2 <_dtoa_r+0x73a>
 800e988:	9a08      	ldr	r2, [sp, #32]
 800e98a:	2a01      	cmp	r2, #1
 800e98c:	dc72      	bgt.n	800ea74 <_dtoa_r+0x70c>
 800e98e:	2f00      	cmp	r7, #0
 800e990:	d06c      	beq.n	800ea6c <_dtoa_r+0x704>
 800e992:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e996:	4645      	mov	r5, r8
 800e998:	4656      	mov	r6, sl
 800e99a:	9a07      	ldr	r2, [sp, #28]
 800e99c:	2101      	movs	r1, #1
 800e99e:	441a      	add	r2, r3
 800e9a0:	4620      	mov	r0, r4
 800e9a2:	449a      	add	sl, r3
 800e9a4:	9207      	str	r2, [sp, #28]
 800e9a6:	f000 fb85 	bl	800f0b4 <__i2b>
 800e9aa:	4607      	mov	r7, r0
 800e9ac:	2e00      	cmp	r6, #0
 800e9ae:	dd0b      	ble.n	800e9c8 <_dtoa_r+0x660>
 800e9b0:	9b07      	ldr	r3, [sp, #28]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	dd08      	ble.n	800e9c8 <_dtoa_r+0x660>
 800e9b6:	42b3      	cmp	r3, r6
 800e9b8:	9a07      	ldr	r2, [sp, #28]
 800e9ba:	bfa8      	it	ge
 800e9bc:	4633      	movge	r3, r6
 800e9be:	ebaa 0a03 	sub.w	sl, sl, r3
 800e9c2:	1af6      	subs	r6, r6, r3
 800e9c4:	1ad3      	subs	r3, r2, r3
 800e9c6:	9307      	str	r3, [sp, #28]
 800e9c8:	f1b8 0f00 	cmp.w	r8, #0
 800e9cc:	d01d      	beq.n	800ea0a <_dtoa_r+0x6a2>
 800e9ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d06a      	beq.n	800eaaa <_dtoa_r+0x742>
 800e9d4:	b18d      	cbz	r5, 800e9fa <_dtoa_r+0x692>
 800e9d6:	4639      	mov	r1, r7
 800e9d8:	462a      	mov	r2, r5
 800e9da:	4620      	mov	r0, r4
 800e9dc:	f000 fc0a 	bl	800f1f4 <__pow5mult>
 800e9e0:	9a01      	ldr	r2, [sp, #4]
 800e9e2:	4601      	mov	r1, r0
 800e9e4:	4607      	mov	r7, r0
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	f000 fb6d 	bl	800f0c6 <__multiply>
 800e9ec:	9901      	ldr	r1, [sp, #4]
 800e9ee:	900c      	str	r0, [sp, #48]	; 0x30
 800e9f0:	4620      	mov	r0, r4
 800e9f2:	f000 fabf 	bl	800ef74 <_Bfree>
 800e9f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9f8:	9301      	str	r3, [sp, #4]
 800e9fa:	ebb8 0205 	subs.w	r2, r8, r5
 800e9fe:	d004      	beq.n	800ea0a <_dtoa_r+0x6a2>
 800ea00:	9901      	ldr	r1, [sp, #4]
 800ea02:	4620      	mov	r0, r4
 800ea04:	f000 fbf6 	bl	800f1f4 <__pow5mult>
 800ea08:	9001      	str	r0, [sp, #4]
 800ea0a:	2101      	movs	r1, #1
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	f000 fb51 	bl	800f0b4 <__i2b>
 800ea12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea14:	4605      	mov	r5, r0
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	f000 81ca 	beq.w	800edb0 <_dtoa_r+0xa48>
 800ea1c:	461a      	mov	r2, r3
 800ea1e:	4601      	mov	r1, r0
 800ea20:	4620      	mov	r0, r4
 800ea22:	f000 fbe7 	bl	800f1f4 <__pow5mult>
 800ea26:	9b08      	ldr	r3, [sp, #32]
 800ea28:	2b01      	cmp	r3, #1
 800ea2a:	4605      	mov	r5, r0
 800ea2c:	dc44      	bgt.n	800eab8 <_dtoa_r+0x750>
 800ea2e:	9b02      	ldr	r3, [sp, #8]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d13c      	bne.n	800eaae <_dtoa_r+0x746>
 800ea34:	9b03      	ldr	r3, [sp, #12]
 800ea36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d137      	bne.n	800eaae <_dtoa_r+0x746>
 800ea3e:	9b03      	ldr	r3, [sp, #12]
 800ea40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ea44:	0d1b      	lsrs	r3, r3, #20
 800ea46:	051b      	lsls	r3, r3, #20
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d033      	beq.n	800eab4 <_dtoa_r+0x74c>
 800ea4c:	9b07      	ldr	r3, [sp, #28]
 800ea4e:	3301      	adds	r3, #1
 800ea50:	f10a 0a01 	add.w	sl, sl, #1
 800ea54:	9307      	str	r3, [sp, #28]
 800ea56:	f04f 0801 	mov.w	r8, #1
 800ea5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea5c:	bb73      	cbnz	r3, 800eabc <_dtoa_r+0x754>
 800ea5e:	2001      	movs	r0, #1
 800ea60:	e034      	b.n	800eacc <_dtoa_r+0x764>
 800ea62:	bf00      	nop
 800ea64:	08012c38 	.word	0x08012c38
 800ea68:	08012c10 	.word	0x08012c10
 800ea6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ea6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ea72:	e790      	b.n	800e996 <_dtoa_r+0x62e>
 800ea74:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 800ea78:	45a8      	cmp	r8, r5
 800ea7a:	bfbf      	itttt	lt
 800ea7c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800ea7e:	eba5 0808 	sublt.w	r8, r5, r8
 800ea82:	4443      	addlt	r3, r8
 800ea84:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800ea86:	bfb6      	itet	lt
 800ea88:	46a8      	movlt	r8, r5
 800ea8a:	eba8 0505 	subge.w	r5, r8, r5
 800ea8e:	2500      	movlt	r5, #0
 800ea90:	f1b9 0f00 	cmp.w	r9, #0
 800ea94:	bfb9      	ittee	lt
 800ea96:	ebaa 0609 	sublt.w	r6, sl, r9
 800ea9a:	2300      	movlt	r3, #0
 800ea9c:	4656      	movge	r6, sl
 800ea9e:	464b      	movge	r3, r9
 800eaa0:	e77b      	b.n	800e99a <_dtoa_r+0x632>
 800eaa2:	4645      	mov	r5, r8
 800eaa4:	4656      	mov	r6, sl
 800eaa6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800eaa8:	e780      	b.n	800e9ac <_dtoa_r+0x644>
 800eaaa:	4642      	mov	r2, r8
 800eaac:	e7a8      	b.n	800ea00 <_dtoa_r+0x698>
 800eaae:	f04f 0800 	mov.w	r8, #0
 800eab2:	e7d2      	b.n	800ea5a <_dtoa_r+0x6f2>
 800eab4:	4698      	mov	r8, r3
 800eab6:	e7d0      	b.n	800ea5a <_dtoa_r+0x6f2>
 800eab8:	f04f 0800 	mov.w	r8, #0
 800eabc:	692b      	ldr	r3, [r5, #16]
 800eabe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800eac2:	6918      	ldr	r0, [r3, #16]
 800eac4:	f000 faa8 	bl	800f018 <__hi0bits>
 800eac8:	f1c0 0020 	rsb	r0, r0, #32
 800eacc:	9b07      	ldr	r3, [sp, #28]
 800eace:	4418      	add	r0, r3
 800ead0:	f010 001f 	ands.w	r0, r0, #31
 800ead4:	d047      	beq.n	800eb66 <_dtoa_r+0x7fe>
 800ead6:	f1c0 0320 	rsb	r3, r0, #32
 800eada:	2b04      	cmp	r3, #4
 800eadc:	dd3b      	ble.n	800eb56 <_dtoa_r+0x7ee>
 800eade:	9b07      	ldr	r3, [sp, #28]
 800eae0:	f1c0 001c 	rsb	r0, r0, #28
 800eae4:	4482      	add	sl, r0
 800eae6:	4406      	add	r6, r0
 800eae8:	4403      	add	r3, r0
 800eaea:	9307      	str	r3, [sp, #28]
 800eaec:	f1ba 0f00 	cmp.w	sl, #0
 800eaf0:	dd05      	ble.n	800eafe <_dtoa_r+0x796>
 800eaf2:	4652      	mov	r2, sl
 800eaf4:	9901      	ldr	r1, [sp, #4]
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	f000 fbca 	bl	800f290 <__lshift>
 800eafc:	9001      	str	r0, [sp, #4]
 800eafe:	9b07      	ldr	r3, [sp, #28]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	dd05      	ble.n	800eb10 <_dtoa_r+0x7a8>
 800eb04:	4629      	mov	r1, r5
 800eb06:	461a      	mov	r2, r3
 800eb08:	4620      	mov	r0, r4
 800eb0a:	f000 fbc1 	bl	800f290 <__lshift>
 800eb0e:	4605      	mov	r5, r0
 800eb10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb12:	b353      	cbz	r3, 800eb6a <_dtoa_r+0x802>
 800eb14:	4629      	mov	r1, r5
 800eb16:	9801      	ldr	r0, [sp, #4]
 800eb18:	f000 fc0e 	bl	800f338 <__mcmp>
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	da24      	bge.n	800eb6a <_dtoa_r+0x802>
 800eb20:	2300      	movs	r3, #0
 800eb22:	220a      	movs	r2, #10
 800eb24:	9901      	ldr	r1, [sp, #4]
 800eb26:	4620      	mov	r0, r4
 800eb28:	f000 fa3b 	bl	800efa2 <__multadd>
 800eb2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb2e:	9001      	str	r0, [sp, #4]
 800eb30:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	f000 8142 	beq.w	800edbe <_dtoa_r+0xa56>
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	4639      	mov	r1, r7
 800eb3e:	220a      	movs	r2, #10
 800eb40:	4620      	mov	r0, r4
 800eb42:	f000 fa2e 	bl	800efa2 <__multadd>
 800eb46:	9b06      	ldr	r3, [sp, #24]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	4607      	mov	r7, r0
 800eb4c:	dc4b      	bgt.n	800ebe6 <_dtoa_r+0x87e>
 800eb4e:	9b08      	ldr	r3, [sp, #32]
 800eb50:	2b02      	cmp	r3, #2
 800eb52:	dd48      	ble.n	800ebe6 <_dtoa_r+0x87e>
 800eb54:	e011      	b.n	800eb7a <_dtoa_r+0x812>
 800eb56:	d0c9      	beq.n	800eaec <_dtoa_r+0x784>
 800eb58:	9a07      	ldr	r2, [sp, #28]
 800eb5a:	331c      	adds	r3, #28
 800eb5c:	441a      	add	r2, r3
 800eb5e:	449a      	add	sl, r3
 800eb60:	441e      	add	r6, r3
 800eb62:	4613      	mov	r3, r2
 800eb64:	e7c1      	b.n	800eaea <_dtoa_r+0x782>
 800eb66:	4603      	mov	r3, r0
 800eb68:	e7f6      	b.n	800eb58 <_dtoa_r+0x7f0>
 800eb6a:	f1b9 0f00 	cmp.w	r9, #0
 800eb6e:	dc34      	bgt.n	800ebda <_dtoa_r+0x872>
 800eb70:	9b08      	ldr	r3, [sp, #32]
 800eb72:	2b02      	cmp	r3, #2
 800eb74:	dd31      	ble.n	800ebda <_dtoa_r+0x872>
 800eb76:	f8cd 9018 	str.w	r9, [sp, #24]
 800eb7a:	9b06      	ldr	r3, [sp, #24]
 800eb7c:	b963      	cbnz	r3, 800eb98 <_dtoa_r+0x830>
 800eb7e:	4629      	mov	r1, r5
 800eb80:	2205      	movs	r2, #5
 800eb82:	4620      	mov	r0, r4
 800eb84:	f000 fa0d 	bl	800efa2 <__multadd>
 800eb88:	4601      	mov	r1, r0
 800eb8a:	4605      	mov	r5, r0
 800eb8c:	9801      	ldr	r0, [sp, #4]
 800eb8e:	f000 fbd3 	bl	800f338 <__mcmp>
 800eb92:	2800      	cmp	r0, #0
 800eb94:	f73f adfc 	bgt.w	800e790 <_dtoa_r+0x428>
 800eb98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb9a:	9e04      	ldr	r6, [sp, #16]
 800eb9c:	ea6f 0b03 	mvn.w	fp, r3
 800eba0:	f04f 0900 	mov.w	r9, #0
 800eba4:	4629      	mov	r1, r5
 800eba6:	4620      	mov	r0, r4
 800eba8:	f000 f9e4 	bl	800ef74 <_Bfree>
 800ebac:	2f00      	cmp	r7, #0
 800ebae:	f43f aebb 	beq.w	800e928 <_dtoa_r+0x5c0>
 800ebb2:	f1b9 0f00 	cmp.w	r9, #0
 800ebb6:	d005      	beq.n	800ebc4 <_dtoa_r+0x85c>
 800ebb8:	45b9      	cmp	r9, r7
 800ebba:	d003      	beq.n	800ebc4 <_dtoa_r+0x85c>
 800ebbc:	4649      	mov	r1, r9
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	f000 f9d8 	bl	800ef74 <_Bfree>
 800ebc4:	4639      	mov	r1, r7
 800ebc6:	4620      	mov	r0, r4
 800ebc8:	f000 f9d4 	bl	800ef74 <_Bfree>
 800ebcc:	e6ac      	b.n	800e928 <_dtoa_r+0x5c0>
 800ebce:	2500      	movs	r5, #0
 800ebd0:	462f      	mov	r7, r5
 800ebd2:	e7e1      	b.n	800eb98 <_dtoa_r+0x830>
 800ebd4:	469b      	mov	fp, r3
 800ebd6:	462f      	mov	r7, r5
 800ebd8:	e5da      	b.n	800e790 <_dtoa_r+0x428>
 800ebda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebdc:	f8cd 9018 	str.w	r9, [sp, #24]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	f000 80f3 	beq.w	800edcc <_dtoa_r+0xa64>
 800ebe6:	2e00      	cmp	r6, #0
 800ebe8:	dd05      	ble.n	800ebf6 <_dtoa_r+0x88e>
 800ebea:	4639      	mov	r1, r7
 800ebec:	4632      	mov	r2, r6
 800ebee:	4620      	mov	r0, r4
 800ebf0:	f000 fb4e 	bl	800f290 <__lshift>
 800ebf4:	4607      	mov	r7, r0
 800ebf6:	f1b8 0f00 	cmp.w	r8, #0
 800ebfa:	d04c      	beq.n	800ec96 <_dtoa_r+0x92e>
 800ebfc:	6879      	ldr	r1, [r7, #4]
 800ebfe:	4620      	mov	r0, r4
 800ec00:	f000 f984 	bl	800ef0c <_Balloc>
 800ec04:	693a      	ldr	r2, [r7, #16]
 800ec06:	3202      	adds	r2, #2
 800ec08:	4606      	mov	r6, r0
 800ec0a:	0092      	lsls	r2, r2, #2
 800ec0c:	f107 010c 	add.w	r1, r7, #12
 800ec10:	300c      	adds	r0, #12
 800ec12:	f7fe fc3d 	bl	800d490 <memcpy>
 800ec16:	2201      	movs	r2, #1
 800ec18:	4631      	mov	r1, r6
 800ec1a:	4620      	mov	r0, r4
 800ec1c:	f000 fb38 	bl	800f290 <__lshift>
 800ec20:	9b02      	ldr	r3, [sp, #8]
 800ec22:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ec26:	f003 0301 	and.w	r3, r3, #1
 800ec2a:	46b9      	mov	r9, r7
 800ec2c:	9307      	str	r3, [sp, #28]
 800ec2e:	4607      	mov	r7, r0
 800ec30:	4629      	mov	r1, r5
 800ec32:	9801      	ldr	r0, [sp, #4]
 800ec34:	f7ff fb0c 	bl	800e250 <quorem>
 800ec38:	4649      	mov	r1, r9
 800ec3a:	4606      	mov	r6, r0
 800ec3c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ec40:	9801      	ldr	r0, [sp, #4]
 800ec42:	f000 fb79 	bl	800f338 <__mcmp>
 800ec46:	463a      	mov	r2, r7
 800ec48:	9002      	str	r0, [sp, #8]
 800ec4a:	4629      	mov	r1, r5
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	f000 fb8d 	bl	800f36c <__mdiff>
 800ec52:	68c3      	ldr	r3, [r0, #12]
 800ec54:	4602      	mov	r2, r0
 800ec56:	bb03      	cbnz	r3, 800ec9a <_dtoa_r+0x932>
 800ec58:	4601      	mov	r1, r0
 800ec5a:	9009      	str	r0, [sp, #36]	; 0x24
 800ec5c:	9801      	ldr	r0, [sp, #4]
 800ec5e:	f000 fb6b 	bl	800f338 <__mcmp>
 800ec62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec64:	4603      	mov	r3, r0
 800ec66:	4611      	mov	r1, r2
 800ec68:	4620      	mov	r0, r4
 800ec6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ec6c:	f000 f982 	bl	800ef74 <_Bfree>
 800ec70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec72:	b9a3      	cbnz	r3, 800ec9e <_dtoa_r+0x936>
 800ec74:	9a08      	ldr	r2, [sp, #32]
 800ec76:	b992      	cbnz	r2, 800ec9e <_dtoa_r+0x936>
 800ec78:	9a07      	ldr	r2, [sp, #28]
 800ec7a:	b982      	cbnz	r2, 800ec9e <_dtoa_r+0x936>
 800ec7c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ec80:	d029      	beq.n	800ecd6 <_dtoa_r+0x96e>
 800ec82:	9b02      	ldr	r3, [sp, #8]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	dd01      	ble.n	800ec8c <_dtoa_r+0x924>
 800ec88:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800ec8c:	f10a 0601 	add.w	r6, sl, #1
 800ec90:	f88a 8000 	strb.w	r8, [sl]
 800ec94:	e786      	b.n	800eba4 <_dtoa_r+0x83c>
 800ec96:	4638      	mov	r0, r7
 800ec98:	e7c2      	b.n	800ec20 <_dtoa_r+0x8b8>
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	e7e3      	b.n	800ec66 <_dtoa_r+0x8fe>
 800ec9e:	9a02      	ldr	r2, [sp, #8]
 800eca0:	2a00      	cmp	r2, #0
 800eca2:	db04      	blt.n	800ecae <_dtoa_r+0x946>
 800eca4:	d124      	bne.n	800ecf0 <_dtoa_r+0x988>
 800eca6:	9a08      	ldr	r2, [sp, #32]
 800eca8:	bb12      	cbnz	r2, 800ecf0 <_dtoa_r+0x988>
 800ecaa:	9a07      	ldr	r2, [sp, #28]
 800ecac:	bb02      	cbnz	r2, 800ecf0 <_dtoa_r+0x988>
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	ddec      	ble.n	800ec8c <_dtoa_r+0x924>
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	9901      	ldr	r1, [sp, #4]
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	f000 faea 	bl	800f290 <__lshift>
 800ecbc:	4629      	mov	r1, r5
 800ecbe:	9001      	str	r0, [sp, #4]
 800ecc0:	f000 fb3a 	bl	800f338 <__mcmp>
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	dc03      	bgt.n	800ecd0 <_dtoa_r+0x968>
 800ecc8:	d1e0      	bne.n	800ec8c <_dtoa_r+0x924>
 800ecca:	f018 0f01 	tst.w	r8, #1
 800ecce:	d0dd      	beq.n	800ec8c <_dtoa_r+0x924>
 800ecd0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ecd4:	d1d8      	bne.n	800ec88 <_dtoa_r+0x920>
 800ecd6:	2339      	movs	r3, #57	; 0x39
 800ecd8:	f10a 0601 	add.w	r6, sl, #1
 800ecdc:	f88a 3000 	strb.w	r3, [sl]
 800ece0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ece4:	2b39      	cmp	r3, #57	; 0x39
 800ece6:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800ecea:	d04c      	beq.n	800ed86 <_dtoa_r+0xa1e>
 800ecec:	3301      	adds	r3, #1
 800ecee:	e051      	b.n	800ed94 <_dtoa_r+0xa2c>
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	f10a 0601 	add.w	r6, sl, #1
 800ecf6:	dd05      	ble.n	800ed04 <_dtoa_r+0x99c>
 800ecf8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ecfc:	d0eb      	beq.n	800ecd6 <_dtoa_r+0x96e>
 800ecfe:	f108 0801 	add.w	r8, r8, #1
 800ed02:	e7c5      	b.n	800ec90 <_dtoa_r+0x928>
 800ed04:	9b04      	ldr	r3, [sp, #16]
 800ed06:	9a06      	ldr	r2, [sp, #24]
 800ed08:	f806 8c01 	strb.w	r8, [r6, #-1]
 800ed0c:	1af3      	subs	r3, r6, r3
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	d021      	beq.n	800ed56 <_dtoa_r+0x9ee>
 800ed12:	2300      	movs	r3, #0
 800ed14:	220a      	movs	r2, #10
 800ed16:	9901      	ldr	r1, [sp, #4]
 800ed18:	4620      	mov	r0, r4
 800ed1a:	f000 f942 	bl	800efa2 <__multadd>
 800ed1e:	45b9      	cmp	r9, r7
 800ed20:	9001      	str	r0, [sp, #4]
 800ed22:	f04f 0300 	mov.w	r3, #0
 800ed26:	f04f 020a 	mov.w	r2, #10
 800ed2a:	4649      	mov	r1, r9
 800ed2c:	4620      	mov	r0, r4
 800ed2e:	d105      	bne.n	800ed3c <_dtoa_r+0x9d4>
 800ed30:	f000 f937 	bl	800efa2 <__multadd>
 800ed34:	4681      	mov	r9, r0
 800ed36:	4607      	mov	r7, r0
 800ed38:	46b2      	mov	sl, r6
 800ed3a:	e779      	b.n	800ec30 <_dtoa_r+0x8c8>
 800ed3c:	f000 f931 	bl	800efa2 <__multadd>
 800ed40:	4639      	mov	r1, r7
 800ed42:	4681      	mov	r9, r0
 800ed44:	2300      	movs	r3, #0
 800ed46:	220a      	movs	r2, #10
 800ed48:	4620      	mov	r0, r4
 800ed4a:	f000 f92a 	bl	800efa2 <__multadd>
 800ed4e:	4607      	mov	r7, r0
 800ed50:	e7f2      	b.n	800ed38 <_dtoa_r+0x9d0>
 800ed52:	f04f 0900 	mov.w	r9, #0
 800ed56:	2201      	movs	r2, #1
 800ed58:	9901      	ldr	r1, [sp, #4]
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	f000 fa98 	bl	800f290 <__lshift>
 800ed60:	4629      	mov	r1, r5
 800ed62:	9001      	str	r0, [sp, #4]
 800ed64:	f000 fae8 	bl	800f338 <__mcmp>
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	dcb9      	bgt.n	800ece0 <_dtoa_r+0x978>
 800ed6c:	d102      	bne.n	800ed74 <_dtoa_r+0xa0c>
 800ed6e:	f018 0f01 	tst.w	r8, #1
 800ed72:	d1b5      	bne.n	800ece0 <_dtoa_r+0x978>
 800ed74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ed78:	2b30      	cmp	r3, #48	; 0x30
 800ed7a:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800ed7e:	f47f af11 	bne.w	800eba4 <_dtoa_r+0x83c>
 800ed82:	4616      	mov	r6, r2
 800ed84:	e7f6      	b.n	800ed74 <_dtoa_r+0xa0c>
 800ed86:	9b04      	ldr	r3, [sp, #16]
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d105      	bne.n	800ed98 <_dtoa_r+0xa30>
 800ed8c:	9a04      	ldr	r2, [sp, #16]
 800ed8e:	f10b 0b01 	add.w	fp, fp, #1
 800ed92:	2331      	movs	r3, #49	; 0x31
 800ed94:	7013      	strb	r3, [r2, #0]
 800ed96:	e705      	b.n	800eba4 <_dtoa_r+0x83c>
 800ed98:	4616      	mov	r6, r2
 800ed9a:	e7a1      	b.n	800ece0 <_dtoa_r+0x978>
 800ed9c:	4b16      	ldr	r3, [pc, #88]	; (800edf8 <_dtoa_r+0xa90>)
 800ed9e:	f7ff bb48 	b.w	800e432 <_dtoa_r+0xca>
 800eda2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	f47f ab23 	bne.w	800e3f0 <_dtoa_r+0x88>
 800edaa:	4b14      	ldr	r3, [pc, #80]	; (800edfc <_dtoa_r+0xa94>)
 800edac:	f7ff bb41 	b.w	800e432 <_dtoa_r+0xca>
 800edb0:	9b08      	ldr	r3, [sp, #32]
 800edb2:	2b01      	cmp	r3, #1
 800edb4:	f77f ae3b 	ble.w	800ea2e <_dtoa_r+0x6c6>
 800edb8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800edbc:	e64f      	b.n	800ea5e <_dtoa_r+0x6f6>
 800edbe:	9b06      	ldr	r3, [sp, #24]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	dc03      	bgt.n	800edcc <_dtoa_r+0xa64>
 800edc4:	9b08      	ldr	r3, [sp, #32]
 800edc6:	2b02      	cmp	r3, #2
 800edc8:	f73f aed7 	bgt.w	800eb7a <_dtoa_r+0x812>
 800edcc:	9e04      	ldr	r6, [sp, #16]
 800edce:	9801      	ldr	r0, [sp, #4]
 800edd0:	4629      	mov	r1, r5
 800edd2:	f7ff fa3d 	bl	800e250 <quorem>
 800edd6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800edda:	f806 8b01 	strb.w	r8, [r6], #1
 800edde:	9b04      	ldr	r3, [sp, #16]
 800ede0:	9a06      	ldr	r2, [sp, #24]
 800ede2:	1af3      	subs	r3, r6, r3
 800ede4:	429a      	cmp	r2, r3
 800ede6:	ddb4      	ble.n	800ed52 <_dtoa_r+0x9ea>
 800ede8:	2300      	movs	r3, #0
 800edea:	220a      	movs	r2, #10
 800edec:	9901      	ldr	r1, [sp, #4]
 800edee:	4620      	mov	r0, r4
 800edf0:	f000 f8d7 	bl	800efa2 <__multadd>
 800edf4:	9001      	str	r0, [sp, #4]
 800edf6:	e7ea      	b.n	800edce <_dtoa_r+0xa66>
 800edf8:	08012bdc 	.word	0x08012bdc
 800edfc:	08012c00 	.word	0x08012c00

0800ee00 <_localeconv_r>:
 800ee00:	4b04      	ldr	r3, [pc, #16]	; (800ee14 <_localeconv_r+0x14>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	6a18      	ldr	r0, [r3, #32]
 800ee06:	4b04      	ldr	r3, [pc, #16]	; (800ee18 <_localeconv_r+0x18>)
 800ee08:	2800      	cmp	r0, #0
 800ee0a:	bf08      	it	eq
 800ee0c:	4618      	moveq	r0, r3
 800ee0e:	30f0      	adds	r0, #240	; 0xf0
 800ee10:	4770      	bx	lr
 800ee12:	bf00      	nop
 800ee14:	240006ac 	.word	0x240006ac
 800ee18:	24000710 	.word	0x24000710

0800ee1c <_lseek_r>:
 800ee1c:	b538      	push	{r3, r4, r5, lr}
 800ee1e:	4c07      	ldr	r4, [pc, #28]	; (800ee3c <_lseek_r+0x20>)
 800ee20:	4605      	mov	r5, r0
 800ee22:	4608      	mov	r0, r1
 800ee24:	4611      	mov	r1, r2
 800ee26:	2200      	movs	r2, #0
 800ee28:	6022      	str	r2, [r4, #0]
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	f7fa fe48 	bl	8009ac0 <_lseek>
 800ee30:	1c43      	adds	r3, r0, #1
 800ee32:	d102      	bne.n	800ee3a <_lseek_r+0x1e>
 800ee34:	6823      	ldr	r3, [r4, #0]
 800ee36:	b103      	cbz	r3, 800ee3a <_lseek_r+0x1e>
 800ee38:	602b      	str	r3, [r5, #0]
 800ee3a:	bd38      	pop	{r3, r4, r5, pc}
 800ee3c:	24001ebc 	.word	0x24001ebc

0800ee40 <__swhatbuf_r>:
 800ee40:	b570      	push	{r4, r5, r6, lr}
 800ee42:	460e      	mov	r6, r1
 800ee44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee48:	2900      	cmp	r1, #0
 800ee4a:	b096      	sub	sp, #88	; 0x58
 800ee4c:	4614      	mov	r4, r2
 800ee4e:	461d      	mov	r5, r3
 800ee50:	da07      	bge.n	800ee62 <__swhatbuf_r+0x22>
 800ee52:	2300      	movs	r3, #0
 800ee54:	602b      	str	r3, [r5, #0]
 800ee56:	89b3      	ldrh	r3, [r6, #12]
 800ee58:	061a      	lsls	r2, r3, #24
 800ee5a:	d410      	bmi.n	800ee7e <__swhatbuf_r+0x3e>
 800ee5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee60:	e00e      	b.n	800ee80 <__swhatbuf_r+0x40>
 800ee62:	466a      	mov	r2, sp
 800ee64:	f000 fc8e 	bl	800f784 <_fstat_r>
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	dbf2      	blt.n	800ee52 <__swhatbuf_r+0x12>
 800ee6c:	9a01      	ldr	r2, [sp, #4]
 800ee6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ee72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ee76:	425a      	negs	r2, r3
 800ee78:	415a      	adcs	r2, r3
 800ee7a:	602a      	str	r2, [r5, #0]
 800ee7c:	e7ee      	b.n	800ee5c <__swhatbuf_r+0x1c>
 800ee7e:	2340      	movs	r3, #64	; 0x40
 800ee80:	2000      	movs	r0, #0
 800ee82:	6023      	str	r3, [r4, #0]
 800ee84:	b016      	add	sp, #88	; 0x58
 800ee86:	bd70      	pop	{r4, r5, r6, pc}

0800ee88 <__smakebuf_r>:
 800ee88:	898b      	ldrh	r3, [r1, #12]
 800ee8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ee8c:	079d      	lsls	r5, r3, #30
 800ee8e:	4606      	mov	r6, r0
 800ee90:	460c      	mov	r4, r1
 800ee92:	d507      	bpl.n	800eea4 <__smakebuf_r+0x1c>
 800ee94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ee98:	6023      	str	r3, [r4, #0]
 800ee9a:	6123      	str	r3, [r4, #16]
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	6163      	str	r3, [r4, #20]
 800eea0:	b002      	add	sp, #8
 800eea2:	bd70      	pop	{r4, r5, r6, pc}
 800eea4:	ab01      	add	r3, sp, #4
 800eea6:	466a      	mov	r2, sp
 800eea8:	f7ff ffca 	bl	800ee40 <__swhatbuf_r>
 800eeac:	9900      	ldr	r1, [sp, #0]
 800eeae:	4605      	mov	r5, r0
 800eeb0:	4630      	mov	r0, r6
 800eeb2:	f7fe fb4f 	bl	800d554 <_malloc_r>
 800eeb6:	b948      	cbnz	r0, 800eecc <__smakebuf_r+0x44>
 800eeb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eebc:	059a      	lsls	r2, r3, #22
 800eebe:	d4ef      	bmi.n	800eea0 <__smakebuf_r+0x18>
 800eec0:	f023 0303 	bic.w	r3, r3, #3
 800eec4:	f043 0302 	orr.w	r3, r3, #2
 800eec8:	81a3      	strh	r3, [r4, #12]
 800eeca:	e7e3      	b.n	800ee94 <__smakebuf_r+0xc>
 800eecc:	4b0d      	ldr	r3, [pc, #52]	; (800ef04 <__smakebuf_r+0x7c>)
 800eece:	62b3      	str	r3, [r6, #40]	; 0x28
 800eed0:	89a3      	ldrh	r3, [r4, #12]
 800eed2:	6020      	str	r0, [r4, #0]
 800eed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eed8:	81a3      	strh	r3, [r4, #12]
 800eeda:	9b00      	ldr	r3, [sp, #0]
 800eedc:	6163      	str	r3, [r4, #20]
 800eede:	9b01      	ldr	r3, [sp, #4]
 800eee0:	6120      	str	r0, [r4, #16]
 800eee2:	b15b      	cbz	r3, 800eefc <__smakebuf_r+0x74>
 800eee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eee8:	4630      	mov	r0, r6
 800eeea:	f000 fc5d 	bl	800f7a8 <_isatty_r>
 800eeee:	b128      	cbz	r0, 800eefc <__smakebuf_r+0x74>
 800eef0:	89a3      	ldrh	r3, [r4, #12]
 800eef2:	f023 0303 	bic.w	r3, r3, #3
 800eef6:	f043 0301 	orr.w	r3, r3, #1
 800eefa:	81a3      	strh	r3, [r4, #12]
 800eefc:	89a3      	ldrh	r3, [r4, #12]
 800eefe:	431d      	orrs	r5, r3
 800ef00:	81a5      	strh	r5, [r4, #12]
 800ef02:	e7cd      	b.n	800eea0 <__smakebuf_r+0x18>
 800ef04:	0800d2ed 	.word	0x0800d2ed

0800ef08 <__malloc_lock>:
 800ef08:	4770      	bx	lr

0800ef0a <__malloc_unlock>:
 800ef0a:	4770      	bx	lr

0800ef0c <_Balloc>:
 800ef0c:	b570      	push	{r4, r5, r6, lr}
 800ef0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ef10:	4604      	mov	r4, r0
 800ef12:	460e      	mov	r6, r1
 800ef14:	b93d      	cbnz	r5, 800ef26 <_Balloc+0x1a>
 800ef16:	2010      	movs	r0, #16
 800ef18:	f7fe fab2 	bl	800d480 <malloc>
 800ef1c:	6260      	str	r0, [r4, #36]	; 0x24
 800ef1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ef22:	6005      	str	r5, [r0, #0]
 800ef24:	60c5      	str	r5, [r0, #12]
 800ef26:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ef28:	68eb      	ldr	r3, [r5, #12]
 800ef2a:	b183      	cbz	r3, 800ef4e <_Balloc+0x42>
 800ef2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef2e:	68db      	ldr	r3, [r3, #12]
 800ef30:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ef34:	b9b8      	cbnz	r0, 800ef66 <_Balloc+0x5a>
 800ef36:	2101      	movs	r1, #1
 800ef38:	fa01 f506 	lsl.w	r5, r1, r6
 800ef3c:	1d6a      	adds	r2, r5, #5
 800ef3e:	0092      	lsls	r2, r2, #2
 800ef40:	4620      	mov	r0, r4
 800ef42:	f000 fabf 	bl	800f4c4 <_calloc_r>
 800ef46:	b160      	cbz	r0, 800ef62 <_Balloc+0x56>
 800ef48:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ef4c:	e00e      	b.n	800ef6c <_Balloc+0x60>
 800ef4e:	2221      	movs	r2, #33	; 0x21
 800ef50:	2104      	movs	r1, #4
 800ef52:	4620      	mov	r0, r4
 800ef54:	f000 fab6 	bl	800f4c4 <_calloc_r>
 800ef58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef5a:	60e8      	str	r0, [r5, #12]
 800ef5c:	68db      	ldr	r3, [r3, #12]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d1e4      	bne.n	800ef2c <_Balloc+0x20>
 800ef62:	2000      	movs	r0, #0
 800ef64:	bd70      	pop	{r4, r5, r6, pc}
 800ef66:	6802      	ldr	r2, [r0, #0]
 800ef68:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ef72:	e7f7      	b.n	800ef64 <_Balloc+0x58>

0800ef74 <_Bfree>:
 800ef74:	b570      	push	{r4, r5, r6, lr}
 800ef76:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ef78:	4606      	mov	r6, r0
 800ef7a:	460d      	mov	r5, r1
 800ef7c:	b93c      	cbnz	r4, 800ef8e <_Bfree+0x1a>
 800ef7e:	2010      	movs	r0, #16
 800ef80:	f7fe fa7e 	bl	800d480 <malloc>
 800ef84:	6270      	str	r0, [r6, #36]	; 0x24
 800ef86:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ef8a:	6004      	str	r4, [r0, #0]
 800ef8c:	60c4      	str	r4, [r0, #12]
 800ef8e:	b13d      	cbz	r5, 800efa0 <_Bfree+0x2c>
 800ef90:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ef92:	686a      	ldr	r2, [r5, #4]
 800ef94:	68db      	ldr	r3, [r3, #12]
 800ef96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ef9a:	6029      	str	r1, [r5, #0]
 800ef9c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800efa0:	bd70      	pop	{r4, r5, r6, pc}

0800efa2 <__multadd>:
 800efa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efa6:	690d      	ldr	r5, [r1, #16]
 800efa8:	461f      	mov	r7, r3
 800efaa:	4606      	mov	r6, r0
 800efac:	460c      	mov	r4, r1
 800efae:	f101 0c14 	add.w	ip, r1, #20
 800efb2:	2300      	movs	r3, #0
 800efb4:	f8dc 0000 	ldr.w	r0, [ip]
 800efb8:	b281      	uxth	r1, r0
 800efba:	fb02 7101 	mla	r1, r2, r1, r7
 800efbe:	0c0f      	lsrs	r7, r1, #16
 800efc0:	0c00      	lsrs	r0, r0, #16
 800efc2:	fb02 7000 	mla	r0, r2, r0, r7
 800efc6:	b289      	uxth	r1, r1
 800efc8:	3301      	adds	r3, #1
 800efca:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800efce:	429d      	cmp	r5, r3
 800efd0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800efd4:	f84c 1b04 	str.w	r1, [ip], #4
 800efd8:	dcec      	bgt.n	800efb4 <__multadd+0x12>
 800efda:	b1d7      	cbz	r7, 800f012 <__multadd+0x70>
 800efdc:	68a3      	ldr	r3, [r4, #8]
 800efde:	42ab      	cmp	r3, r5
 800efe0:	dc12      	bgt.n	800f008 <__multadd+0x66>
 800efe2:	6861      	ldr	r1, [r4, #4]
 800efe4:	4630      	mov	r0, r6
 800efe6:	3101      	adds	r1, #1
 800efe8:	f7ff ff90 	bl	800ef0c <_Balloc>
 800efec:	6922      	ldr	r2, [r4, #16]
 800efee:	3202      	adds	r2, #2
 800eff0:	f104 010c 	add.w	r1, r4, #12
 800eff4:	4680      	mov	r8, r0
 800eff6:	0092      	lsls	r2, r2, #2
 800eff8:	300c      	adds	r0, #12
 800effa:	f7fe fa49 	bl	800d490 <memcpy>
 800effe:	4621      	mov	r1, r4
 800f000:	4630      	mov	r0, r6
 800f002:	f7ff ffb7 	bl	800ef74 <_Bfree>
 800f006:	4644      	mov	r4, r8
 800f008:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f00c:	3501      	adds	r5, #1
 800f00e:	615f      	str	r7, [r3, #20]
 800f010:	6125      	str	r5, [r4, #16]
 800f012:	4620      	mov	r0, r4
 800f014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f018 <__hi0bits>:
 800f018:	0c02      	lsrs	r2, r0, #16
 800f01a:	0412      	lsls	r2, r2, #16
 800f01c:	4603      	mov	r3, r0
 800f01e:	b9b2      	cbnz	r2, 800f04e <__hi0bits+0x36>
 800f020:	0403      	lsls	r3, r0, #16
 800f022:	2010      	movs	r0, #16
 800f024:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f028:	bf04      	itt	eq
 800f02a:	021b      	lsleq	r3, r3, #8
 800f02c:	3008      	addeq	r0, #8
 800f02e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f032:	bf04      	itt	eq
 800f034:	011b      	lsleq	r3, r3, #4
 800f036:	3004      	addeq	r0, #4
 800f038:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f03c:	bf04      	itt	eq
 800f03e:	009b      	lsleq	r3, r3, #2
 800f040:	3002      	addeq	r0, #2
 800f042:	2b00      	cmp	r3, #0
 800f044:	db06      	blt.n	800f054 <__hi0bits+0x3c>
 800f046:	005b      	lsls	r3, r3, #1
 800f048:	d503      	bpl.n	800f052 <__hi0bits+0x3a>
 800f04a:	3001      	adds	r0, #1
 800f04c:	4770      	bx	lr
 800f04e:	2000      	movs	r0, #0
 800f050:	e7e8      	b.n	800f024 <__hi0bits+0xc>
 800f052:	2020      	movs	r0, #32
 800f054:	4770      	bx	lr

0800f056 <__lo0bits>:
 800f056:	6803      	ldr	r3, [r0, #0]
 800f058:	f013 0207 	ands.w	r2, r3, #7
 800f05c:	4601      	mov	r1, r0
 800f05e:	d00b      	beq.n	800f078 <__lo0bits+0x22>
 800f060:	07da      	lsls	r2, r3, #31
 800f062:	d423      	bmi.n	800f0ac <__lo0bits+0x56>
 800f064:	0798      	lsls	r0, r3, #30
 800f066:	bf49      	itett	mi
 800f068:	085b      	lsrmi	r3, r3, #1
 800f06a:	089b      	lsrpl	r3, r3, #2
 800f06c:	2001      	movmi	r0, #1
 800f06e:	600b      	strmi	r3, [r1, #0]
 800f070:	bf5c      	itt	pl
 800f072:	600b      	strpl	r3, [r1, #0]
 800f074:	2002      	movpl	r0, #2
 800f076:	4770      	bx	lr
 800f078:	b298      	uxth	r0, r3
 800f07a:	b9a8      	cbnz	r0, 800f0a8 <__lo0bits+0x52>
 800f07c:	0c1b      	lsrs	r3, r3, #16
 800f07e:	2010      	movs	r0, #16
 800f080:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f084:	bf04      	itt	eq
 800f086:	0a1b      	lsreq	r3, r3, #8
 800f088:	3008      	addeq	r0, #8
 800f08a:	071a      	lsls	r2, r3, #28
 800f08c:	bf04      	itt	eq
 800f08e:	091b      	lsreq	r3, r3, #4
 800f090:	3004      	addeq	r0, #4
 800f092:	079a      	lsls	r2, r3, #30
 800f094:	bf04      	itt	eq
 800f096:	089b      	lsreq	r3, r3, #2
 800f098:	3002      	addeq	r0, #2
 800f09a:	07da      	lsls	r2, r3, #31
 800f09c:	d402      	bmi.n	800f0a4 <__lo0bits+0x4e>
 800f09e:	085b      	lsrs	r3, r3, #1
 800f0a0:	d006      	beq.n	800f0b0 <__lo0bits+0x5a>
 800f0a2:	3001      	adds	r0, #1
 800f0a4:	600b      	str	r3, [r1, #0]
 800f0a6:	4770      	bx	lr
 800f0a8:	4610      	mov	r0, r2
 800f0aa:	e7e9      	b.n	800f080 <__lo0bits+0x2a>
 800f0ac:	2000      	movs	r0, #0
 800f0ae:	4770      	bx	lr
 800f0b0:	2020      	movs	r0, #32
 800f0b2:	4770      	bx	lr

0800f0b4 <__i2b>:
 800f0b4:	b510      	push	{r4, lr}
 800f0b6:	460c      	mov	r4, r1
 800f0b8:	2101      	movs	r1, #1
 800f0ba:	f7ff ff27 	bl	800ef0c <_Balloc>
 800f0be:	2201      	movs	r2, #1
 800f0c0:	6144      	str	r4, [r0, #20]
 800f0c2:	6102      	str	r2, [r0, #16]
 800f0c4:	bd10      	pop	{r4, pc}

0800f0c6 <__multiply>:
 800f0c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ca:	4614      	mov	r4, r2
 800f0cc:	690a      	ldr	r2, [r1, #16]
 800f0ce:	6923      	ldr	r3, [r4, #16]
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	bfb8      	it	lt
 800f0d4:	460b      	movlt	r3, r1
 800f0d6:	4688      	mov	r8, r1
 800f0d8:	bfbc      	itt	lt
 800f0da:	46a0      	movlt	r8, r4
 800f0dc:	461c      	movlt	r4, r3
 800f0de:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f0e2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f0e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f0ea:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f0ee:	eb07 0609 	add.w	r6, r7, r9
 800f0f2:	42b3      	cmp	r3, r6
 800f0f4:	bfb8      	it	lt
 800f0f6:	3101      	addlt	r1, #1
 800f0f8:	f7ff ff08 	bl	800ef0c <_Balloc>
 800f0fc:	f100 0514 	add.w	r5, r0, #20
 800f100:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f104:	462b      	mov	r3, r5
 800f106:	2200      	movs	r2, #0
 800f108:	4573      	cmp	r3, lr
 800f10a:	d316      	bcc.n	800f13a <__multiply+0x74>
 800f10c:	f104 0214 	add.w	r2, r4, #20
 800f110:	f108 0114 	add.w	r1, r8, #20
 800f114:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f118:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f11c:	9300      	str	r3, [sp, #0]
 800f11e:	9b00      	ldr	r3, [sp, #0]
 800f120:	9201      	str	r2, [sp, #4]
 800f122:	4293      	cmp	r3, r2
 800f124:	d80c      	bhi.n	800f140 <__multiply+0x7a>
 800f126:	2e00      	cmp	r6, #0
 800f128:	dd03      	ble.n	800f132 <__multiply+0x6c>
 800f12a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d05d      	beq.n	800f1ee <__multiply+0x128>
 800f132:	6106      	str	r6, [r0, #16]
 800f134:	b003      	add	sp, #12
 800f136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f13a:	f843 2b04 	str.w	r2, [r3], #4
 800f13e:	e7e3      	b.n	800f108 <__multiply+0x42>
 800f140:	f8b2 b000 	ldrh.w	fp, [r2]
 800f144:	f1bb 0f00 	cmp.w	fp, #0
 800f148:	d023      	beq.n	800f192 <__multiply+0xcc>
 800f14a:	4689      	mov	r9, r1
 800f14c:	46ac      	mov	ip, r5
 800f14e:	f04f 0800 	mov.w	r8, #0
 800f152:	f859 4b04 	ldr.w	r4, [r9], #4
 800f156:	f8dc a000 	ldr.w	sl, [ip]
 800f15a:	b2a3      	uxth	r3, r4
 800f15c:	fa1f fa8a 	uxth.w	sl, sl
 800f160:	fb0b a303 	mla	r3, fp, r3, sl
 800f164:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f168:	f8dc 4000 	ldr.w	r4, [ip]
 800f16c:	4443      	add	r3, r8
 800f16e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f172:	fb0b 840a 	mla	r4, fp, sl, r8
 800f176:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f17a:	46e2      	mov	sl, ip
 800f17c:	b29b      	uxth	r3, r3
 800f17e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f182:	454f      	cmp	r7, r9
 800f184:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f188:	f84a 3b04 	str.w	r3, [sl], #4
 800f18c:	d82b      	bhi.n	800f1e6 <__multiply+0x120>
 800f18e:	f8cc 8004 	str.w	r8, [ip, #4]
 800f192:	9b01      	ldr	r3, [sp, #4]
 800f194:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f198:	3204      	adds	r2, #4
 800f19a:	f1ba 0f00 	cmp.w	sl, #0
 800f19e:	d020      	beq.n	800f1e2 <__multiply+0x11c>
 800f1a0:	682b      	ldr	r3, [r5, #0]
 800f1a2:	4689      	mov	r9, r1
 800f1a4:	46a8      	mov	r8, r5
 800f1a6:	f04f 0b00 	mov.w	fp, #0
 800f1aa:	f8b9 c000 	ldrh.w	ip, [r9]
 800f1ae:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f1b2:	fb0a 440c 	mla	r4, sl, ip, r4
 800f1b6:	445c      	add	r4, fp
 800f1b8:	46c4      	mov	ip, r8
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f1c0:	f84c 3b04 	str.w	r3, [ip], #4
 800f1c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800f1c8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f1cc:	0c1b      	lsrs	r3, r3, #16
 800f1ce:	fb0a b303 	mla	r3, sl, r3, fp
 800f1d2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f1d6:	454f      	cmp	r7, r9
 800f1d8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f1dc:	d805      	bhi.n	800f1ea <__multiply+0x124>
 800f1de:	f8c8 3004 	str.w	r3, [r8, #4]
 800f1e2:	3504      	adds	r5, #4
 800f1e4:	e79b      	b.n	800f11e <__multiply+0x58>
 800f1e6:	46d4      	mov	ip, sl
 800f1e8:	e7b3      	b.n	800f152 <__multiply+0x8c>
 800f1ea:	46e0      	mov	r8, ip
 800f1ec:	e7dd      	b.n	800f1aa <__multiply+0xe4>
 800f1ee:	3e01      	subs	r6, #1
 800f1f0:	e799      	b.n	800f126 <__multiply+0x60>
	...

0800f1f4 <__pow5mult>:
 800f1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1f8:	4615      	mov	r5, r2
 800f1fa:	f012 0203 	ands.w	r2, r2, #3
 800f1fe:	4606      	mov	r6, r0
 800f200:	460f      	mov	r7, r1
 800f202:	d007      	beq.n	800f214 <__pow5mult+0x20>
 800f204:	3a01      	subs	r2, #1
 800f206:	4c21      	ldr	r4, [pc, #132]	; (800f28c <__pow5mult+0x98>)
 800f208:	2300      	movs	r3, #0
 800f20a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f20e:	f7ff fec8 	bl	800efa2 <__multadd>
 800f212:	4607      	mov	r7, r0
 800f214:	10ad      	asrs	r5, r5, #2
 800f216:	d035      	beq.n	800f284 <__pow5mult+0x90>
 800f218:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f21a:	b93c      	cbnz	r4, 800f22c <__pow5mult+0x38>
 800f21c:	2010      	movs	r0, #16
 800f21e:	f7fe f92f 	bl	800d480 <malloc>
 800f222:	6270      	str	r0, [r6, #36]	; 0x24
 800f224:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f228:	6004      	str	r4, [r0, #0]
 800f22a:	60c4      	str	r4, [r0, #12]
 800f22c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f230:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f234:	b94c      	cbnz	r4, 800f24a <__pow5mult+0x56>
 800f236:	f240 2171 	movw	r1, #625	; 0x271
 800f23a:	4630      	mov	r0, r6
 800f23c:	f7ff ff3a 	bl	800f0b4 <__i2b>
 800f240:	2300      	movs	r3, #0
 800f242:	f8c8 0008 	str.w	r0, [r8, #8]
 800f246:	4604      	mov	r4, r0
 800f248:	6003      	str	r3, [r0, #0]
 800f24a:	f04f 0800 	mov.w	r8, #0
 800f24e:	07eb      	lsls	r3, r5, #31
 800f250:	d50a      	bpl.n	800f268 <__pow5mult+0x74>
 800f252:	4639      	mov	r1, r7
 800f254:	4622      	mov	r2, r4
 800f256:	4630      	mov	r0, r6
 800f258:	f7ff ff35 	bl	800f0c6 <__multiply>
 800f25c:	4639      	mov	r1, r7
 800f25e:	4681      	mov	r9, r0
 800f260:	4630      	mov	r0, r6
 800f262:	f7ff fe87 	bl	800ef74 <_Bfree>
 800f266:	464f      	mov	r7, r9
 800f268:	106d      	asrs	r5, r5, #1
 800f26a:	d00b      	beq.n	800f284 <__pow5mult+0x90>
 800f26c:	6820      	ldr	r0, [r4, #0]
 800f26e:	b938      	cbnz	r0, 800f280 <__pow5mult+0x8c>
 800f270:	4622      	mov	r2, r4
 800f272:	4621      	mov	r1, r4
 800f274:	4630      	mov	r0, r6
 800f276:	f7ff ff26 	bl	800f0c6 <__multiply>
 800f27a:	6020      	str	r0, [r4, #0]
 800f27c:	f8c0 8000 	str.w	r8, [r0]
 800f280:	4604      	mov	r4, r0
 800f282:	e7e4      	b.n	800f24e <__pow5mult+0x5a>
 800f284:	4638      	mov	r0, r7
 800f286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f28a:	bf00      	nop
 800f28c:	08012d00 	.word	0x08012d00

0800f290 <__lshift>:
 800f290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f294:	460c      	mov	r4, r1
 800f296:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f29a:	6923      	ldr	r3, [r4, #16]
 800f29c:	6849      	ldr	r1, [r1, #4]
 800f29e:	eb0a 0903 	add.w	r9, sl, r3
 800f2a2:	68a3      	ldr	r3, [r4, #8]
 800f2a4:	4607      	mov	r7, r0
 800f2a6:	4616      	mov	r6, r2
 800f2a8:	f109 0501 	add.w	r5, r9, #1
 800f2ac:	42ab      	cmp	r3, r5
 800f2ae:	db32      	blt.n	800f316 <__lshift+0x86>
 800f2b0:	4638      	mov	r0, r7
 800f2b2:	f7ff fe2b 	bl	800ef0c <_Balloc>
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	4680      	mov	r8, r0
 800f2ba:	f100 0114 	add.w	r1, r0, #20
 800f2be:	461a      	mov	r2, r3
 800f2c0:	4553      	cmp	r3, sl
 800f2c2:	db2b      	blt.n	800f31c <__lshift+0x8c>
 800f2c4:	6920      	ldr	r0, [r4, #16]
 800f2c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f2ca:	f104 0314 	add.w	r3, r4, #20
 800f2ce:	f016 021f 	ands.w	r2, r6, #31
 800f2d2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f2d6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f2da:	d025      	beq.n	800f328 <__lshift+0x98>
 800f2dc:	f1c2 0e20 	rsb	lr, r2, #32
 800f2e0:	2000      	movs	r0, #0
 800f2e2:	681e      	ldr	r6, [r3, #0]
 800f2e4:	468a      	mov	sl, r1
 800f2e6:	4096      	lsls	r6, r2
 800f2e8:	4330      	orrs	r0, r6
 800f2ea:	f84a 0b04 	str.w	r0, [sl], #4
 800f2ee:	f853 0b04 	ldr.w	r0, [r3], #4
 800f2f2:	459c      	cmp	ip, r3
 800f2f4:	fa20 f00e 	lsr.w	r0, r0, lr
 800f2f8:	d814      	bhi.n	800f324 <__lshift+0x94>
 800f2fa:	6048      	str	r0, [r1, #4]
 800f2fc:	b108      	cbz	r0, 800f302 <__lshift+0x72>
 800f2fe:	f109 0502 	add.w	r5, r9, #2
 800f302:	3d01      	subs	r5, #1
 800f304:	4638      	mov	r0, r7
 800f306:	f8c8 5010 	str.w	r5, [r8, #16]
 800f30a:	4621      	mov	r1, r4
 800f30c:	f7ff fe32 	bl	800ef74 <_Bfree>
 800f310:	4640      	mov	r0, r8
 800f312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f316:	3101      	adds	r1, #1
 800f318:	005b      	lsls	r3, r3, #1
 800f31a:	e7c7      	b.n	800f2ac <__lshift+0x1c>
 800f31c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f320:	3301      	adds	r3, #1
 800f322:	e7cd      	b.n	800f2c0 <__lshift+0x30>
 800f324:	4651      	mov	r1, sl
 800f326:	e7dc      	b.n	800f2e2 <__lshift+0x52>
 800f328:	3904      	subs	r1, #4
 800f32a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f32e:	f841 2f04 	str.w	r2, [r1, #4]!
 800f332:	459c      	cmp	ip, r3
 800f334:	d8f9      	bhi.n	800f32a <__lshift+0x9a>
 800f336:	e7e4      	b.n	800f302 <__lshift+0x72>

0800f338 <__mcmp>:
 800f338:	6903      	ldr	r3, [r0, #16]
 800f33a:	690a      	ldr	r2, [r1, #16]
 800f33c:	1a9b      	subs	r3, r3, r2
 800f33e:	b530      	push	{r4, r5, lr}
 800f340:	d10c      	bne.n	800f35c <__mcmp+0x24>
 800f342:	0092      	lsls	r2, r2, #2
 800f344:	3014      	adds	r0, #20
 800f346:	3114      	adds	r1, #20
 800f348:	1884      	adds	r4, r0, r2
 800f34a:	4411      	add	r1, r2
 800f34c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f350:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f354:	4295      	cmp	r5, r2
 800f356:	d003      	beq.n	800f360 <__mcmp+0x28>
 800f358:	d305      	bcc.n	800f366 <__mcmp+0x2e>
 800f35a:	2301      	movs	r3, #1
 800f35c:	4618      	mov	r0, r3
 800f35e:	bd30      	pop	{r4, r5, pc}
 800f360:	42a0      	cmp	r0, r4
 800f362:	d3f3      	bcc.n	800f34c <__mcmp+0x14>
 800f364:	e7fa      	b.n	800f35c <__mcmp+0x24>
 800f366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f36a:	e7f7      	b.n	800f35c <__mcmp+0x24>

0800f36c <__mdiff>:
 800f36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f370:	460d      	mov	r5, r1
 800f372:	4607      	mov	r7, r0
 800f374:	4611      	mov	r1, r2
 800f376:	4628      	mov	r0, r5
 800f378:	4614      	mov	r4, r2
 800f37a:	f7ff ffdd 	bl	800f338 <__mcmp>
 800f37e:	1e06      	subs	r6, r0, #0
 800f380:	d108      	bne.n	800f394 <__mdiff+0x28>
 800f382:	4631      	mov	r1, r6
 800f384:	4638      	mov	r0, r7
 800f386:	f7ff fdc1 	bl	800ef0c <_Balloc>
 800f38a:	2301      	movs	r3, #1
 800f38c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f394:	bfa4      	itt	ge
 800f396:	4623      	movge	r3, r4
 800f398:	462c      	movge	r4, r5
 800f39a:	4638      	mov	r0, r7
 800f39c:	6861      	ldr	r1, [r4, #4]
 800f39e:	bfa6      	itte	ge
 800f3a0:	461d      	movge	r5, r3
 800f3a2:	2600      	movge	r6, #0
 800f3a4:	2601      	movlt	r6, #1
 800f3a6:	f7ff fdb1 	bl	800ef0c <_Balloc>
 800f3aa:	692b      	ldr	r3, [r5, #16]
 800f3ac:	60c6      	str	r6, [r0, #12]
 800f3ae:	6926      	ldr	r6, [r4, #16]
 800f3b0:	f105 0914 	add.w	r9, r5, #20
 800f3b4:	f104 0214 	add.w	r2, r4, #20
 800f3b8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f3bc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f3c0:	f100 0514 	add.w	r5, r0, #20
 800f3c4:	f04f 0e00 	mov.w	lr, #0
 800f3c8:	f852 ab04 	ldr.w	sl, [r2], #4
 800f3cc:	f859 4b04 	ldr.w	r4, [r9], #4
 800f3d0:	fa1e f18a 	uxtah	r1, lr, sl
 800f3d4:	b2a3      	uxth	r3, r4
 800f3d6:	1ac9      	subs	r1, r1, r3
 800f3d8:	0c23      	lsrs	r3, r4, #16
 800f3da:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f3de:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f3e2:	b289      	uxth	r1, r1
 800f3e4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f3e8:	45c8      	cmp	r8, r9
 800f3ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f3ee:	4694      	mov	ip, r2
 800f3f0:	f845 3b04 	str.w	r3, [r5], #4
 800f3f4:	d8e8      	bhi.n	800f3c8 <__mdiff+0x5c>
 800f3f6:	45bc      	cmp	ip, r7
 800f3f8:	d304      	bcc.n	800f404 <__mdiff+0x98>
 800f3fa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f3fe:	b183      	cbz	r3, 800f422 <__mdiff+0xb6>
 800f400:	6106      	str	r6, [r0, #16]
 800f402:	e7c5      	b.n	800f390 <__mdiff+0x24>
 800f404:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f408:	fa1e f381 	uxtah	r3, lr, r1
 800f40c:	141a      	asrs	r2, r3, #16
 800f40e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f412:	b29b      	uxth	r3, r3
 800f414:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f418:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f41c:	f845 3b04 	str.w	r3, [r5], #4
 800f420:	e7e9      	b.n	800f3f6 <__mdiff+0x8a>
 800f422:	3e01      	subs	r6, #1
 800f424:	e7e9      	b.n	800f3fa <__mdiff+0x8e>

0800f426 <__d2b>:
 800f426:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f42a:	460e      	mov	r6, r1
 800f42c:	2101      	movs	r1, #1
 800f42e:	ec59 8b10 	vmov	r8, r9, d0
 800f432:	4615      	mov	r5, r2
 800f434:	f7ff fd6a 	bl	800ef0c <_Balloc>
 800f438:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f43c:	4607      	mov	r7, r0
 800f43e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f442:	bb34      	cbnz	r4, 800f492 <__d2b+0x6c>
 800f444:	9301      	str	r3, [sp, #4]
 800f446:	f1b8 0300 	subs.w	r3, r8, #0
 800f44a:	d027      	beq.n	800f49c <__d2b+0x76>
 800f44c:	a802      	add	r0, sp, #8
 800f44e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f452:	f7ff fe00 	bl	800f056 <__lo0bits>
 800f456:	9900      	ldr	r1, [sp, #0]
 800f458:	b1f0      	cbz	r0, 800f498 <__d2b+0x72>
 800f45a:	9a01      	ldr	r2, [sp, #4]
 800f45c:	f1c0 0320 	rsb	r3, r0, #32
 800f460:	fa02 f303 	lsl.w	r3, r2, r3
 800f464:	430b      	orrs	r3, r1
 800f466:	40c2      	lsrs	r2, r0
 800f468:	617b      	str	r3, [r7, #20]
 800f46a:	9201      	str	r2, [sp, #4]
 800f46c:	9b01      	ldr	r3, [sp, #4]
 800f46e:	61bb      	str	r3, [r7, #24]
 800f470:	2b00      	cmp	r3, #0
 800f472:	bf14      	ite	ne
 800f474:	2102      	movne	r1, #2
 800f476:	2101      	moveq	r1, #1
 800f478:	6139      	str	r1, [r7, #16]
 800f47a:	b1c4      	cbz	r4, 800f4ae <__d2b+0x88>
 800f47c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f480:	4404      	add	r4, r0
 800f482:	6034      	str	r4, [r6, #0]
 800f484:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f488:	6028      	str	r0, [r5, #0]
 800f48a:	4638      	mov	r0, r7
 800f48c:	b003      	add	sp, #12
 800f48e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f496:	e7d5      	b.n	800f444 <__d2b+0x1e>
 800f498:	6179      	str	r1, [r7, #20]
 800f49a:	e7e7      	b.n	800f46c <__d2b+0x46>
 800f49c:	a801      	add	r0, sp, #4
 800f49e:	f7ff fdda 	bl	800f056 <__lo0bits>
 800f4a2:	9b01      	ldr	r3, [sp, #4]
 800f4a4:	617b      	str	r3, [r7, #20]
 800f4a6:	2101      	movs	r1, #1
 800f4a8:	6139      	str	r1, [r7, #16]
 800f4aa:	3020      	adds	r0, #32
 800f4ac:	e7e5      	b.n	800f47a <__d2b+0x54>
 800f4ae:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f4b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f4b6:	6030      	str	r0, [r6, #0]
 800f4b8:	6918      	ldr	r0, [r3, #16]
 800f4ba:	f7ff fdad 	bl	800f018 <__hi0bits>
 800f4be:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f4c2:	e7e1      	b.n	800f488 <__d2b+0x62>

0800f4c4 <_calloc_r>:
 800f4c4:	b538      	push	{r3, r4, r5, lr}
 800f4c6:	fb02 f401 	mul.w	r4, r2, r1
 800f4ca:	4621      	mov	r1, r4
 800f4cc:	f7fe f842 	bl	800d554 <_malloc_r>
 800f4d0:	4605      	mov	r5, r0
 800f4d2:	b118      	cbz	r0, 800f4dc <_calloc_r+0x18>
 800f4d4:	4622      	mov	r2, r4
 800f4d6:	2100      	movs	r1, #0
 800f4d8:	f7fd ffe5 	bl	800d4a6 <memset>
 800f4dc:	4628      	mov	r0, r5
 800f4de:	bd38      	pop	{r3, r4, r5, pc}

0800f4e0 <__sfputc_r>:
 800f4e0:	6893      	ldr	r3, [r2, #8]
 800f4e2:	3b01      	subs	r3, #1
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	b410      	push	{r4}
 800f4e8:	6093      	str	r3, [r2, #8]
 800f4ea:	da08      	bge.n	800f4fe <__sfputc_r+0x1e>
 800f4ec:	6994      	ldr	r4, [r2, #24]
 800f4ee:	42a3      	cmp	r3, r4
 800f4f0:	db01      	blt.n	800f4f6 <__sfputc_r+0x16>
 800f4f2:	290a      	cmp	r1, #10
 800f4f4:	d103      	bne.n	800f4fe <__sfputc_r+0x1e>
 800f4f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4fa:	f7fe bdc7 	b.w	800e08c <__swbuf_r>
 800f4fe:	6813      	ldr	r3, [r2, #0]
 800f500:	1c58      	adds	r0, r3, #1
 800f502:	6010      	str	r0, [r2, #0]
 800f504:	7019      	strb	r1, [r3, #0]
 800f506:	4608      	mov	r0, r1
 800f508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f50c:	4770      	bx	lr

0800f50e <__sfputs_r>:
 800f50e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f510:	4606      	mov	r6, r0
 800f512:	460f      	mov	r7, r1
 800f514:	4614      	mov	r4, r2
 800f516:	18d5      	adds	r5, r2, r3
 800f518:	42ac      	cmp	r4, r5
 800f51a:	d101      	bne.n	800f520 <__sfputs_r+0x12>
 800f51c:	2000      	movs	r0, #0
 800f51e:	e007      	b.n	800f530 <__sfputs_r+0x22>
 800f520:	463a      	mov	r2, r7
 800f522:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f526:	4630      	mov	r0, r6
 800f528:	f7ff ffda 	bl	800f4e0 <__sfputc_r>
 800f52c:	1c43      	adds	r3, r0, #1
 800f52e:	d1f3      	bne.n	800f518 <__sfputs_r+0xa>
 800f530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f534 <_vfiprintf_r>:
 800f534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f538:	460c      	mov	r4, r1
 800f53a:	b09d      	sub	sp, #116	; 0x74
 800f53c:	4617      	mov	r7, r2
 800f53e:	461d      	mov	r5, r3
 800f540:	4606      	mov	r6, r0
 800f542:	b118      	cbz	r0, 800f54c <_vfiprintf_r+0x18>
 800f544:	6983      	ldr	r3, [r0, #24]
 800f546:	b90b      	cbnz	r3, 800f54c <_vfiprintf_r+0x18>
 800f548:	f7fd feec 	bl	800d324 <__sinit>
 800f54c:	4b7c      	ldr	r3, [pc, #496]	; (800f740 <_vfiprintf_r+0x20c>)
 800f54e:	429c      	cmp	r4, r3
 800f550:	d158      	bne.n	800f604 <_vfiprintf_r+0xd0>
 800f552:	6874      	ldr	r4, [r6, #4]
 800f554:	89a3      	ldrh	r3, [r4, #12]
 800f556:	0718      	lsls	r0, r3, #28
 800f558:	d55e      	bpl.n	800f618 <_vfiprintf_r+0xe4>
 800f55a:	6923      	ldr	r3, [r4, #16]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d05b      	beq.n	800f618 <_vfiprintf_r+0xe4>
 800f560:	2300      	movs	r3, #0
 800f562:	9309      	str	r3, [sp, #36]	; 0x24
 800f564:	2320      	movs	r3, #32
 800f566:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f56a:	2330      	movs	r3, #48	; 0x30
 800f56c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f570:	9503      	str	r5, [sp, #12]
 800f572:	f04f 0b01 	mov.w	fp, #1
 800f576:	46b8      	mov	r8, r7
 800f578:	4645      	mov	r5, r8
 800f57a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f57e:	b10b      	cbz	r3, 800f584 <_vfiprintf_r+0x50>
 800f580:	2b25      	cmp	r3, #37	; 0x25
 800f582:	d154      	bne.n	800f62e <_vfiprintf_r+0xfa>
 800f584:	ebb8 0a07 	subs.w	sl, r8, r7
 800f588:	d00b      	beq.n	800f5a2 <_vfiprintf_r+0x6e>
 800f58a:	4653      	mov	r3, sl
 800f58c:	463a      	mov	r2, r7
 800f58e:	4621      	mov	r1, r4
 800f590:	4630      	mov	r0, r6
 800f592:	f7ff ffbc 	bl	800f50e <__sfputs_r>
 800f596:	3001      	adds	r0, #1
 800f598:	f000 80c2 	beq.w	800f720 <_vfiprintf_r+0x1ec>
 800f59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f59e:	4453      	add	r3, sl
 800f5a0:	9309      	str	r3, [sp, #36]	; 0x24
 800f5a2:	f898 3000 	ldrb.w	r3, [r8]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	f000 80ba 	beq.w	800f720 <_vfiprintf_r+0x1ec>
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5b6:	9304      	str	r3, [sp, #16]
 800f5b8:	9307      	str	r3, [sp, #28]
 800f5ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f5be:	931a      	str	r3, [sp, #104]	; 0x68
 800f5c0:	46a8      	mov	r8, r5
 800f5c2:	2205      	movs	r2, #5
 800f5c4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f5c8:	485e      	ldr	r0, [pc, #376]	; (800f744 <_vfiprintf_r+0x210>)
 800f5ca:	f7f0 fe91 	bl	80002f0 <memchr>
 800f5ce:	9b04      	ldr	r3, [sp, #16]
 800f5d0:	bb78      	cbnz	r0, 800f632 <_vfiprintf_r+0xfe>
 800f5d2:	06d9      	lsls	r1, r3, #27
 800f5d4:	bf44      	itt	mi
 800f5d6:	2220      	movmi	r2, #32
 800f5d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f5dc:	071a      	lsls	r2, r3, #28
 800f5de:	bf44      	itt	mi
 800f5e0:	222b      	movmi	r2, #43	; 0x2b
 800f5e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f5e6:	782a      	ldrb	r2, [r5, #0]
 800f5e8:	2a2a      	cmp	r2, #42	; 0x2a
 800f5ea:	d02a      	beq.n	800f642 <_vfiprintf_r+0x10e>
 800f5ec:	9a07      	ldr	r2, [sp, #28]
 800f5ee:	46a8      	mov	r8, r5
 800f5f0:	2000      	movs	r0, #0
 800f5f2:	250a      	movs	r5, #10
 800f5f4:	4641      	mov	r1, r8
 800f5f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5fa:	3b30      	subs	r3, #48	; 0x30
 800f5fc:	2b09      	cmp	r3, #9
 800f5fe:	d969      	bls.n	800f6d4 <_vfiprintf_r+0x1a0>
 800f600:	b360      	cbz	r0, 800f65c <_vfiprintf_r+0x128>
 800f602:	e024      	b.n	800f64e <_vfiprintf_r+0x11a>
 800f604:	4b50      	ldr	r3, [pc, #320]	; (800f748 <_vfiprintf_r+0x214>)
 800f606:	429c      	cmp	r4, r3
 800f608:	d101      	bne.n	800f60e <_vfiprintf_r+0xda>
 800f60a:	68b4      	ldr	r4, [r6, #8]
 800f60c:	e7a2      	b.n	800f554 <_vfiprintf_r+0x20>
 800f60e:	4b4f      	ldr	r3, [pc, #316]	; (800f74c <_vfiprintf_r+0x218>)
 800f610:	429c      	cmp	r4, r3
 800f612:	bf08      	it	eq
 800f614:	68f4      	ldreq	r4, [r6, #12]
 800f616:	e79d      	b.n	800f554 <_vfiprintf_r+0x20>
 800f618:	4621      	mov	r1, r4
 800f61a:	4630      	mov	r0, r6
 800f61c:	f7fe fd9a 	bl	800e154 <__swsetup_r>
 800f620:	2800      	cmp	r0, #0
 800f622:	d09d      	beq.n	800f560 <_vfiprintf_r+0x2c>
 800f624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f628:	b01d      	add	sp, #116	; 0x74
 800f62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f62e:	46a8      	mov	r8, r5
 800f630:	e7a2      	b.n	800f578 <_vfiprintf_r+0x44>
 800f632:	4a44      	ldr	r2, [pc, #272]	; (800f744 <_vfiprintf_r+0x210>)
 800f634:	1a80      	subs	r0, r0, r2
 800f636:	fa0b f000 	lsl.w	r0, fp, r0
 800f63a:	4318      	orrs	r0, r3
 800f63c:	9004      	str	r0, [sp, #16]
 800f63e:	4645      	mov	r5, r8
 800f640:	e7be      	b.n	800f5c0 <_vfiprintf_r+0x8c>
 800f642:	9a03      	ldr	r2, [sp, #12]
 800f644:	1d11      	adds	r1, r2, #4
 800f646:	6812      	ldr	r2, [r2, #0]
 800f648:	9103      	str	r1, [sp, #12]
 800f64a:	2a00      	cmp	r2, #0
 800f64c:	db01      	blt.n	800f652 <_vfiprintf_r+0x11e>
 800f64e:	9207      	str	r2, [sp, #28]
 800f650:	e004      	b.n	800f65c <_vfiprintf_r+0x128>
 800f652:	4252      	negs	r2, r2
 800f654:	f043 0302 	orr.w	r3, r3, #2
 800f658:	9207      	str	r2, [sp, #28]
 800f65a:	9304      	str	r3, [sp, #16]
 800f65c:	f898 3000 	ldrb.w	r3, [r8]
 800f660:	2b2e      	cmp	r3, #46	; 0x2e
 800f662:	d10e      	bne.n	800f682 <_vfiprintf_r+0x14e>
 800f664:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f668:	2b2a      	cmp	r3, #42	; 0x2a
 800f66a:	d138      	bne.n	800f6de <_vfiprintf_r+0x1aa>
 800f66c:	9b03      	ldr	r3, [sp, #12]
 800f66e:	1d1a      	adds	r2, r3, #4
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	9203      	str	r2, [sp, #12]
 800f674:	2b00      	cmp	r3, #0
 800f676:	bfb8      	it	lt
 800f678:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f67c:	f108 0802 	add.w	r8, r8, #2
 800f680:	9305      	str	r3, [sp, #20]
 800f682:	4d33      	ldr	r5, [pc, #204]	; (800f750 <_vfiprintf_r+0x21c>)
 800f684:	f898 1000 	ldrb.w	r1, [r8]
 800f688:	2203      	movs	r2, #3
 800f68a:	4628      	mov	r0, r5
 800f68c:	f7f0 fe30 	bl	80002f0 <memchr>
 800f690:	b140      	cbz	r0, 800f6a4 <_vfiprintf_r+0x170>
 800f692:	2340      	movs	r3, #64	; 0x40
 800f694:	1b40      	subs	r0, r0, r5
 800f696:	fa03 f000 	lsl.w	r0, r3, r0
 800f69a:	9b04      	ldr	r3, [sp, #16]
 800f69c:	4303      	orrs	r3, r0
 800f69e:	f108 0801 	add.w	r8, r8, #1
 800f6a2:	9304      	str	r3, [sp, #16]
 800f6a4:	f898 1000 	ldrb.w	r1, [r8]
 800f6a8:	482a      	ldr	r0, [pc, #168]	; (800f754 <_vfiprintf_r+0x220>)
 800f6aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6ae:	2206      	movs	r2, #6
 800f6b0:	f108 0701 	add.w	r7, r8, #1
 800f6b4:	f7f0 fe1c 	bl	80002f0 <memchr>
 800f6b8:	2800      	cmp	r0, #0
 800f6ba:	d037      	beq.n	800f72c <_vfiprintf_r+0x1f8>
 800f6bc:	4b26      	ldr	r3, [pc, #152]	; (800f758 <_vfiprintf_r+0x224>)
 800f6be:	bb1b      	cbnz	r3, 800f708 <_vfiprintf_r+0x1d4>
 800f6c0:	9b03      	ldr	r3, [sp, #12]
 800f6c2:	3307      	adds	r3, #7
 800f6c4:	f023 0307 	bic.w	r3, r3, #7
 800f6c8:	3308      	adds	r3, #8
 800f6ca:	9303      	str	r3, [sp, #12]
 800f6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6ce:	444b      	add	r3, r9
 800f6d0:	9309      	str	r3, [sp, #36]	; 0x24
 800f6d2:	e750      	b.n	800f576 <_vfiprintf_r+0x42>
 800f6d4:	fb05 3202 	mla	r2, r5, r2, r3
 800f6d8:	2001      	movs	r0, #1
 800f6da:	4688      	mov	r8, r1
 800f6dc:	e78a      	b.n	800f5f4 <_vfiprintf_r+0xc0>
 800f6de:	2300      	movs	r3, #0
 800f6e0:	f108 0801 	add.w	r8, r8, #1
 800f6e4:	9305      	str	r3, [sp, #20]
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	250a      	movs	r5, #10
 800f6ea:	4640      	mov	r0, r8
 800f6ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6f0:	3a30      	subs	r2, #48	; 0x30
 800f6f2:	2a09      	cmp	r2, #9
 800f6f4:	d903      	bls.n	800f6fe <_vfiprintf_r+0x1ca>
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d0c3      	beq.n	800f682 <_vfiprintf_r+0x14e>
 800f6fa:	9105      	str	r1, [sp, #20]
 800f6fc:	e7c1      	b.n	800f682 <_vfiprintf_r+0x14e>
 800f6fe:	fb05 2101 	mla	r1, r5, r1, r2
 800f702:	2301      	movs	r3, #1
 800f704:	4680      	mov	r8, r0
 800f706:	e7f0      	b.n	800f6ea <_vfiprintf_r+0x1b6>
 800f708:	ab03      	add	r3, sp, #12
 800f70a:	9300      	str	r3, [sp, #0]
 800f70c:	4622      	mov	r2, r4
 800f70e:	4b13      	ldr	r3, [pc, #76]	; (800f75c <_vfiprintf_r+0x228>)
 800f710:	a904      	add	r1, sp, #16
 800f712:	4630      	mov	r0, r6
 800f714:	f7fe f800 	bl	800d718 <_printf_float>
 800f718:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800f71c:	4681      	mov	r9, r0
 800f71e:	d1d5      	bne.n	800f6cc <_vfiprintf_r+0x198>
 800f720:	89a3      	ldrh	r3, [r4, #12]
 800f722:	065b      	lsls	r3, r3, #25
 800f724:	f53f af7e 	bmi.w	800f624 <_vfiprintf_r+0xf0>
 800f728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f72a:	e77d      	b.n	800f628 <_vfiprintf_r+0xf4>
 800f72c:	ab03      	add	r3, sp, #12
 800f72e:	9300      	str	r3, [sp, #0]
 800f730:	4622      	mov	r2, r4
 800f732:	4b0a      	ldr	r3, [pc, #40]	; (800f75c <_vfiprintf_r+0x228>)
 800f734:	a904      	add	r1, sp, #16
 800f736:	4630      	mov	r0, r6
 800f738:	f7fe fa90 	bl	800dc5c <_printf_i>
 800f73c:	e7ec      	b.n	800f718 <_vfiprintf_r+0x1e4>
 800f73e:	bf00      	nop
 800f740:	08012b88 	.word	0x08012b88
 800f744:	08012d0c 	.word	0x08012d0c
 800f748:	08012ba8 	.word	0x08012ba8
 800f74c:	08012b68 	.word	0x08012b68
 800f750:	08012d12 	.word	0x08012d12
 800f754:	08012d16 	.word	0x08012d16
 800f758:	0800d719 	.word	0x0800d719
 800f75c:	0800f50f 	.word	0x0800f50f

0800f760 <_read_r>:
 800f760:	b538      	push	{r3, r4, r5, lr}
 800f762:	4c07      	ldr	r4, [pc, #28]	; (800f780 <_read_r+0x20>)
 800f764:	4605      	mov	r5, r0
 800f766:	4608      	mov	r0, r1
 800f768:	4611      	mov	r1, r2
 800f76a:	2200      	movs	r2, #0
 800f76c:	6022      	str	r2, [r4, #0]
 800f76e:	461a      	mov	r2, r3
 800f770:	f7fa f962 	bl	8009a38 <_read>
 800f774:	1c43      	adds	r3, r0, #1
 800f776:	d102      	bne.n	800f77e <_read_r+0x1e>
 800f778:	6823      	ldr	r3, [r4, #0]
 800f77a:	b103      	cbz	r3, 800f77e <_read_r+0x1e>
 800f77c:	602b      	str	r3, [r5, #0]
 800f77e:	bd38      	pop	{r3, r4, r5, pc}
 800f780:	24001ebc 	.word	0x24001ebc

0800f784 <_fstat_r>:
 800f784:	b538      	push	{r3, r4, r5, lr}
 800f786:	4c07      	ldr	r4, [pc, #28]	; (800f7a4 <_fstat_r+0x20>)
 800f788:	2300      	movs	r3, #0
 800f78a:	4605      	mov	r5, r0
 800f78c:	4608      	mov	r0, r1
 800f78e:	4611      	mov	r1, r2
 800f790:	6023      	str	r3, [r4, #0]
 800f792:	f7fa f97a 	bl	8009a8a <_fstat>
 800f796:	1c43      	adds	r3, r0, #1
 800f798:	d102      	bne.n	800f7a0 <_fstat_r+0x1c>
 800f79a:	6823      	ldr	r3, [r4, #0]
 800f79c:	b103      	cbz	r3, 800f7a0 <_fstat_r+0x1c>
 800f79e:	602b      	str	r3, [r5, #0]
 800f7a0:	bd38      	pop	{r3, r4, r5, pc}
 800f7a2:	bf00      	nop
 800f7a4:	24001ebc 	.word	0x24001ebc

0800f7a8 <_isatty_r>:
 800f7a8:	b538      	push	{r3, r4, r5, lr}
 800f7aa:	4c06      	ldr	r4, [pc, #24]	; (800f7c4 <_isatty_r+0x1c>)
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	4605      	mov	r5, r0
 800f7b0:	4608      	mov	r0, r1
 800f7b2:	6023      	str	r3, [r4, #0]
 800f7b4:	f7fa f979 	bl	8009aaa <_isatty>
 800f7b8:	1c43      	adds	r3, r0, #1
 800f7ba:	d102      	bne.n	800f7c2 <_isatty_r+0x1a>
 800f7bc:	6823      	ldr	r3, [r4, #0]
 800f7be:	b103      	cbz	r3, 800f7c2 <_isatty_r+0x1a>
 800f7c0:	602b      	str	r3, [r5, #0]
 800f7c2:	bd38      	pop	{r3, r4, r5, pc}
 800f7c4:	24001ebc 	.word	0x24001ebc

0800f7c8 <__ascii_mbtowc>:
 800f7c8:	b082      	sub	sp, #8
 800f7ca:	b901      	cbnz	r1, 800f7ce <__ascii_mbtowc+0x6>
 800f7cc:	a901      	add	r1, sp, #4
 800f7ce:	b142      	cbz	r2, 800f7e2 <__ascii_mbtowc+0x1a>
 800f7d0:	b14b      	cbz	r3, 800f7e6 <__ascii_mbtowc+0x1e>
 800f7d2:	7813      	ldrb	r3, [r2, #0]
 800f7d4:	600b      	str	r3, [r1, #0]
 800f7d6:	7812      	ldrb	r2, [r2, #0]
 800f7d8:	1c10      	adds	r0, r2, #0
 800f7da:	bf18      	it	ne
 800f7dc:	2001      	movne	r0, #1
 800f7de:	b002      	add	sp, #8
 800f7e0:	4770      	bx	lr
 800f7e2:	4610      	mov	r0, r2
 800f7e4:	e7fb      	b.n	800f7de <__ascii_mbtowc+0x16>
 800f7e6:	f06f 0001 	mvn.w	r0, #1
 800f7ea:	e7f8      	b.n	800f7de <__ascii_mbtowc+0x16>

0800f7ec <__ascii_wctomb>:
 800f7ec:	b149      	cbz	r1, 800f802 <__ascii_wctomb+0x16>
 800f7ee:	2aff      	cmp	r2, #255	; 0xff
 800f7f0:	bf85      	ittet	hi
 800f7f2:	238a      	movhi	r3, #138	; 0x8a
 800f7f4:	6003      	strhi	r3, [r0, #0]
 800f7f6:	700a      	strbls	r2, [r1, #0]
 800f7f8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f7fc:	bf98      	it	ls
 800f7fe:	2001      	movls	r0, #1
 800f800:	4770      	bx	lr
 800f802:	4608      	mov	r0, r1
 800f804:	4770      	bx	lr
	...

0800f808 <expf>:
 800f808:	ee10 2a10 	vmov	r2, s0
 800f80c:	f240 412a 	movw	r1, #1066	; 0x42a
 800f810:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800f814:	428b      	cmp	r3, r1
 800f816:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
 800f81a:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800f81e:	d92e      	bls.n	800f87e <expf+0x76>
 800f820:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800f824:	d061      	beq.n	800f8ea <expf+0xe2>
 800f826:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800f82a:	d304      	bcc.n	800f836 <expf+0x2e>
 800f82c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f830:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800f834:	4770      	bx	lr
 800f836:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800f8f0 <expf+0xe8>
 800f83a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f842:	dd04      	ble.n	800f84e <expf+0x46>
 800f844:	2000      	movs	r0, #0
 800f846:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800f84a:	f000 b881 	b.w	800f950 <__math_oflowf>
 800f84e:	eddf 7a29 	vldr	s15, [pc, #164]	; 800f8f4 <expf+0xec>
 800f852:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f85a:	d504      	bpl.n	800f866 <expf+0x5e>
 800f85c:	2000      	movs	r0, #0
 800f85e:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800f862:	f000 b869 	b.w	800f938 <__math_uflowf>
 800f866:	eddf 7a24 	vldr	s15, [pc, #144]	; 800f8f8 <expf+0xf0>
 800f86a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f872:	d504      	bpl.n	800f87e <expf+0x76>
 800f874:	2000      	movs	r0, #0
 800f876:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 800f87a:	f000 b863 	b.w	800f944 <__math_may_uflowf>
 800f87e:	491f      	ldr	r1, [pc, #124]	; (800f8fc <expf+0xf4>)
 800f880:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f884:	ed91 5b4a 	vldr	d5, [r1, #296]	; 0x128
 800f888:	ed91 7b48 	vldr	d7, [r1, #288]	; 0x120
 800f88c:	eeb0 4b47 	vmov.f64	d4, d7
 800f890:	eea5 4b06 	vfma.f64	d4, d5, d6
 800f894:	ec55 4b14 	vmov	r4, r5, d4
 800f898:	ee34 7b47 	vsub.f64	d7, d4, d7
 800f89c:	f004 021f 	and.w	r2, r4, #31
 800f8a0:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800f8a4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f8a8:	ed91 6b50 	vldr	d6, [r1, #320]	; 0x140
 800f8ac:	e9d2 4500 	ldrd	r4, r5, [r2]
 800f8b0:	eea6 0b07 	vfma.f64	d0, d6, d7
 800f8b4:	ee14 0a10 	vmov	r0, s8
 800f8b8:	ed91 5b4c 	vldr	d5, [r1, #304]	; 0x130
 800f8bc:	ed91 6b4e 	vldr	d6, [r1, #312]	; 0x138
 800f8c0:	f04f 0b00 	mov.w	fp, #0
 800f8c4:	eb1b 0204 	adds.w	r2, fp, r4
 800f8c8:	ea4f 3cc0 	mov.w	ip, r0, lsl #15
 800f8cc:	eb4c 0305 	adc.w	r3, ip, r5
 800f8d0:	eea5 6b07 	vfma.f64	d6, d5, d7
 800f8d4:	ee27 7b07 	vmul.f64	d7, d7, d7
 800f8d8:	eea6 0b07 	vfma.f64	d0, d6, d7
 800f8dc:	ec43 2b17 	vmov	d7, r2, r3
 800f8e0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f8e4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f8e8:	e7a2      	b.n	800f830 <expf+0x28>
 800f8ea:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800f900 <expf+0xf8>
 800f8ee:	e79f      	b.n	800f830 <expf+0x28>
 800f8f0:	42b17217 	.word	0x42b17217
 800f8f4:	c2cff1b4 	.word	0xc2cff1b4
 800f8f8:	c2ce8ecf 	.word	0xc2ce8ecf
 800f8fc:	08012e28 	.word	0x08012e28
 800f900:	00000000 	.word	0x00000000

0800f904 <with_errnof>:
 800f904:	b510      	push	{r4, lr}
 800f906:	ed2d 8b02 	vpush	{d8}
 800f90a:	eeb0 8a40 	vmov.f32	s16, s0
 800f90e:	4604      	mov	r4, r0
 800f910:	f7fd fc12 	bl	800d138 <__errno>
 800f914:	eeb0 0a48 	vmov.f32	s0, s16
 800f918:	ecbd 8b02 	vpop	{d8}
 800f91c:	6004      	str	r4, [r0, #0]
 800f91e:	bd10      	pop	{r4, pc}

0800f920 <xflowf>:
 800f920:	b130      	cbz	r0, 800f930 <xflowf+0x10>
 800f922:	eef1 7a40 	vneg.f32	s15, s0
 800f926:	2022      	movs	r0, #34	; 0x22
 800f928:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f92c:	f7ff bfea 	b.w	800f904 <with_errnof>
 800f930:	eef0 7a40 	vmov.f32	s15, s0
 800f934:	e7f7      	b.n	800f926 <xflowf+0x6>
	...

0800f938 <__math_uflowf>:
 800f938:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f940 <__math_uflowf+0x8>
 800f93c:	f7ff bff0 	b.w	800f920 <xflowf>
 800f940:	10000000 	.word	0x10000000

0800f944 <__math_may_uflowf>:
 800f944:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f94c <__math_may_uflowf+0x8>
 800f948:	f7ff bfea 	b.w	800f920 <xflowf>
 800f94c:	1a200000 	.word	0x1a200000

0800f950 <__math_oflowf>:
 800f950:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f958 <__math_oflowf+0x8>
 800f954:	f7ff bfe4 	b.w	800f920 <xflowf>
 800f958:	70000000 	.word	0x70000000

0800f95c <_init>:
 800f95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f95e:	bf00      	nop
 800f960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f962:	bc08      	pop	{r3}
 800f964:	469e      	mov	lr, r3
 800f966:	4770      	bx	lr

0800f968 <_fini>:
 800f968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f96a:	bf00      	nop
 800f96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f96e:	bc08      	pop	{r3}
 800f970:	469e      	mov	lr, r3
 800f972:	4770      	bx	lr
